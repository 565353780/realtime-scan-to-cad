  Compiling CUDA source file Source\CameraUtil.cu...
  Compiling CUDA source file Source\Scan2CAD\Scan2CAD.cu...
  Compiling CUDA source file Source\ScanCS.cu...
  Compiling CUDA source file Source\CUDABuildLinearSystem.cu...
  Compiling CUDA source file Source\CUDARayCastSDF.cu...
  Compiling CUDA source file Source\CUDAMarchingCubesSDF.cu...
  Compiling CUDA source file Source\CUDAImageHelper.cu...
  Compiling CUDA source file Source\CUDASceneRepHashSDF.cu...
  Compiling CUDA source file Source\CUDAHistogramHashSDF.cu...
  Compiling CUDA source file Source\CUDAConstant.cu...
  Compiling CUDA source file Source\CUDASceneRepChunkGrid.cu...
  Compiling CUDA source file Source\CUDAHoleFiller.cu...
  Compiling CUDA source file Source\CUDABuildLinearSystemRGBD.cu...
  
  
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CUDAImageHelper.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDAImageHelper.cu" 
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CUDAConstant.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDAConstant.cu" 
  
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\ScanCS.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\ScanCS.cu" 
  
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\Scan2CAD.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cu" 
  
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CUDAHoleFiller.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDAHoleFiller.cu" 
  
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CUDAMarchingCubesSDF.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDAMarchingCubesSDF.cu" 
  
  
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CUDABuildLinearSystem.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDABuildLinearSystem.cu" 
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CUDARayCastSDF.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDARayCastSDF.cu" 
  
  
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CUDAHistogramHashSDF.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDAHistogramHashSDF.cu" 
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CUDASceneRepChunkGrid.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDASceneRepChunkGrid.cu" 
  
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CUDASceneRepHashSDF.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDASceneRepHashSDF.cu" 
  
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CUDABuildLinearSystemRGBD.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDABuildLinearSystemRGBD.cu" 
  
  D:\github\realtime-scan-to-cad\DepthSensingCUDA>"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\bin\nvcc.exe" -gencode=arch=compute_86,code=\"sm_86,compute_86\" --use-local-env -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\bin\HostX64\x64" -x cu -rdc=true  -IInclude\cutil\inc -I"D:\github\realtime-scan-to-cad\DepthSensingCUDA" -ISource\DXUT\Optional -ISource\DXUT\Core -ISource\Scan2CAD\DirectXTK\Inc -ISource\Scan2CAD\FX11\inc -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include" -I"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include"     --keep-dir x64\Release -use_fast_math -maxrregcount=62  --machine 64 --compile -cudart static -allow-unsupported-compiler   -DWIN32 -DNDEBUG -D_WINDOWS -DD3DXFX_LARGEADDRESS_HANDLE -D_CRT_SECURE_NO_WARNINGS -DNOMINMAX -D_UNICODE -DUNICODE -Xcompiler "/EHsc /W3 /nologo /Ox /Fdx64\Release\vc143.pdb /FS   /MT " -o x64\Release\CameraUtil.cu.obj "D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CameraUtil.cu" 
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDASceneRepHashSDF.cu(170): warning : function "tex2D(texture<T, 2, cudaReadModeElementType>, float, float) [with T=float]"
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDABuildLinearSystemRGBD.cu(167): warning : initial value of reference to non-const must be an lvalue
  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include\texture_fetch_functions.h(198): here was declared deprecated
  
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDASceneRepHashSDF.cu(395): warning : function "tex2D(texture<T, 2, cudaReadModeElementType>, float, float) [with T=float4]"
  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include\texture_fetch_functions.h(198): here was declared deprecated
  
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDASceneRepHashSDF.cu(396): warning : function "tex2D(texture<T, 2, cudaReadModeElementType>, float, float) [with T=float4]"
  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include\texture_fetch_functions.h(198): here was declared deprecated
  
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDASceneRepHashSDF.cu(399): warning : function "tex2D(texture<T, 2, cudaReadModeElementType>, float, float) [with T=float4]"
  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include\texture_fetch_functions.h(198): here was declared deprecated
  
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDASceneRepHashSDF.cu(400): warning : function "tex2D(texture<T, 2, cudaReadModeElementType>, float, float) [with T=float4]"
  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include\texture_fetch_functions.h(198): here was declared deprecated
  
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDASceneRepHashSDF.cu(437): warning : function "tex2D(texture<T, 2, cudaReadModeElementType>, float, float) [with T=float]"
  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include\texture_fetch_functions.h(198): here was declared deprecated
  
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDASceneRepHashSDF.cu(440): warning : function "tex2D(texture<T, 2, cudaReadModeElementType>, float, float) [with T=float4]"
  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\include\texture_fetch_functions.h(198): here was declared deprecated
  
  
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  ScanCS.cu
  CUDAHoleFiller.cu
  CUDAConstant.cu
  CUDAImageHelper.cu
  CUDAHistogramHashSDF.cu
  Scan2CAD.cu
  CUDASceneRepChunkGrid.cu
  CUDABuildLinearSystem.cu
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDABuildLinearSystemRGBD.cu(167): warning : initial value of reference to non-const must be an lvalue
  
  CUDASceneRepHashSDF.cu
  CUDABuildLinearSystemRGBD.cu
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cu(127): warning C4305: “=”: 从“double”到“float”截断
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  CameraUtil.cu
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  CUDARayCastSDF.cu
  CUDAMarchingCubesSDF.cu
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
cl : 命令行 warning D9014: 值“2833”对于“/wd”无效；假定为“5999”
cl : 命令行 warning D9014: 值“2059”对于“/wd”无效；假定为“5999”
cl : 命令行 warning D9014: 值“2143”对于“/wd”无效；假定为“5999”
cl : 命令行 warning D9014: 值“2238”对于“/wd”无效；假定为“5999”
  stdafx.cpp
cl : 命令行 warning D9014: 值“2833”对于“/wd”无效；假定为“5999”
cl : 命令行 warning D9014: 值“2059”对于“/wd”无效；假定为“5999”
cl : 命令行 warning D9014: 值“2143”对于“/wd”无效；假定为“5999”
cl : 命令行 warning D9014: 值“2238”对于“/wd”无效；假定为“5999”
  BinaryDumpReader.cpp
  CUDABuildLinearSystem.cpp
  CUDABuildLinearSystemRGBD.cpp
  CUDACameraTrackingMultiRes.cpp
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  CUDACameraTrackingMultiResRGBD.cpp
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  CUDAHistogramHashSDF.cpp
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  CUDAHoleFiller.cpp
  CUDAImageHelper.cpp
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  CUDAMarchingCubesHashSDF.cpp
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
C:\Program Files\libtorch\include\c10\macros\Macros.h(142,20): warning C4067: 预处理器指令后有意外标记 - 应输入换行符
C:\Program Files\libtorch\include\c10\util\Exception.h(28,45): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 class“c10::Error”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(28): message : 参见“c10::Error”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(30,15): warning C4251: “c10::Error::msg_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(35,28): warning C4251: “c10::Error::context_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“c10::Error”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(40,15): warning C4251: “c10::Error::backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(47,15): warning C4251: “c10::Error::what_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(48,15): warning C4251: “c10::Error::what_without_backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(56,34): warning C4251: “c10::ThreadLocalDebugInfo::info_”: class“std::shared_ptr<c10::DebugInfoBase>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(47): message : 参见“std::shared_ptr<c10::DebugInfoBase>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(58,41): warning C4251: “c10::ThreadLocalDebugInfo::parent_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(82,41): warning C4251: “c10::DebugInfoGuard::prev_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::DebugInfoGuard”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\c10\core\Allocator.h(22,30): warning C4251: “c10::DataPtr::ptr_”: class“c10::detail::UniqueVoidPtr”需要有 dll 接口由 class“c10::DataPtr”的客户端使用
C:\Program Files\libtorch\include\c10\util\UniqueVoidPtr.h(38): message : 参见“c10::detail::UniqueVoidPtr”的声明
C:\Program Files\libtorch\include\c10\core\Allocator.h(186,53): warning C4251: “c10::InefficientStdFunctionContext::ptr_”: class“std::unique_ptr<void,std::function<void (void *)>>”需要有 dll 接口由 struct“c10::InefficientStdFunctionContext”的客户端使用
C:\Program Files\libtorch\include\c10\core\Allocator.h(186): message : 参见“std::unique_ptr<void,std::function<void (void *)>>”的声明
C:\Program Files\libtorch\include\c10\util\intrusive_ptr.h(82,31): warning C4251: “c10::intrusive_ptr_target::refcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\util\intrusive_ptr.h(83,31): warning C4251: “c10::intrusive_ptr_target::weakcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(61,18): warning C4251: “c10::impl::LocalDispatchKeySet::included_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(62,18): warning C4251: “c10::impl::LocalDispatchKeySet::excluded_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(99,18): warning C4251: “c10::impl::IncludeDispatchKeyGuard::include_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::IncludeDispatchKeyGuard”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(117,18): warning C4251: “c10::impl::ExcludeDispatchKeyGuard::exclude_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::ExcludeDispatchKeyGuard”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(188,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(191,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(194,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(197,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(201,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(204,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(207,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(210,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(216,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(219,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(222,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(225,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(229,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(232,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(235,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(238,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(192,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(195,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(198,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(201,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(205,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(208,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(211,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(214,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(220,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(223,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(226,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(229,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(233,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(236,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(239,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(242,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\core\Storage.h(166,35): warning C4251: “c10::Storage::storage_impl_”: class“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::Storage”的客户端使用
          with
          [
              TTarget=c10::StorageImpl
          ]
C:\Program Files\libtorch\include\c10\core\Storage.h(12): message : 参见“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::StorageImpl
          ]
C:\Program Files\libtorch\include\c10\util\typeid.h(65,67): warning C4251: “c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>::id_”: struct“c10::util::type_index”需要有 dll 接口由 class“c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>”的客户端使用
C:\Program Files\libtorch\include\c10\util\TypeIndex.h(57): message : 参见“c10::util::type_index”的声明
C:\Program Files\libtorch\include\c10\util\typeid.h(511,32): warning C4251: “caffe2::TypeMeta::nextTypeIndex”: struct“std::atomic<unsigned short>”需要有 dll 接口由 class“caffe2::TypeMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2750): message : 参见“std::atomic<unsigned short>”的声明
C:\Program Files\libtorch\include\c10\util\logging_is_not_google_glog.h(43,21): warning C4251: “c10::MessageLogger::stream_”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::MessageLogger”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(241): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(435,38): warning C4251: “c10::VariableVersion::version_counter_”: class“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::VariableVersion”的客户端使用
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(435): message : 参见“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2453,47): warning C4251: “c10::TensorImpl::autograd_meta_”: class“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(184): message : 参见“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2456,50): warning C4251: “c10::TensorImpl::named_tensor_meta_”: class“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(354): message : 参见“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2482,37): warning C4251: “c10::TensorImpl::pyobj_interpreter_”: struct“std::atomic<c10::impl::PyInterpreter *>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2482): message : 参见“std::atomic<c10::impl::PyInterpreter *>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2522,30): warning C4251: “c10::TensorImpl::device_opt_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2614,18): warning C4251: “c10::TensorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(82,14): warning C4251: “c10::GeneratorImpl::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(98,18): warning C4251: “c10::GeneratorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\ATen\core\Generator.h(133,42): warning C4251: “at::Generator::impl_”: class“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“at::Generator”的客户端使用
          with
          [
              TTarget=c10::GeneratorImpl
          ]
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(71): message : 参见“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::GeneratorImpl
          ]
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(34,15): warning C4251: “at::CPUGeneratorImpl::engine_”: class“at::mt19937_engine”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\core\MT19937RNGEngine.h(110): message : 参见“at::mt19937_engine”的声明
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(35,24): warning C4251: “at::CPUGeneratorImpl::next_float_normal_sample_”: class“c10::optional<float>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(25): message : 参见“c10::optional<float>”的声明
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(36,25): warning C4251: “at::CPUGeneratorImpl::next_double_normal_sample_”: class“c10::optional<double>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24,45): warning C4251: “at::DeprecatedTypePropertiesRegistry::registry”: class“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”需要有 dll 接口由 class“at::DeprecatedTypePropertiesRegistry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24): message : 参见“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”的声明
C:\Program Files\libtorch\include\ATen\Context.h(239,18): warning C4251: “at::Context::thc_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xcall_once.h(20): message : 参见“std::once_flag”的声明
C:\Program Files\libtorch\include\ATen\Context.h(240,18): warning C4251: “at::Context::thh_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xcall_once.h(20): message : 参见“std::once_flag”的声明
C:\Program Files\libtorch\include\ATen\Context.h(257,30): warning C4251: “at::Context::quantized_engine”: class“c10::optional<c10::QEngine>”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\libtorch\include\ATen\Context.h(257): message : 参见“c10::optional<c10::QEngine>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineDeviceGuard.h(427): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>>”的引用
C:\Program Files\libtorch\include\c10\core\DeviceGuard.h(178): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalDeviceGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(193,5): warning C4251: “c10::Scalar::v”: union“c10::Scalar::v_t”需要有 dll 接口由 class“c10::Scalar”的客户端使用
C:\Program Files\libtorch\include\c10\core\Scalar.h(188): message : 参见“c10::Scalar::v_t”的声明
C:\Program Files\libtorch\include\ATen\core\NamedTensor.h(69,24): warning C4251: “at::NamedTensorMeta::names_”: class“std::vector<at::Dimname,std::allocator<at::Dimname>>”需要有 dll 接口由 struct“at::NamedTensorMeta”的客户端使用
C:\Program Files\libtorch\include\ATen\core\NamedTensor.h(35): message : 参见“std::vector<at::Dimname,std::allocator<at::Dimname>>”的声明
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(785,55): warning C4251: “at::TensorBase::impl_”: class“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”需要有 dll 接口由 class“at::TensorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(94): message : 参见“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(933): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::TensorBase>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBody.h(502): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Tensor>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBody.h(576): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Generator>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\ATen\TensorGeometry.h(56,24): warning C4251: “at::TensorGeometry::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\ATen\TensorGeometry.h(57,24): warning C4251: “at::TensorGeometry::strides_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(81,15): warning C4251: “at::TensorMaker::sizes_”: class“c10::ArrayRef<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\util\ArrayRef.h(366): message : 参见“c10::ArrayRef<int64_t>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(82,25): warning C4251: “at::TensorMaker::strides_”: class“c10::optional<c10::IntArrayRef>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\std_ops.h(65): message : 参见“c10::optional<c10::IntArrayRef>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(83,21): warning C4251: “at::TensorMaker::storage_offset_”: class“c10::optional<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(84,30): warning C4251: “at::TensorMaker::deleter_”: class“std::function<void (void *)>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\core\Allocator.h(186): message : 参见“std::function<void (void *)>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(85,41): warning C4251: “at::TensorMaker::ctx_”: class“std::unique_ptr<void,c10::DeleterFnPtr>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\util\UniqueVoidPtr.h(42): message : 参见“std::unique_ptr<void,c10::DeleterFnPtr>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(86,20): warning C4251: “at::TensorMaker::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(125,16): warning C4251: “at::OperandInfo::stride_bytes”: class“c10::SmallVector<int64_t,6>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(110): message : 参见“c10::SmallVector<int64_t,6>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(133,25): warning C4251: “at::OperandInfo::device”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(190,31): warning C4251: “at::OperandInfo::tensor_base_”: class“c10::MaybeOwned<at::TensorBase>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(134): message : 参见“c10::MaybeOwned<at::TensorBase>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(191,31): warning C4251: “at::OperandInfo::original_tensor_base_”: class“c10::MaybeOwned<at::TensorBase>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(134): message : 参见“c10::MaybeOwned<at::TensorBase>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(504,13): warning C4251: “at::TensorIteratorBase::shape_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(514,13): warning C4251: “at::TensorIteratorBase::perm_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(527,13): warning C4251: “at::TensorIteratorBase::view_offsets_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(530,14): warning C4251: “at::TensorIteratorBase::names_”: class“c10::SmallVector<at::Dimname,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(27): message : 参见“c10::SmallVector<at::Dimname,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541,31): warning C4251: “at::TensorIteratorBase::operands_”: class“c10::SmallVector<at::OperandInfo,4>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541): message : 参见“c10::SmallVector<at::OperandInfo,4>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(238,20): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\TensorIterator.h(241,24): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\TensorIterator.h(762,47): warning C4251: “at::TensorIteratorConfig::tensors_”: class“c10::SmallVector<c10::MaybeOwned<at::TensorBase>,4>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(762): message : 参见“c10::SmallVector<c10::MaybeOwned<at::TensorBase>,4>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(766): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::DimVector>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(766,28): warning C4251: “at::TensorIteratorConfig::static_shape_”: class“c10::optional<at::DimVector>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(162): message : 参见“c10::optional<at::DimVector>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(767,29): warning C4251: “at::TensorIteratorConfig::static_dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(768,25): warning C4251: “at::TensorIteratorConfig::static_device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(804,50): warning C4251: “at::SplitUntil32Bit::iterator::vec”: class“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”需要有 dll 接口由 struct“at::SplitUntil32Bit::iterator”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(804): message : 参见“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(443): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::string>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(642,92): warning C4251: “std::enable_shared_from_this<c10::SharedType>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<c10::SharedType>”的客户端使用
          with
          [
              _Ty=c10::SharedType
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=c10::SharedType
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(691): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::QualifiedName>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(691,32): warning C4251: “c10::NamedType::name_”: class“c10::optional<c10::QualifiedName>”需要有 dll 接口由 struct“c10::NamedType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(674): message : 参见“c10::optional<c10::QualifiedName>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1064,11): warning C4251: “c10::IValue::payload”: union“c10::IValue::Payload”需要有 dll 接口由 struct“c10::IValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1026): message : 参见“c10::IValue::Payload”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1182,11): warning C4251: “c10::WeakIValue::payload”: union“c10::IValue::Payload::TriviallyCopyablePayload”需要有 dll 接口由 struct“c10::WeakIValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1032): message : 参见“c10::IValue::Payload::TriviallyCopyablePayload”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1195,48): warning C4251: “c10::StrongTypePtr::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1192): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1196,11): warning C4251: “c10::StrongTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1209,46): warning C4251: “c10::WeakTypePtr::cu_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::WeakTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1210,11): warning C4251: “c10::WeakTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::WeakTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1241): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::shared_ptr<torch::jit::CompilationUnit>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1242): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::weak_ptr<torch::jit::CompilationUnit>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1262,31): warning C4251: “c10::WeakOrStrongTypePtr::cu_”: struct“c10::WeakOrStrongCompilationUnit”需要有 dll 接口由 struct“c10::WeakOrStrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1214): message : 参见“c10::WeakOrStrongCompilationUnit”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1263,11): warning C4251: “c10::WeakOrStrongTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::WeakOrStrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(177,26): warning C4251: “c10::UnionType::types_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::UnionType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(234,11): warning C4251: “c10::OptionalType::contained_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::OptionalType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(285,25): warning C4251: “c10::Stride::stride_index_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(271): message : 参见“c10::optional<size_t>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(286,23): warning C4251: “c10::Stride::contiguous_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(287,25): warning C4251: “c10::Stride::stride_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(271): message : 参见“c10::optional<size_t>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(353,30): warning C4251: “c10::ShapeSymbol::num_symbols”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 struct“c10::ShapeSymbol”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(460): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(460,45): warning C4251: “c10::SymbolicShape::dims_”: class“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”需要有 dll 接口由 struct“c10::SymbolicShape”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(434): message : 参见“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(797,33): warning C4251: “c10::TensorType::scalar_type_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(798,29): warning C4251: “c10::TensorType::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(545): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>>”的引用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(800): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<c10::Stride>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(800,24): warning C4251: “c10::TensorType::strides_”: struct“c10::VaryingShape<c10::Stride>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(570): message : 参见“c10::VaryingShape<c10::Stride>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(801,23): warning C4251: “c10::TensorType::requires_grad_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(813,23): warning C4251: “c10::TensorType::undefined_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(545): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>>”的引用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(591): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<int64_t>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(704): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(821,62): warning C4251: “c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(944,24): warning C4251: “c10::DictType::types”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::DictType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(952,66): warning C4251: “c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(994,62): warning C4251: “c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1124,24): warning C4251: “c10::TupleType::elements_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1126,35): warning C4251: “c10::TupleType::schema_”: class“std::shared_ptr<c10::FunctionSchema>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1084): message : 参见“std::shared_ptr<c10::FunctionSchema>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1930,48): warning C4251: “c10::InterfaceType::methods_”: class“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”需要有 dll 接口由 struct“c10::InterfaceType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1930): message : 参见“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineStreamGuard.h(197): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>>”的引用
C:\Program Files\libtorch\include\c10\core\StreamGuard.h(139): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalStreamGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineStreamGuard.h(232): message : 查看对正在编译的 类 模板 实例化“c10::optional<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\core\StreamGuard.h(162): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineMultiStreamGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(230,21): warning C4251: “c10::ivalue::ConstantString::str_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::ConstantString”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(598,24): warning C4251: “c10::ivalue::Tuple::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Tuple”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(787,62): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“c10::ivalue::Future::FutureError”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(787): message : 参见“c10::ivalue::Future::FutureError”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(797,17): warning C4251: “c10::ivalue::Future::FutureError::error_msg”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::Future::FutureError”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1287,22): warning C4251: “c10::ivalue::Future::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1288,20): warning C4251: “c10::ivalue::Future::completed_”: struct“std::atomic<bool>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2744): message : 参见“std::atomic<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1289,27): warning C4251: “c10::ivalue::Future::finished_cv_”: class“std::condition_variable”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(570): message : 参见“std::condition_variable”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1292,11): warning C4251: “c10::ivalue::Future::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1293,45): warning C4251: “c10::ivalue::Future::callbacks_”: class“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1293): message : 参见“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1294,22): warning C4251: “c10::ivalue::Future::eptr_”: class“std::exception_ptr”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\exception(210): message : 参见“std::exception_ptr”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1298,37): warning C4251: “c10::ivalue::Future::impl_”: class“c10::impl::VirtualGuardImpl”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\c10\core\impl\VirtualGuardImpl.h(12): message : 参见“c10::impl::VirtualGuardImpl”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1303,25): warning C4251: “c10::ivalue::Future::currentDevice_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1309,27): warning C4251: “c10::ivalue::Future::events_”: class“std::vector<c10::Event,std::allocator<c10::Event>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1309): message : 参见“std::vector<c10::Event,std::allocator<c10::Event>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1313,28): warning C4251: “c10::ivalue::Future::storages_”: class“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(834): message : 参见“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1321,34): warning C4251: “c10::ivalue::Future::devices_”: class“std::vector<c10::Device,std::allocator<c10::Device>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(774): message : 参见“std::vector<c10::Device,std::allocator<c10::Device>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(834): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1452,23): warning C4251: “c10::ivalue::Object::slots_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ivalue::Object”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(106,54): warning C4251: “torch::autograd::ForwardADLevel::grads_”: class“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(106): message : 参见“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(107,16): warning C4251: “torch::autograd::ForwardADLevel::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(112,74): warning C4251: “std::enable_shared_from_this<torch::autograd::ForwardGrad>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::ForwardGrad>”的客户端使用
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(191,46): warning C4251: “torch::autograd::ForwardGrad::content_”: class“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(191): message : 参见“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(192,24): warning C4251: “torch::autograd::ForwardGrad::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\TensorNames.h(40,21): warning C4251: “at::namedinference::TensorName::origin_”: class“c10::ArrayRef<at::Dimname>”需要有 dll 接口由 struct“at::namedinference::TensorName”的客户端使用
C:\Program Files\libtorch\include\ATen\core\Dimname.h(36): message : 参见“c10::ArrayRef<at::Dimname>”的声明
C:\Program Files\libtorch\include\ATen\TensorNames.h(70,17): warning C4251: “at::namedinference::TensorNames::names_”: class“c10::SmallVector<at::namedinference::TensorName,10>”需要有 dll 接口由 struct“at::namedinference::TensorNames”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorNames.h(49): message : 参见“c10::SmallVector<at::namedinference::TensorName,10>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(191,15): warning C4251: “torch::autograd::AutogradMeta::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(194,25): warning C4251: “torch::autograd::AutogradMeta::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(195,23): warning C4251: “torch::autograd::AutogradMeta::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(206,32): warning C4251: “torch::autograd::AutogradMeta::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(208,49): warning C4251: “torch::autograd::AutogradMeta::hooks_”: class“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(175): message : 参见“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(209,31): warning C4251: “torch::autograd::AutogradMeta::cpp_hooks_list_”: class“std::shared_ptr<torch::autograd::hooks_list>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\cpp_hook.h(11): message : 参见“std::shared_ptr<torch::autograd::hooks_list>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(230,22): warning C4251: “torch::autograd::AutogradMeta::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(298,44): warning C4251: “torch::autograd::ViewInfo::view_fn_”: class“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”需要有 dll 接口由 struct“torch::autograd::ViewInfo”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(298): message : 参见“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::autograd::ViewInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525,27): warning C4251: “torch::autograd::DifferentiableViewMeta::backward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(526,27): warning C4251: “torch::autograd::DifferentiableViewMeta::forward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(162): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::IValue>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(26): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::AliasInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\ATen\core\boxing\KernelFunction.h(266,38): warning C4251: “c10::KernelFunction::functor_”: class“c10::intrusive_ptr<c10::OperatorKernel,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 class“c10::KernelFunction”的客户端使用
          with
          [
              TTarget=c10::OperatorKernel
          ]
C:\Program Files\libtorch\include\ATen\core\boxing\KernelFunction.h(266): message : 参见“c10::intrusive_ptr<c10::OperatorKernel,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::OperatorKernel
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\CppSignature.h(57,21): warning C4251: “c10::impl::CppSignature::signature_”: class“std::type_index”需要有 dll 接口由 class“c10::impl::CppSignature”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\typeindex(25): message : 参见“std::type_index”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434,62): warning C4251: “c10::RegisterOperators::Options::schemaOrName_”: class“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434): message : 参见“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(436,43): warning C4251: “c10::RegisterOperators::Options::kernels”: class“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(436): message : 参见“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(437,33): warning C4251: “c10::RegisterOperators::Options::aliasAnalysisKind_”: class“c10::optional<c10::AliasAnalysisKind>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function_schema.h(287): message : 参见“c10::optional<c10::AliasAnalysisKind>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588,39): warning C4251: “c10::RegisterOperators::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“c10::RegisterOperators”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
C:\Program Files\libtorch\include\torch\library.h(301,35): warning C4251: “torch::CppFunction::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::DispatchKey>”的声明
C:\Program Files\libtorch\include\torch\library.h(303,42): warning C4251: “torch::CppFunction::cpp_signature_”: class“c10::optional<c10::impl::CppSignature>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::impl::CppSignature>”的声明
C:\Program Files\libtorch\include\torch\library.h(304,40): warning C4251: “torch::CppFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(28): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\torch\library.h(305,15): warning C4251: “torch::CppFunction::debug_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\library.h(799,30): warning C4251: “torch::Library::ns_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\library.h(800,35): warning C4251: “torch::Library::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::DispatchKey>”的声明
C:\Program Files\libtorch\include\torch\library.h(804,44): warning C4251: “torch::Library::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(53,11): warning C4251: “c10::ClassAttribute::attributeType_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(54,15): warning C4251: “c10::ClassAttribute::attributeName_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(410,28): warning C4251: “c10::ClassType::constantNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(411,23): warning C4251: “c10::ClassType::constantValues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(413,34): warning C4251: “c10::ClassType::compilation_unit_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(416,31): warning C4251: “c10::ClassType::attributes_”: class“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(320): message : 参见“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(419,24): warning C4251: “c10::ClassType::attributeTypes_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(422,38): warning C4251: “c10::ClassType::methods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(423,38): warning C4251: “c10::ClassType::staticmethods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(426,38): warning C4251: “c10::ClassType::forward_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(427,38): warning C4251: “c10::ClassType::forward_pre_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(430,25): warning C4251: “c10::ClassType::properties_”: class“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(246): message : 参见“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(435,15): warning C4251: “c10::ClassType::doc_string_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(438,28): warning C4251: “c10::ClassType::unresolved_class_attributes_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\custom_class_detail.h(212,15): warning C4251: “torch::detail::class_base::qualClassName”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\custom_class_detail.h(213,20): warning C4251: “torch::detail::class_base::classTypePtr”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\Program Files\libtorch\include\ATen\core\custom_class.h(16): message : 参见“std::shared_ptr<c10::ClassType>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\DispatchKeyExtractor.h(206,22): warning C4251: “c10::DispatchKeyExtractor::dispatch_arg_indices_reverse_”: struct“c10::utils::bitset”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
C:\Program Files\libtorch\include\c10\util\Bitset.h(22): message : 参见“c10::utils::bitset”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\DispatchKeyExtractor.h(209,18): warning C4251: “c10::DispatchKeyExtractor::nonFallthroughKeys_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(211,16): warning C4251: “c10::impl::OperatorEntry::name_”: struct“c10::OperatorName”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ATenOpList.h(6): message : 参见“c10::OperatorName”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::AnnotatedSchema>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212,34): warning C4251: “c10::impl::OperatorEntry::schema_”: class“c10::optional<c10::impl::AnnotatedSchema>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212): message : 参见“c10::optional<c10::impl::AnnotatedSchema>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(255,24): warning C4251: “c10::impl::OperatorEntry::kernels_”: class“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(248): message : 参见“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271,40): warning C4251: “c10::impl::OperatorEntry::cpp_signature_”: class“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271): message : 参见“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的声明
C:\Program Files\libtorch\include\ATen\record_function.h(84,32): warning C4251: “at::StringView::owned_str_ptr_”: class“std::shared_ptr<std::string>”需要有 dll 接口由 struct“at::StringView”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(84): message : 参见“std::shared_ptr<std::string>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(327): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::OperatorName>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(356): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::RecordFunction::State>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(356,24): warning C4251: “at::RecordFunction::state_”: class“c10::optional<at::RecordFunction::State>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(356): message : 参见“c10::optional<at::RecordFunction::State>”的声明
C:\Program Files\libtorch\include\ATen\record_function.h(676,38): warning C4251: “at::RecordFunctionTLS::sorted_tls_callbacks_”: class“std::vector<at::ThreadLocalRecordFunctionCallbacksEntry,std::allocator<at::ThreadLocalRecordFunctionCallbacksEntry>>”需要有 dll 接口由 struct“at::RecordFunctionTLS”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(575): message : 参见“std::vector<at::ThreadLocalRecordFunctionCallbacksEntry,std::allocator<at::ThreadLocalRecordFunctionCallbacksEntry>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(285,26): warning C4251: “c10::Dispatcher::operators_”: class“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(285): message : 参见“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(287,63): warning C4251: “c10::Dispatcher::operatorLookupTable_”: class“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(287): message : 参见“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”的声明
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(292,48): warning C4251: “c10::Dispatcher::libraries_”: class“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string,std::string>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(292): message : 参见“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string,std::string>>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(296,53): warning C4251: “c10::Dispatcher::listeners_”: class“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(296): message : 参见“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(297,14): warning C4251: “c10::Dispatcher::mutex_”: class“std::mutex”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(391,48): warning C4251: “c10::OperatorHandle::operatorIterator_”: class“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”需要有 dll 接口由 class“c10::OperatorHandle”的客户端使用
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\list(787): message : 参见“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”的声明
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\samplers\distributed.h(101,23): warning C4251: “torch::data::samplers::DistributedRandomSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedRandomSampler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\samplers\distributed.h(134,23): warning C4251: “torch::data::samplers::DistributedSequentialSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedSequentialSampler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\imethod.h(44,36): warning C4251: “torch::IMethod::argumentNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::IMethod”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(128,52): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphAttr”的基
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(57): message : 参见“torch::jit::AttributeValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(128): message : 参见“torch::jit::GraphAttr”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(142,26): warning C4251: “torch::jit::GraphAttr::value_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphAttr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function.h(32): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(145,53): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphsAttr”的基
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(57): message : 参见“torch::jit::AttributeValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(145): message : 参见“torch::jit::GraphsAttr”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(160,13): warning C4251: “torch::jit::GraphsAttr::value_”: class“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”需要有 dll 接口由 struct“torch::jit::GraphsAttr”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(146): message : 参见“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(232,31): warning C4251: “torch::jit::SourceRange::source_view_”: class“std::shared_ptr<torch::jit::SourceView>”需要有 dll 接口由 struct“torch::jit::SourceRange”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(163): message : 参见“std::shared_ptr<torch::jit::SourceView>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(201): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<std::string,size_t,size_t>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(224): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::SourceRange>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(32,12): warning C4251: “torch::jit::Scope::parent_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Scope”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(27): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::InlinedCallStackPtr>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127,38): warning C4251: “torch::jit::InlinedCallStack::callee_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(137,15): warning C4251: “torch::jit::InlinedCallStack::fn_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(140): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ModuleInstanceInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(140,37): warning C4251: “torch::jit::InlinedCallStack::module_instance_info_”: class“c10::optional<torch::jit::ModuleInstanceInfo>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(123): message : 参见“c10::optional<torch::jit::ModuleInstanceInfo>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(21,75): warning C4275: 非 dll 接口 class“std::runtime_error”用作 dll 接口 struct“torch::jit::constant_not_supported_error”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\stdexcept(101): message : 参见“std::runtime_error”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(21): message : 参见“torch::jit::constant_not_supported_error”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(29): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ScopePtr>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\operator.h(183,45): warning C4251: “torch::jit::Operator::op_”: class“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”需要有 dll 接口由 struct“torch::jit::Operator”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\operator.h(183): message : 参见“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(94,11): warning C4251: “c10::EnumType::value_type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(95,30): warning C4251: “c10::EnumType::enum_names_values_”: class“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\enum_type.h(17): message : 参见“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(96,48): warning C4251: “c10::EnumType::cu_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(324,23): warning C4251: “torch::jit::Node::inputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(150): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(325,23): warning C4251: “torch::jit::Node::outputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(150): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(327,23): warning C4251: “torch::jit::Node::blocks_”: class“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(327): message : 参见“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(330,30): warning C4251: “torch::jit::Node::source_range_”: class“c10::optional<torch::jit::SourceRange>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(86): message : 参见“c10::optional<torch::jit::SourceRange>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(331,12): warning C4251: “torch::jit::Node::scope_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(27): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(332,38): warning C4251: “torch::jit::Node::callstack_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(340,31): warning C4251: “torch::jit::Node::wrap_”: class“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(340): message : 参见“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(346,30): warning C4251: “torch::jit::Node::historic_schema_name_”: class“c10::optional<std::string>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(947,22): warning C4251: “torch::jit::Node::values_”: class“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(947): message : 参见“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(1556,45): warning C4251: “torch::jit::ProfileIValueOp::callback_”: class“std::function<void (torch::jit::Stack &)>”需要有 dll 接口由 struct“torch::jit::ProfileIValueOp”的客户端使用
C:\Program Files\libtorch\include\ATen\core\stack.h(19): message : 参见“std::function<void (torch::jit::Stack &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(210,21): warning C4251: “torch::jit::ArgumentSpecCreator::instructions_”: class“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”需要有 dll 接口由 struct“torch::jit::ArgumentSpecCreator”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(210): message : 参见“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4267: “初始化”: 从“size_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4267: “初始化”: 从“size_t”转换到“const int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(255,33): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(281,37): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(460,39): warning C4267: “参数”: 从“size_t”转换到“const int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(39,46): warning C4251: “at::ThreadLocalState::debug_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(51,54): warning C4251: “at::ThreadLocalState::functorch_tls_”: class“std::shared_ptr<const at::functorch::FuncTorchTLSBase>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\ATen\FuncTorchTLS.h(41): message : 参见“std::shared_ptr<const at::functorch::FuncTorchTLSBase>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(56,44): warning C4251: “at::ThreadLocalState::python_mode_state_”: class“std::shared_ptr<c10::TorchDispatchTypeObject>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(269): message : 参见“std::shared_ptr<c10::TorchDispatchTypeObject>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(59,47): warning C4251: “at::ThreadLocalState::saved_tensors_default_hooks_”: class“std::stack<std::pair<PyObject *,PyObject *>,std::deque<std::pair<PyObject *,PyObject *>,std::allocator<std::pair<PyObject *,PyObject *>>>>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(59): message : 参见“std::stack<std::pair<PyObject *,PyObject *>,std::deque<std::pair<PyObject *,PyObject *>,std::allocator<std::pair<PyObject *,PyObject *>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(80,42): warning C4251: “torch::jit::Code::pImpl”: class“std::shared_ptr<torch::jit::interpreter::CodeImpl>”需要有 dll 接口由 struct“torch::jit::Code”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(80): message : 参见“std::shared_ptr<torch::jit::interpreter::CodeImpl>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(149): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::ThreadLocalState>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\graph_executor.h(87,42): warning C4251: “torch::jit::GraphExecutor::pImpl”: class“std::shared_ptr<torch::jit::GraphExecutorImplBase>”需要有 dll 接口由 struct“torch::jit::GraphExecutor”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\graph_executor.h(87): message : 参见“std::shared_ptr<torch::jit::GraphExecutorImplBase>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(127,22): warning C4251: “torch::jit::GraphFunction::name_”: struct“c10::QualifiedName”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\qualified_name.h(12): message : 参见“c10::QualifiedName”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(129,26): warning C4251: “torch::jit::GraphFunction::graph_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function.h(32): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\array(602): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::shared_ptr<torch::jit::Graph>>”的引用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(135): message : 查看对正在编译的 类 模板 实例化“std::array<c10::optional<std::shared_ptr<torch::jit::Graph>>,4>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(142,32): warning C4251: “torch::jit::GraphFunction::compile_mutex”: class“std::recursive_mutex”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(95): message : 参见“std::recursive_mutex”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\array(602): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::GraphExecutor>”的引用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(149): message : 查看对正在编译的 类 模板 实例化“std::array<c10::optional<torch::jit::GraphExecutor>,4>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(154,39): warning C4251: “torch::jit::GraphFunction::function_creator_”: class“std::function<void (torch::jit::GraphFunction &)>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(16): message : 参见“std::function<void (torch::jit::GraphFunction &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(159,43): warning C4251: “torch::jit::GraphFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(28): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\method.h(70,13): warning C4251: “torch::jit::Method::owner_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Method”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(672): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(46): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Method>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(185,21): warning C4251: “torch::jit::Object::_ivalue_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Object”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(672): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319,42): warning C4251: “torch::jit::CompilationUnit::functions_”: class“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319): message : 参见“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321,50): warning C4251: “torch::jit::CompilationUnit::dict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(322,50): warning C4251: “torch::jit::CompilationUnit::classDict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(329,34): warning C4251: “torch::jit::CompilationUnit::classes_”: class“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(329): message : 参见“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\module.h(295): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\input-archive.h(110,15): warning C4251: “torch::serialize::InputArchive::hierarchy_prefix_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::serialize::InputArchive”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\output-archive.h(76,41): warning C4251: “torch::serialize::OutputArchive::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 class“torch::serialize::OutputArchive”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1192): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(64,70): warning C4251: “std::enable_shared_from_this<torch::nn::Module>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::nn::Module>”的客户端使用
          with
          [
              _Ty=torch::nn::Module
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::nn::Module
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(544,36): warning C4251: “torch::nn::Module::parameters_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(212): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(592,36): warning C4251: “torch::nn::Module::buffers_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(212): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(595,53): warning C4251: “torch::nn::Module::children_”: class“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(248): message : 参见“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(598,33): warning C4251: “torch::nn::Module::name_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\util.h(60,15): warning C4251: “torch::profiler::impl::FileLineFunc::filename”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::profiler::impl::FileLineFunc”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\util.h(62,15): warning C4251: “torch::profiler::impl::FileLineFunc::funcname”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::profiler::impl::FileLineFunc”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(103,14): warning C4251: “torch::profiler::impl::ProfilerThreadLocalStateBase::state_mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::profiler::impl::ProfilerThreadLocalStateBase”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(261,37): warning C4251: “torch::autograd::profiler::LegacyEvent::shapes_”: class“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\WrapDimUtils.h(29): message : 参见“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(265,40): warning C4251: “torch::autograd::profiler::LegacyEvent::cuda_event”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(272,28): warning C4251: “torch::autograd::profiler::LegacyEvent::stack_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(276,48): warning C4251: “torch::autograd::profiler::LegacyEvent::extra_args_”: class“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function_schema.h(396): message : 参见“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(79,17): warning C4244: “初始化”: 从“double”转换到“int64_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(129,22): warning C4244: “=”: 从“double”转换到“int64_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(361,34): warning C4251: “torch::autograd::profiler::RecordProfile::file_”: class“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”需要有 dll 接口由 struct“torch::autograd::profiler::RecordProfile”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(361): message : 参见“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(400): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(400,65): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::cb_”: class“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(378): message : 参见“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(401,47): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::profilerDisableOptions_”: class“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(340): message : 参见“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247,52): warning C4251: “torch::autograd::profiler::KinetoEvent::shapes_”: class“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247): message : 参见“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(248,43): warning C4251: “torch::autograd::profiler::KinetoEvent::stack_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(249,43): warning C4251: “torch::autograd::profiler::KinetoEvent::module_hierarchy_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(250,43): warning C4251: “torch::autograd::profiler::KinetoEvent::dtypes_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(253,15): warning C4251: “torch::autograd::profiler::KinetoEvent::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(264,15): warning C4251: “torch::autograd::profiler::KinetoEvent::backend_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(266,40): warning C4251: “torch::autograd::profiler::KinetoEvent::cuda_event_start_”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(267,40): warning C4251: “torch::autograd::profiler::KinetoEvent::cuda_event_end_”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(293,28): warning C4251: “torch::autograd::profiler::ProfilerResult::events_”: class“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(277): message : 参见“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(294,55): warning C4251: “torch::autograd::profiler::ProfilerResult::trace_”: struct“torch::profiler::impl::kineto::ActivityTraceWrapper”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\kineto_shim.h(99): message : 参见“torch::profiler::impl::kineto::ActivityTraceWrapper”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(378,15): warning C4251: “torch::autograd::profiler::python_tracer::PyTraceEvent::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::python_tracer::PyTraceEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\batchnorm.h(24,3): warning C4251: “torch::nn::BatchNormOptions::momentum_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::BatchNormOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\batchnorm.h(81,3): warning C4251: “torch::nn::functional::BatchNormFuncOptions::momentum_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::BatchNormFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(29,3): warning C4251: “torch::nn::EmbeddingOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(31,3): warning C4251: “torch::nn::EmbeddingOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(52,3): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(54,3): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(78,3): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(80,3): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(109,3): warning C4251: “torch::nn::EmbeddingBagOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(117,3): warning C4251: “torch::nn::EmbeddingBagOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(132,3): warning C4251: “torch::nn::EmbeddingBagOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(143,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(151,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(163,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(182,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(190,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(206,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(44,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(44,48): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(127,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(127,48): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(27,3): warning C4251: “torch::nn::FoldOptions::output_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(30,3): warning C4251: “torch::nn::FoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(34,3): warning C4251: “torch::nn::FoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(38,3): warning C4251: “torch::nn::FoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(41,3): warning C4251: “torch::nn::FoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(72,3): warning C4251: “torch::nn::UnfoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(76,3): warning C4251: “torch::nn::UnfoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(80,3): warning C4251: “torch::nn::UnfoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(83,3): warning C4251: “torch::nn::UnfoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(223,3): warning C4251: “torch::nn::functional::SoftmaxFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftmaxFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(263,3): warning C4251: “torch::nn::functional::SoftminFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftminFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(303,3): warning C4251: “torch::nn::functional::LogSoftmaxFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::LogSoftmaxFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(65,3): warning C4251: “torch::nn::UnflattenOptions::dimname_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(67,3): warning C4251: “torch::nn::UnflattenOptions::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(69,3): warning C4251: “torch::nn::UnflattenOptions::namedshape_”: class“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(56): message : 参见“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(654,18): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(676,16): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(686,26): warning C4244: “=”: 从“T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(23,3): warning C4251: “torch::nn::L1LossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::L1LossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(55,3): warning C4251: “torch::nn::KLDivLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”需要有 dll 接口由 struct“torch::nn::KLDivLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(49): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(90,3): warning C4251: “torch::nn::MSELossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MSELossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(122,3): warning C4251: “torch::nn::BCELossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCELossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(154,3): warning C4251: “torch::nn::HingeEmbeddingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HingeEmbeddingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(195,3): warning C4251: “torch::nn::MultiMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(228,3): warning C4251: “torch::nn::CosineEmbeddingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CosineEmbeddingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(262,3): warning C4251: “torch::nn::MultiLabelMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(296,3): warning C4251: “torch::nn::SoftMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SoftMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(333,3): warning C4251: “torch::nn::MultiLabelSoftMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelSoftMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(372,3): warning C4251: “torch::nn::TripletMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404,3): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::distance_function_”: class“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404): message : 参见“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(417,3): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(448,3): warning C4251: “torch::nn::CTCLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CTCLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(486,3): warning C4251: “torch::nn::SmoothL1LossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SmoothL1LossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(522,3): warning C4251: “torch::nn::HuberLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HuberLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(562,3): warning C4251: “torch::nn::PoissonNLLLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::PoissonNLLLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(593,3): warning C4251: “torch::nn::MarginRankingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MarginRankingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(629,3): warning C4251: “torch::nn::NLLLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::NLLLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(664,3): warning C4251: “torch::nn::CrossEntropyLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CrossEntropyLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(697,3): warning C4251: “torch::nn::BCEWithLogitsLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCEWithLogitsLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(20,3): warning C4251: “torch::nn::LayerNormOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::LayerNormOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(43,3): warning C4251: “torch::nn::functional::LayerNormFuncOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::LayerNormFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(133,3): warning C4251: “torch::nn::functional::NormalizeFuncOptions::out_”: class“c10::optional<at::Tensor>”需要有 dll 接口由 struct“torch::nn::functional::NormalizeFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\_backward_ops.h(43): message : 参见“c10::optional<at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(25): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(65): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(105,3): warning C4251: “torch::nn::ZeroPad2dOptions::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ZeroPad2dOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(125): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(172,3): warning C4251: “torch::nn::functional::PadFuncOptions::pad_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(175,3): warning C4251: “torch::nn::functional::PadFuncOptions::mode_”: class“c10::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(163): message : 参见“c10::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\padding.h(14,36): warning C4267: “初始化”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\pooling.h(965,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\pooling.h(966,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(23,3): warning C4251: “torch::nn::UpsampleOptions::size_”: class“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(157): message : 参见“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<T,std::allocator<T>>>”的引用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26,3): warning C4251: “torch::nn::UpsampleOptions::scale_factor_”: class“c10::optional<std::vector<T,std::allocator<T>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 参见“c10::optional<std::vector<T,std::allocator<T>>>”的声明
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(36,3): warning C4251: “torch::nn::UpsampleOptions::mode_”: class“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(30): message : 参见“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(42,3): warning C4251: “torch::nn::UpsampleOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(65,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::size_”: class“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(157): message : 参见“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(68,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::scale_factor_”: class“c10::optional<std::vector<T,std::allocator<T>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 参见“c10::optional<std::vector<T,std::allocator<T>>>”的声明
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(72,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::mode_”: class“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea,torch::enumtype::kNearestExact>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(55): message : 参见“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea,torch::enumtype::kNearestExact>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(83,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(94,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::recompute_scale_factor_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(24,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::mode_”: class“c10::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(20): message : 参见“c10::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(26,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::padding_mode_”: class“c10::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(21): message : 参见“c10::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(28,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\functional.h(96,12): warning C4251: “torch::nn::FunctionalImpl::function_”: class“std::function<at::Tensor (at::Tensor)>”需要有 dll 接口由 class“torch::nn::FunctionalImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\transforms\tensor.h(39): message : 参见“std::function<at::Tensor (at::Tensor)>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\adaptive.h(26,3): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossOptions::cutoffs_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::AdaptiveLogSoftmaxWithLossOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(72,24): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::cutoffs”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(82,10): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::head”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(84,14): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::tail”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(178,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(178,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(211,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(211,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(247,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(247,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(334,90): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(334,90): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(370,90): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(370,90): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(406,90): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(406,90): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(46): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<1,torch::nn::ReflectionPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(72): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<2,torch::nn::ReflectionPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(99): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<3,torch::nn::ReflectionPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(147): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<1,torch::nn::ReplicationPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(173): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<2,torch::nn::ReplicationPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(199): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<3,torch::nn::ReplicationPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(285): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<1,torch::nn::ConstantPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(311): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<2,torch::nn::ConstantPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(337): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<3,torch::nn::ConstantPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>::options”: struct“torch::nn::AvgPoolOptions<1>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(43): message : 参见“torch::nn::AvgPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(46): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>::options”: struct“torch::nn::AvgPoolOptions<2>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(51): message : 参见“torch::nn::AvgPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(73): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>::options”: struct“torch::nn::AvgPoolOptions<3>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(59): message : 参见“torch::nn::AvgPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(100): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>::options”: struct“torch::nn::MaxPoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(133): message : 参见“torch::nn::MaxPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(147): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>::options”: struct“torch::nn::MaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(141): message : 参见“torch::nn::MaxPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(178): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>::options”: struct“torch::nn::MaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(149): message : 参见“torch::nn::MaxPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(209): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(236): message : 参见“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(248): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(202): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(265): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(210): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(298): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(218): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(331): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(359): message : 参见“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(371): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(271): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(388): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(279): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(417): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(287): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(446): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(355): message : 参见“torch::nn::MaxUnpoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(494): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(363): message : 参见“torch::nn::MaxUnpoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(524): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(371): message : 参见“torch::nn::MaxUnpoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(554): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(602,30): warning C4251: “torch::nn::FractionalMaxPool2dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool2dImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(453): message : 参见“torch::nn::FractionalMaxPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(646,30): warning C4251: “torch::nn::FractionalMaxPool3dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool3dImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(461): message : 参见“torch::nn::FractionalMaxPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(674,20): warning C4251: “torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>::options”: struct“torch::nn::LPPoolOptions<1>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(511): message : 参见“torch::nn::LPPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(691): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(674,20): warning C4251: “torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>::options”: struct“torch::nn::LPPoolOptions<2>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(519): message : 参见“torch::nn::LPPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(720): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(23,3): warning C4251: “torch::nn::detail::RNNOptionsBase::mode_”: class“c10::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”需要有 dll 接口由 struct“torch::nn::detail::RNNOptionsBase”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(15): message : 参见“c10::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(68,3): warning C4251: “torch::nn::RNNOptions::nonlinearity_”: class“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(54): message : 参见“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(183,3): warning C4251: “torch::nn::RNNCellOptions::nonlinearity_”: class“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNCellOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(54): message : 参见“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(86): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(103): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(148): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(155): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<at::Tensor,at::Tensor>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(201): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(870,10): warning C4251: “torch::nn::MultiheadAttentionImpl::out_proj”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::MultiheadAttentionImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\anomaly_mode.h(59,15): warning C4251: “torch::autograd::AnomalyMetadata::traceback_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\anomaly_mode.h(60,25): warning C4251: “torch::autograd::AnomalyMetadata::parent_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(71,32): warning C4251: “torch::autograd::SavedVariable::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(79,23): warning C4251: “torch::autograd::SavedVariable::weak_grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(93,39): warning C4251: “torch::autograd::SavedVariable::hooks_”: class“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(41): message : 参见“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(96,25): warning C4251: “torch::autograd::SavedVariable::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(97,23): warning C4251: “torch::autograd::SavedVariable::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(105,60): warning C4251: “std::enable_shared_from_this<torch::autograd::Node>::_Wptr”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::Node>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(530,14): warning C4251: “torch::autograd::Node::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(533,13): warning C4251: “torch::autograd::Node::next_edges_”: class“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(39): message : 参见“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(537,36): warning C4251: “torch::autograd::Node::anomaly_metadata_”: class“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(537): message : 参见“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(539,49): warning C4251: “torch::autograd::Node::pre_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(427): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(541,50): warning C4251: “torch::autograd::Node::post_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(403): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(543,37): warning C4251: “torch::autograd::Node::input_metadata_”: class“c10::SmallVector<torch::autograd::InputMetadata,2>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(543): message : 参见“c10::SmallVector<torch::autograd::InputMetadata,2>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(194,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(201,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(209,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(215,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(289,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(105,47): warning C4251: “torch::autograd::AutogradContext::saved_data”: class“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(105): message : 参见“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(129,39): warning C4251: “torch::autograd::AutogradContext::non_differentiable_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(17): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(130,39): warning C4251: “torch::autograd::AutogradContext::dirty_inputs_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(17): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(131,47): warning C4251: “torch::autograd::AutogradContext::saved_variables_”: class“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(40): message : 参见“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(132,17): warning C4251: “torch::autograd::AutogradContext::to_save_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(138,23): warning C4251: “torch::autograd::AutogradContext::grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(155,24): warning C4251: “torch::autograd::VariableInfo::size”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::autograd::VariableInfo”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(36,3): warning C4251: “torch::nn::TransformerEncoderLayerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerEncoderLayerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(65,3): warning C4251: “torch::nn::TransformerDecoderLayerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerDecoderLayerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(60,24): warning C4251: “torch::nn::TransformerEncoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(63,12): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(66,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(69,12): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(72,15): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(74,15): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(77,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(79,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(138,22): warning C4251: “torch::nn::TransformerDecoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(141,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(144,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(147,22): warning C4251: “torch::nn::TransformerDecoderLayerImpl::multihead_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(150,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(153,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(156,10): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(159,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(162,10): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(165,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout3”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(168,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm3”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(28,5): warning C4251: “torch::nn::TransformerEncoderOptions::encoder_layer_”: class“torch::nn::TransformerEncoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(88): message : 参见“torch::nn::TransformerEncoderLayer”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(34,5): warning C4251: “torch::nn::TransformerEncoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(57,3): warning C4251: “torch::nn::TransformerDecoderOptions::decoder_layer_”: class“torch::nn::TransformerDecoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(187): message : 参见“torch::nn::TransformerDecoderLayer”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(63,3): warning C4251: “torch::nn::TransformerDecoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(59,16): warning C4251: “torch::nn::TransformerEncoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(62,15): warning C4251: “torch::nn::TransformerEncoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(122,16): warning C4251: “torch::nn::TransformerDecoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(125,15): warning C4251: “torch::nn::TransformerDecoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(49,3): warning C4251: “torch::nn::TransformerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(52,3): warning C4251: “torch::nn::TransformerOptions::custom_encoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(55,3): warning C4251: “torch::nn::TransformerOptions::custom_decoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformer.h(126,15): warning C4251: “torch::nn::TransformerImpl::encoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformer.h(129,15): warning C4251: “torch::nn::TransformerImpl::decoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(85,23): warning C4251: “torch::optim::OptimizerParamGroup::params_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(87,37): warning C4251: “torch::optim::OptimizerParamGroup::options_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(52): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(155,37): warning C4251: “torch::optim::Optimizer::param_groups_”: class“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(97): message : 参见“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(157,74): warning C4251: “torch::optim::Optimizer::state_”: class“ska::flat_hash_map<std::string,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
          with
          [
              K=std::string,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(142): message : 参见“ska::flat_hash_map<std::string,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=std::string,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(159,38): warning C4251: “torch::optim::Optimizer::defaults_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(52): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(24,3): warning C4251: “torch::optim::AdamOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(23): message : 参见“std::tuple<double,double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adamw.h(24,3): warning C4251: “torch::optim::AdamWOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamWOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(23): message : 参见“std::tuple<double,double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(20,3): warning C4251: “torch::optim::LBFGSOptions::max_eval_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(24,3): warning C4251: “torch::optim::LBFGSOptions::line_search_fn_”: class“c10::optional<std::string>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43,3): warning C4251: “torch::optim::LBFGSParamState::old_dirs_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(44,3): warning C4251: “torch::optim::LBFGSParamState::old_stps_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(45,3): warning C4251: “torch::optim::LBFGSParamState::ro_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46,3): warning C4251: “torch::optim::LBFGSParamState::al_”: class“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46): message : 参见“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(77,26): warning C4251: “torch::optim::LBFGS::_numel_cache”: class“c10::optional<int64_t>”需要有 dll 接口由 class“torch::optim::LBFGS”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\custom_operator.h(23): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Operator>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121,35): warning C4251: “caffe2::serialize::PyTorchStreamReader::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(122,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(123,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(124,41): warning C4251: “caffe2::serialize::PyTorchStreamReader::in_”: class“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(100): message : 参见“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(126,14): warning C4251: “caffe2::serialize::PyTorchStreamReader::reader_lock_”: class“std::mutex”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(160,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::files_written_”: class“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\torch\custom_class.h(491): message : 参见“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(161,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(162,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(163,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(164,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::padding_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(165,17): warning C4251: “caffe2::serialize::PyTorchStreamWriter::file_stream_”: class“std::basic_ofstream<char,std::char_traits<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(244): message : 参见“std::basic_ofstream<char,std::char_traits<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(166,46): warning C4251: “caffe2::serialize::PyTorchStreamWriter::writer_func_”: class“std::function<size_t (const void *,size_t)>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\output-archive.h(65): message : 参见“std::function<size_t (const void *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(380,16): warning C4251: “torch::jit::SharedParserData::head”: class“std::unique_ptr<torch::jit::TokenTrie,std::default_delete<torch::jit::TokenTrie>>”需要有 dll 接口由 struct“torch::jit::SharedParserData”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(145): message : 参见“std::unique_ptr<torch::jit::TokenTrie,std::default_delete<torch::jit::TokenTrie>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(406,1): warning C4267: “参数”: 从“size_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(491,34): warning C4244: “参数”: 从“const int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(14,54): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“torch::jit::ErrorReport”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(14): message : 参见“torch::jit::ErrorReport”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(41,29): warning C4251: “torch::jit::ErrorReport::ss”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(241): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(42,20): warning C4251: “torch::jit::ErrorReport::context”: struct“torch::jit::OwnedSourceRange”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(241): message : 参见“torch::jit::OwnedSourceRange”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(43,23): warning C4251: “torch::jit::ErrorReport::the_message”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(44,21): warning C4251: “torch::jit::ErrorReport::error_stack”: class“std::vector<torch::jit::Call,std::allocator<torch::jit::Call>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(44): message : 参见“std::vector<torch::jit::Call,std::allocator<torch::jit::Call>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\schema_matching.h(29): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::NamedValue>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(29,57): warning C4251: “std::enable_shared_from_this<torch::jit::SugaredValue>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::jit::SugaredValue>”的客户端使用
          with
          [
              _Ty=torch::jit::SugaredValue
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::SugaredValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(222,29): warning C4251: “torch::jit::BuiltinFunction::self”: class“c10::optional<torch::jit::NamedValue>”需要有 dll 接口由 struct“torch::jit::BuiltinFunction”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\schema_matching.h(29): message : 参见“c10::optional<torch::jit::NamedValue>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(301,46): warning C4251: “torch::jit::SugaredTupleValue::tup_”: class“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”需要有 dll 接口由 struct“torch::jit::SugaredTupleValue”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(66): message : 参见“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(335,15): warning C4251: “torch::jit::BuiltinModule::name”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::BuiltinModule”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(338,26): warning C4251: “torch::jit::BuiltinModule::version”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::BuiltinModule”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(364,16): warning C4251: “torch::jit::ClassValue::type_”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 struct“torch::jit::ClassValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\custom_class.h(16): message : 参见“std::shared_ptr<c10::ClassType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(381,16): warning C4251: “torch::jit::NamedTupleConstructor::type_”: class“std::shared_ptr<c10::TupleType>”需要有 dll 接口由 struct“torch::jit::NamedTupleConstructor”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1036): message : 参见“std::shared_ptr<c10::TupleType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(542,11): warning C4251: “torch::jit::CastValue::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“torch::jit::CastValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(572,14): warning C4251: “torch::jit::TensorCastValue::self_”: struct“torch::jit::NamedValue”需要有 dll 接口由 struct“torch::jit::TensorCastValue”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\named_value.h(16): message : 参见“torch::jit::NamedValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(594,19): warning C4251: “torch::jit::MagicMethod::base_value_”: class“std::shared_ptr<torch::jit::SugaredValue>”需要有 dll 接口由 struct“torch::jit::MagicMethod”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(38): message : 参见“std::shared_ptr<torch::jit::SugaredValue>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(595,15): warning C4251: “torch::jit::MagicMethod::desugared_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::MagicMethod”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(656,26): warning C4251: “torch::jit::RangeValue::static_len_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::RangeValue”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(719,26): warning C4251: “torch::jit::IterableTree::unroll_length_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::IterableTree”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(720,32): warning C4251: “torch::jit::IterableTree::children_”: class“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”需要有 dll 接口由 struct“torch::jit::IterableTree”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(66): message : 参见“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(786,15): warning C4251: “torch::jit::ExceptionValue::message_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ExceptionValue”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(805,15): warning C4251: “torch::jit::SugaredEnumClass::enum_type_”: class“std::shared_ptr<c10::EnumType>”需要有 dll 接口由 struct“torch::jit::SugaredEnumClass”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1471): message : 参见“std::shared_ptr<c10::EnumType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\script_type_parser.h(48,15): warning C4251: “torch::jit::ScriptTypeParser::resolver_”: class“std::shared_ptr<torch::jit::Resolver>”需要有 dll 接口由 class“torch::jit::ScriptTypeParser”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(12): message : 参见“std::shared_ptr<torch::jit::Resolver>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(233,44): warning C4251: “torch::jit::Pickler::writer_”: class“std::function<void (const char *,size_t)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(124): message : 参见“std::function<void (const char *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(240,21): warning C4251: “torch::jit::Pickler::stack_”: class“std::vector<char,std::allocator<char>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize.h(77): message : 参见“std::vector<char,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252,45): warning C4251: “torch::jit::Pickler::memoized_ivalue_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(258,23): warning C4251: “torch::jit::Pickler::memoized_ivalues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(260,63): warning C4251: “torch::jit::Pickler::type_renamer_”: class“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(131): message : 参见“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(267,49): warning C4251: “torch::jit::Pickler::get_tensor_id_”: class“std::function<std::string (const at::Tensor &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(133): message : 参见“std::function<std::string (const at::Tensor &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(271,27): warning C4251: “torch::jit::Pickler::tensor_data_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(272,45): warning C4251: “torch::jit::Pickler::memoized_storage_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274,45): warning C4251: “torch::jit::Pickler::memoized_globals_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(275,45): warning C4251: “torch::jit::Pickler::memoized_strings_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(276,45): warning C4251: “torch::jit::Pickler::memoized_devices_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(138,40): warning C4251: “torch::jit::Unpickler::reader_”: class“std::function<size_t (char *,size_t)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(38): message : 参见“std::function<size_t (char *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(144,23): warning C4251: “torch::jit::Unpickler::stack_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(148,42): warning C4251: “torch::jit::Unpickler::globals_”: class“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(148): message : 参见“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(149,23): warning C4251: “torch::jit::Unpickler::memo_table_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(150,23): warning C4251: “torch::jit::Unpickler::marks_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(151,29): warning C4251: “torch::jit::Unpickler::tensor_table_”: class“c10::ArrayRef<at::Tensor>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\ATen\MethodOperators.h(34): message : 参见“c10::ArrayRef<at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(157,49): warning C4251: “torch::jit::Unpickler::type_cache_”: class“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\ATen\core\type_factory.h(50): message : 参见“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(160,16): warning C4251: “torch::jit::Unpickler::type_resolver_”: class“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(14): message : 参见“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(161,13): warning C4251: “torch::jit::Unpickler::obj_loader_”: class“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (c10::StrongTypePtr,c10::IValue)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(16): message : 参见“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (c10::StrongTypePtr,c10::IValue)>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(164,50): warning C4251: “torch::jit::Unpickler::read_record_”: class“std::function<c10::DataPtr (const std::string &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(56): message : 参见“std::function<c10::DataPtr (const std::string &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(165,29): warning C4251: “torch::jit::Unpickler::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(175,50): warning C4251: “torch::jit::Unpickler::storage_context_”: class“std::shared_ptr<torch::jit::DeserializationStorageContext>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(60): message : 参见“std::shared_ptr<torch::jit::DeserializationStorageContext>”的声明
C:\Program Files\libtorch\include\c10\util\SmallVector.h(104,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(102): message : 在编译 类 模板 成员函数“void c10::SmallVectorBase<unsigned int>::set_size(size_t)”时
C:\Program Files\libtorch\include\c10\util\SmallVector.h(481): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorBase<unsigned int>::set_size(size_t)”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(125): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorBase<unsigned int>”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(528): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorTemplateCommon<T,void>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(636): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorTemplateBase<T,true>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1281): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorImpl<T>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1769): message : 查看对正在编译的 类 模板 实例化“c10::SmallVector<int64_t,5>”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(69,26): warning C4267: “初始化”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(68): message : 在编译 类 模板 成员函数“c10::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”时
C:\Program Files\libtorch\include\c10\util\SmallVector.h(139): message : 查看对正在编译的函数 模板 实例化“c10::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”的引用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-mesh\meshData.cpp(480,9): error C2280: “ml::MeshData<float> &ml::MeshData<float>::operator =(const ml::MeshData<float> &)”: 尝试引用已删除的函数
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-mesh\meshData.h(740): message : 编译器已在此处生成“ml::MeshData<float>::operator =”
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-mesh\meshData.h(740,1): message : “ml::MeshData<float> &ml::MeshData<float>::operator =(const ml::MeshData<float> &)”: 由于“ml::MeshData<float>”具有用户定义的 移动构造函数，因此已隐式删除函数
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-mesh\meshData.cpp(475): message : 在编译 类 模板 成员函数“void ml::MeshData<float>::merge(const ml::MeshData<float> &)”时
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDAMarchingCubesHashSDF.cpp(81): message : 查看对正在编译的函数 模板 实例化“void ml::MeshData<float>::merge(const ml::MeshData<float> &)”的引用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\CUDAMarchingCubesHashSDF.h(55): message : 查看对正在编译的 类 模板 实例化“ml::MeshData<float>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(638,1): warning C4267: “参数”: 从“size_t”转换到“T”，可能丢失数据
          with
          [
              T=int32_t
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(349): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(349): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
  CUDARayCastSDF.cpp
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  CUDARGBDAdapter.cpp
  CUDARGBDSensor.cpp
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  CUDAScan.cpp
  CUDASceneRepChunkGrid.cpp
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
C:\Program Files\libtorch\include\c10\macros\Macros.h(142,20): warning C4067: 预处理器指令后有意外标记 - 应输入换行符
C:\Program Files\libtorch\include\c10\util\Exception.h(28,45): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 class“c10::Error”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(28): message : 参见“c10::Error”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(30,15): warning C4251: “c10::Error::msg_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(35,28): warning C4251: “c10::Error::context_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“c10::Error”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(40,15): warning C4251: “c10::Error::backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(47,15): warning C4251: “c10::Error::what_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(48,15): warning C4251: “c10::Error::what_without_backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(56,34): warning C4251: “c10::ThreadLocalDebugInfo::info_”: class“std::shared_ptr<c10::DebugInfoBase>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(47): message : 参见“std::shared_ptr<c10::DebugInfoBase>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(58,41): warning C4251: “c10::ThreadLocalDebugInfo::parent_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(82,41): warning C4251: “c10::DebugInfoGuard::prev_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::DebugInfoGuard”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\c10\core\Allocator.h(22,30): warning C4251: “c10::DataPtr::ptr_”: class“c10::detail::UniqueVoidPtr”需要有 dll 接口由 class“c10::DataPtr”的客户端使用
C:\Program Files\libtorch\include\c10\util\UniqueVoidPtr.h(38): message : 参见“c10::detail::UniqueVoidPtr”的声明
C:\Program Files\libtorch\include\c10\core\Allocator.h(186,53): warning C4251: “c10::InefficientStdFunctionContext::ptr_”: class“std::unique_ptr<void,std::function<void (void *)>>”需要有 dll 接口由 struct“c10::InefficientStdFunctionContext”的客户端使用
C:\Program Files\libtorch\include\c10\core\Allocator.h(186): message : 参见“std::unique_ptr<void,std::function<void (void *)>>”的声明
C:\Program Files\libtorch\include\c10\util\intrusive_ptr.h(82,31): warning C4251: “c10::intrusive_ptr_target::refcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\util\intrusive_ptr.h(83,31): warning C4251: “c10::intrusive_ptr_target::weakcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(61,18): warning C4251: “c10::impl::LocalDispatchKeySet::included_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(62,18): warning C4251: “c10::impl::LocalDispatchKeySet::excluded_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(99,18): warning C4251: “c10::impl::IncludeDispatchKeyGuard::include_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::IncludeDispatchKeyGuard”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(117,18): warning C4251: “c10::impl::ExcludeDispatchKeyGuard::exclude_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::ExcludeDispatchKeyGuard”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(188,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(191,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(194,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(197,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(201,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(204,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(207,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(210,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(216,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(219,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(222,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(225,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(229,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(232,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(235,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(238,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(192,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(195,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(198,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(201,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(205,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(208,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(211,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(214,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(220,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(223,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(226,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(229,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(233,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(236,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(239,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(242,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\core\Storage.h(166,35): warning C4251: “c10::Storage::storage_impl_”: class“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::Storage”的客户端使用
          with
          [
              TTarget=c10::StorageImpl
          ]
C:\Program Files\libtorch\include\c10\core\Storage.h(12): message : 参见“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::StorageImpl
          ]
C:\Program Files\libtorch\include\c10\util\typeid.h(65,67): warning C4251: “c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>::id_”: struct“c10::util::type_index”需要有 dll 接口由 class“c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>”的客户端使用
C:\Program Files\libtorch\include\c10\util\TypeIndex.h(57): message : 参见“c10::util::type_index”的声明
C:\Program Files\libtorch\include\c10\util\typeid.h(511,32): warning C4251: “caffe2::TypeMeta::nextTypeIndex”: struct“std::atomic<unsigned short>”需要有 dll 接口由 class“caffe2::TypeMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2750): message : 参见“std::atomic<unsigned short>”的声明
C:\Program Files\libtorch\include\c10\util\logging_is_not_google_glog.h(43,21): warning C4251: “c10::MessageLogger::stream_”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::MessageLogger”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(241): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(435,38): warning C4251: “c10::VariableVersion::version_counter_”: class“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::VariableVersion”的客户端使用
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(435): message : 参见“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2453,47): warning C4251: “c10::TensorImpl::autograd_meta_”: class“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(184): message : 参见“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2456,50): warning C4251: “c10::TensorImpl::named_tensor_meta_”: class“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(354): message : 参见“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2482,37): warning C4251: “c10::TensorImpl::pyobj_interpreter_”: struct“std::atomic<c10::impl::PyInterpreter *>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2482): message : 参见“std::atomic<c10::impl::PyInterpreter *>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2522,30): warning C4251: “c10::TensorImpl::device_opt_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2614,18): warning C4251: “c10::TensorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(82,14): warning C4251: “c10::GeneratorImpl::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(98,18): warning C4251: “c10::GeneratorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\ATen\core\Generator.h(133,42): warning C4251: “at::Generator::impl_”: class“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“at::Generator”的客户端使用
          with
          [
              TTarget=c10::GeneratorImpl
          ]
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(71): message : 参见“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::GeneratorImpl
          ]
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(34,15): warning C4251: “at::CPUGeneratorImpl::engine_”: class“at::mt19937_engine”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\core\MT19937RNGEngine.h(110): message : 参见“at::mt19937_engine”的声明
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(35,24): warning C4251: “at::CPUGeneratorImpl::next_float_normal_sample_”: class“c10::optional<float>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(25): message : 参见“c10::optional<float>”的声明
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(36,25): warning C4251: “at::CPUGeneratorImpl::next_double_normal_sample_”: class“c10::optional<double>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24,45): warning C4251: “at::DeprecatedTypePropertiesRegistry::registry”: class“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”需要有 dll 接口由 class“at::DeprecatedTypePropertiesRegistry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24): message : 参见“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”的声明
C:\Program Files\libtorch\include\ATen\Context.h(239,18): warning C4251: “at::Context::thc_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xcall_once.h(20): message : 参见“std::once_flag”的声明
C:\Program Files\libtorch\include\ATen\Context.h(240,18): warning C4251: “at::Context::thh_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xcall_once.h(20): message : 参见“std::once_flag”的声明
C:\Program Files\libtorch\include\ATen\Context.h(257,30): warning C4251: “at::Context::quantized_engine”: class“c10::optional<c10::QEngine>”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\libtorch\include\ATen\Context.h(257): message : 参见“c10::optional<c10::QEngine>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineDeviceGuard.h(427): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>>”的引用
C:\Program Files\libtorch\include\c10\core\DeviceGuard.h(178): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalDeviceGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(193,5): warning C4251: “c10::Scalar::v”: union“c10::Scalar::v_t”需要有 dll 接口由 class“c10::Scalar”的客户端使用
C:\Program Files\libtorch\include\c10\core\Scalar.h(188): message : 参见“c10::Scalar::v_t”的声明
C:\Program Files\libtorch\include\ATen\core\NamedTensor.h(69,24): warning C4251: “at::NamedTensorMeta::names_”: class“std::vector<at::Dimname,std::allocator<at::Dimname>>”需要有 dll 接口由 struct“at::NamedTensorMeta”的客户端使用
C:\Program Files\libtorch\include\ATen\core\NamedTensor.h(35): message : 参见“std::vector<at::Dimname,std::allocator<at::Dimname>>”的声明
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(785,55): warning C4251: “at::TensorBase::impl_”: class“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”需要有 dll 接口由 class“at::TensorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(94): message : 参见“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(933): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::TensorBase>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBody.h(502): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Tensor>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBody.h(576): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Generator>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\ATen\TensorGeometry.h(56,24): warning C4251: “at::TensorGeometry::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\ATen\TensorGeometry.h(57,24): warning C4251: “at::TensorGeometry::strides_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(81,15): warning C4251: “at::TensorMaker::sizes_”: class“c10::ArrayRef<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\util\ArrayRef.h(366): message : 参见“c10::ArrayRef<int64_t>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(82,25): warning C4251: “at::TensorMaker::strides_”: class“c10::optional<c10::IntArrayRef>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\std_ops.h(65): message : 参见“c10::optional<c10::IntArrayRef>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(83,21): warning C4251: “at::TensorMaker::storage_offset_”: class“c10::optional<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(84,30): warning C4251: “at::TensorMaker::deleter_”: class“std::function<void (void *)>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\core\Allocator.h(186): message : 参见“std::function<void (void *)>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(85,41): warning C4251: “at::TensorMaker::ctx_”: class“std::unique_ptr<void,c10::DeleterFnPtr>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\util\UniqueVoidPtr.h(42): message : 参见“std::unique_ptr<void,c10::DeleterFnPtr>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(86,20): warning C4251: “at::TensorMaker::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(125,16): warning C4251: “at::OperandInfo::stride_bytes”: class“c10::SmallVector<int64_t,6>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(110): message : 参见“c10::SmallVector<int64_t,6>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(133,25): warning C4251: “at::OperandInfo::device”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(190,31): warning C4251: “at::OperandInfo::tensor_base_”: class“c10::MaybeOwned<at::TensorBase>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(134): message : 参见“c10::MaybeOwned<at::TensorBase>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(191,31): warning C4251: “at::OperandInfo::original_tensor_base_”: class“c10::MaybeOwned<at::TensorBase>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(134): message : 参见“c10::MaybeOwned<at::TensorBase>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(504,13): warning C4251: “at::TensorIteratorBase::shape_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(514,13): warning C4251: “at::TensorIteratorBase::perm_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(527,13): warning C4251: “at::TensorIteratorBase::view_offsets_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(530,14): warning C4251: “at::TensorIteratorBase::names_”: class“c10::SmallVector<at::Dimname,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(27): message : 参见“c10::SmallVector<at::Dimname,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541,31): warning C4251: “at::TensorIteratorBase::operands_”: class“c10::SmallVector<at::OperandInfo,4>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541): message : 参见“c10::SmallVector<at::OperandInfo,4>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(238,20): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\TensorIterator.h(241,24): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\TensorIterator.h(762,47): warning C4251: “at::TensorIteratorConfig::tensors_”: class“c10::SmallVector<c10::MaybeOwned<at::TensorBase>,4>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(762): message : 参见“c10::SmallVector<c10::MaybeOwned<at::TensorBase>,4>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(766): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::DimVector>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(766,28): warning C4251: “at::TensorIteratorConfig::static_shape_”: class“c10::optional<at::DimVector>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(162): message : 参见“c10::optional<at::DimVector>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(767,29): warning C4251: “at::TensorIteratorConfig::static_dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(768,25): warning C4251: “at::TensorIteratorConfig::static_device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(804,50): warning C4251: “at::SplitUntil32Bit::iterator::vec”: class“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”需要有 dll 接口由 struct“at::SplitUntil32Bit::iterator”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(804): message : 参见“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(443): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::string>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(642,92): warning C4251: “std::enable_shared_from_this<c10::SharedType>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<c10::SharedType>”的客户端使用
          with
          [
              _Ty=c10::SharedType
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=c10::SharedType
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(691): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::QualifiedName>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(691,32): warning C4251: “c10::NamedType::name_”: class“c10::optional<c10::QualifiedName>”需要有 dll 接口由 struct“c10::NamedType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(674): message : 参见“c10::optional<c10::QualifiedName>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1064,11): warning C4251: “c10::IValue::payload”: union“c10::IValue::Payload”需要有 dll 接口由 struct“c10::IValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1026): message : 参见“c10::IValue::Payload”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1182,11): warning C4251: “c10::WeakIValue::payload”: union“c10::IValue::Payload::TriviallyCopyablePayload”需要有 dll 接口由 struct“c10::WeakIValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1032): message : 参见“c10::IValue::Payload::TriviallyCopyablePayload”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1195,48): warning C4251: “c10::StrongTypePtr::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1192): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1196,11): warning C4251: “c10::StrongTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1209,46): warning C4251: “c10::WeakTypePtr::cu_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::WeakTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1210,11): warning C4251: “c10::WeakTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::WeakTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1241): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::shared_ptr<torch::jit::CompilationUnit>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1242): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::weak_ptr<torch::jit::CompilationUnit>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1262,31): warning C4251: “c10::WeakOrStrongTypePtr::cu_”: struct“c10::WeakOrStrongCompilationUnit”需要有 dll 接口由 struct“c10::WeakOrStrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1214): message : 参见“c10::WeakOrStrongCompilationUnit”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1263,11): warning C4251: “c10::WeakOrStrongTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::WeakOrStrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(177,26): warning C4251: “c10::UnionType::types_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::UnionType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(234,11): warning C4251: “c10::OptionalType::contained_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::OptionalType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(285,25): warning C4251: “c10::Stride::stride_index_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(271): message : 参见“c10::optional<size_t>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(286,23): warning C4251: “c10::Stride::contiguous_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(287,25): warning C4251: “c10::Stride::stride_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(271): message : 参见“c10::optional<size_t>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(353,30): warning C4251: “c10::ShapeSymbol::num_symbols”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 struct“c10::ShapeSymbol”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(460): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(460,45): warning C4251: “c10::SymbolicShape::dims_”: class“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”需要有 dll 接口由 struct“c10::SymbolicShape”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(434): message : 参见“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(797,33): warning C4251: “c10::TensorType::scalar_type_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(798,29): warning C4251: “c10::TensorType::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(545): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>>”的引用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(800): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<c10::Stride>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(800,24): warning C4251: “c10::TensorType::strides_”: struct“c10::VaryingShape<c10::Stride>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(570): message : 参见“c10::VaryingShape<c10::Stride>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(801,23): warning C4251: “c10::TensorType::requires_grad_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(813,23): warning C4251: “c10::TensorType::undefined_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(545): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>>”的引用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(591): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<int64_t>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(704): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(821,62): warning C4251: “c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(944,24): warning C4251: “c10::DictType::types”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::DictType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(952,66): warning C4251: “c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(994,62): warning C4251: “c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1124,24): warning C4251: “c10::TupleType::elements_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1126,35): warning C4251: “c10::TupleType::schema_”: class“std::shared_ptr<c10::FunctionSchema>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1084): message : 参见“std::shared_ptr<c10::FunctionSchema>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1930,48): warning C4251: “c10::InterfaceType::methods_”: class“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”需要有 dll 接口由 struct“c10::InterfaceType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1930): message : 参见“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineStreamGuard.h(197): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>>”的引用
C:\Program Files\libtorch\include\c10\core\StreamGuard.h(139): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalStreamGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineStreamGuard.h(232): message : 查看对正在编译的 类 模板 实例化“c10::optional<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\core\StreamGuard.h(162): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineMultiStreamGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(230,21): warning C4251: “c10::ivalue::ConstantString::str_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::ConstantString”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(598,24): warning C4251: “c10::ivalue::Tuple::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Tuple”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(787,62): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“c10::ivalue::Future::FutureError”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(787): message : 参见“c10::ivalue::Future::FutureError”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(797,17): warning C4251: “c10::ivalue::Future::FutureError::error_msg”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::Future::FutureError”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1287,22): warning C4251: “c10::ivalue::Future::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1288,20): warning C4251: “c10::ivalue::Future::completed_”: struct“std::atomic<bool>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2744): message : 参见“std::atomic<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1289,27): warning C4251: “c10::ivalue::Future::finished_cv_”: class“std::condition_variable”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(570): message : 参见“std::condition_variable”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1292,11): warning C4251: “c10::ivalue::Future::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1293,45): warning C4251: “c10::ivalue::Future::callbacks_”: class“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1293): message : 参见“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1294,22): warning C4251: “c10::ivalue::Future::eptr_”: class“std::exception_ptr”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\exception(210): message : 参见“std::exception_ptr”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1298,37): warning C4251: “c10::ivalue::Future::impl_”: class“c10::impl::VirtualGuardImpl”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\c10\core\impl\VirtualGuardImpl.h(12): message : 参见“c10::impl::VirtualGuardImpl”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1303,25): warning C4251: “c10::ivalue::Future::currentDevice_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1309,27): warning C4251: “c10::ivalue::Future::events_”: class“std::vector<c10::Event,std::allocator<c10::Event>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1309): message : 参见“std::vector<c10::Event,std::allocator<c10::Event>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1313,28): warning C4251: “c10::ivalue::Future::storages_”: class“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(834): message : 参见“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1321,34): warning C4251: “c10::ivalue::Future::devices_”: class“std::vector<c10::Device,std::allocator<c10::Device>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(774): message : 参见“std::vector<c10::Device,std::allocator<c10::Device>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(834): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1452,23): warning C4251: “c10::ivalue::Object::slots_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ivalue::Object”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(106,54): warning C4251: “torch::autograd::ForwardADLevel::grads_”: class“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(106): message : 参见“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(107,16): warning C4251: “torch::autograd::ForwardADLevel::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(112,74): warning C4251: “std::enable_shared_from_this<torch::autograd::ForwardGrad>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::ForwardGrad>”的客户端使用
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(191,46): warning C4251: “torch::autograd::ForwardGrad::content_”: class“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(191): message : 参见“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(192,24): warning C4251: “torch::autograd::ForwardGrad::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\TensorNames.h(40,21): warning C4251: “at::namedinference::TensorName::origin_”: class“c10::ArrayRef<at::Dimname>”需要有 dll 接口由 struct“at::namedinference::TensorName”的客户端使用
C:\Program Files\libtorch\include\ATen\core\Dimname.h(36): message : 参见“c10::ArrayRef<at::Dimname>”的声明
C:\Program Files\libtorch\include\ATen\TensorNames.h(70,17): warning C4251: “at::namedinference::TensorNames::names_”: class“c10::SmallVector<at::namedinference::TensorName,10>”需要有 dll 接口由 struct“at::namedinference::TensorNames”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorNames.h(49): message : 参见“c10::SmallVector<at::namedinference::TensorName,10>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(191,15): warning C4251: “torch::autograd::AutogradMeta::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(194,25): warning C4251: “torch::autograd::AutogradMeta::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(195,23): warning C4251: “torch::autograd::AutogradMeta::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(206,32): warning C4251: “torch::autograd::AutogradMeta::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(208,49): warning C4251: “torch::autograd::AutogradMeta::hooks_”: class“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(175): message : 参见“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(209,31): warning C4251: “torch::autograd::AutogradMeta::cpp_hooks_list_”: class“std::shared_ptr<torch::autograd::hooks_list>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\cpp_hook.h(11): message : 参见“std::shared_ptr<torch::autograd::hooks_list>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(230,22): warning C4251: “torch::autograd::AutogradMeta::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(298,44): warning C4251: “torch::autograd::ViewInfo::view_fn_”: class“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”需要有 dll 接口由 struct“torch::autograd::ViewInfo”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(298): message : 参见“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::autograd::ViewInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525,27): warning C4251: “torch::autograd::DifferentiableViewMeta::backward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(526,27): warning C4251: “torch::autograd::DifferentiableViewMeta::forward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(162): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::IValue>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(26): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::AliasInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\ATen\core\boxing\KernelFunction.h(266,38): warning C4251: “c10::KernelFunction::functor_”: class“c10::intrusive_ptr<c10::OperatorKernel,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 class“c10::KernelFunction”的客户端使用
          with
          [
              TTarget=c10::OperatorKernel
          ]
C:\Program Files\libtorch\include\ATen\core\boxing\KernelFunction.h(266): message : 参见“c10::intrusive_ptr<c10::OperatorKernel,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::OperatorKernel
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\CppSignature.h(57,21): warning C4251: “c10::impl::CppSignature::signature_”: class“std::type_index”需要有 dll 接口由 class“c10::impl::CppSignature”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\typeindex(25): message : 参见“std::type_index”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434,62): warning C4251: “c10::RegisterOperators::Options::schemaOrName_”: class“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434): message : 参见“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(436,43): warning C4251: “c10::RegisterOperators::Options::kernels”: class“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(436): message : 参见“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(437,33): warning C4251: “c10::RegisterOperators::Options::aliasAnalysisKind_”: class“c10::optional<c10::AliasAnalysisKind>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function_schema.h(287): message : 参见“c10::optional<c10::AliasAnalysisKind>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588,39): warning C4251: “c10::RegisterOperators::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“c10::RegisterOperators”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
C:\Program Files\libtorch\include\torch\library.h(301,35): warning C4251: “torch::CppFunction::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::DispatchKey>”的声明
C:\Program Files\libtorch\include\torch\library.h(303,42): warning C4251: “torch::CppFunction::cpp_signature_”: class“c10::optional<c10::impl::CppSignature>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::impl::CppSignature>”的声明
C:\Program Files\libtorch\include\torch\library.h(304,40): warning C4251: “torch::CppFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(28): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\torch\library.h(305,15): warning C4251: “torch::CppFunction::debug_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\library.h(799,30): warning C4251: “torch::Library::ns_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\library.h(800,35): warning C4251: “torch::Library::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::DispatchKey>”的声明
C:\Program Files\libtorch\include\torch\library.h(804,44): warning C4251: “torch::Library::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(53,11): warning C4251: “c10::ClassAttribute::attributeType_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(54,15): warning C4251: “c10::ClassAttribute::attributeName_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(410,28): warning C4251: “c10::ClassType::constantNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(411,23): warning C4251: “c10::ClassType::constantValues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(413,34): warning C4251: “c10::ClassType::compilation_unit_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(416,31): warning C4251: “c10::ClassType::attributes_”: class“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(320): message : 参见“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(419,24): warning C4251: “c10::ClassType::attributeTypes_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(422,38): warning C4251: “c10::ClassType::methods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(423,38): warning C4251: “c10::ClassType::staticmethods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(426,38): warning C4251: “c10::ClassType::forward_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(427,38): warning C4251: “c10::ClassType::forward_pre_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(430,25): warning C4251: “c10::ClassType::properties_”: class“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(246): message : 参见“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(435,15): warning C4251: “c10::ClassType::doc_string_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(438,28): warning C4251: “c10::ClassType::unresolved_class_attributes_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\custom_class_detail.h(212,15): warning C4251: “torch::detail::class_base::qualClassName”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\custom_class_detail.h(213,20): warning C4251: “torch::detail::class_base::classTypePtr”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\Program Files\libtorch\include\ATen\core\custom_class.h(16): message : 参见“std::shared_ptr<c10::ClassType>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\DispatchKeyExtractor.h(206,22): warning C4251: “c10::DispatchKeyExtractor::dispatch_arg_indices_reverse_”: struct“c10::utils::bitset”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
C:\Program Files\libtorch\include\c10\util\Bitset.h(22): message : 参见“c10::utils::bitset”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\DispatchKeyExtractor.h(209,18): warning C4251: “c10::DispatchKeyExtractor::nonFallthroughKeys_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(211,16): warning C4251: “c10::impl::OperatorEntry::name_”: struct“c10::OperatorName”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ATenOpList.h(6): message : 参见“c10::OperatorName”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::AnnotatedSchema>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212,34): warning C4251: “c10::impl::OperatorEntry::schema_”: class“c10::optional<c10::impl::AnnotatedSchema>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212): message : 参见“c10::optional<c10::impl::AnnotatedSchema>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(255,24): warning C4251: “c10::impl::OperatorEntry::kernels_”: class“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(248): message : 参见“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271,40): warning C4251: “c10::impl::OperatorEntry::cpp_signature_”: class“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271): message : 参见“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的声明
C:\Program Files\libtorch\include\ATen\record_function.h(84,32): warning C4251: “at::StringView::owned_str_ptr_”: class“std::shared_ptr<std::string>”需要有 dll 接口由 struct“at::StringView”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(84): message : 参见“std::shared_ptr<std::string>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(327): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::OperatorName>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(356): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::RecordFunction::State>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(356,24): warning C4251: “at::RecordFunction::state_”: class“c10::optional<at::RecordFunction::State>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(356): message : 参见“c10::optional<at::RecordFunction::State>”的声明
C:\Program Files\libtorch\include\ATen\record_function.h(676,38): warning C4251: “at::RecordFunctionTLS::sorted_tls_callbacks_”: class“std::vector<at::ThreadLocalRecordFunctionCallbacksEntry,std::allocator<at::ThreadLocalRecordFunctionCallbacksEntry>>”需要有 dll 接口由 struct“at::RecordFunctionTLS”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(575): message : 参见“std::vector<at::ThreadLocalRecordFunctionCallbacksEntry,std::allocator<at::ThreadLocalRecordFunctionCallbacksEntry>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(285,26): warning C4251: “c10::Dispatcher::operators_”: class“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(285): message : 参见“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(287,63): warning C4251: “c10::Dispatcher::operatorLookupTable_”: class“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(287): message : 参见“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”的声明
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(292,48): warning C4251: “c10::Dispatcher::libraries_”: class“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string,std::string>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(292): message : 参见“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string,std::string>>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(296,53): warning C4251: “c10::Dispatcher::listeners_”: class“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(296): message : 参见“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(297,14): warning C4251: “c10::Dispatcher::mutex_”: class“std::mutex”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(391,48): warning C4251: “c10::OperatorHandle::operatorIterator_”: class“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”需要有 dll 接口由 class“c10::OperatorHandle”的客户端使用
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\list(787): message : 参见“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”的声明
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\samplers\distributed.h(101,23): warning C4251: “torch::data::samplers::DistributedRandomSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedRandomSampler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\samplers\distributed.h(134,23): warning C4251: “torch::data::samplers::DistributedSequentialSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedSequentialSampler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\imethod.h(44,36): warning C4251: “torch::IMethod::argumentNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::IMethod”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(128,52): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphAttr”的基
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(57): message : 参见“torch::jit::AttributeValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(128): message : 参见“torch::jit::GraphAttr”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(142,26): warning C4251: “torch::jit::GraphAttr::value_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphAttr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function.h(32): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(145,53): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphsAttr”的基
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(57): message : 参见“torch::jit::AttributeValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(145): message : 参见“torch::jit::GraphsAttr”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(160,13): warning C4251: “torch::jit::GraphsAttr::value_”: class“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”需要有 dll 接口由 struct“torch::jit::GraphsAttr”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(146): message : 参见“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(232,31): warning C4251: “torch::jit::SourceRange::source_view_”: class“std::shared_ptr<torch::jit::SourceView>”需要有 dll 接口由 struct“torch::jit::SourceRange”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(163): message : 参见“std::shared_ptr<torch::jit::SourceView>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(201): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<std::string,size_t,size_t>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(224): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::SourceRange>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(32,12): warning C4251: “torch::jit::Scope::parent_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Scope”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(27): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::InlinedCallStackPtr>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127,38): warning C4251: “torch::jit::InlinedCallStack::callee_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(137,15): warning C4251: “torch::jit::InlinedCallStack::fn_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(140): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ModuleInstanceInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(140,37): warning C4251: “torch::jit::InlinedCallStack::module_instance_info_”: class“c10::optional<torch::jit::ModuleInstanceInfo>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(123): message : 参见“c10::optional<torch::jit::ModuleInstanceInfo>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(21,75): warning C4275: 非 dll 接口 class“std::runtime_error”用作 dll 接口 struct“torch::jit::constant_not_supported_error”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\stdexcept(101): message : 参见“std::runtime_error”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(21): message : 参见“torch::jit::constant_not_supported_error”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(29): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ScopePtr>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\operator.h(183,45): warning C4251: “torch::jit::Operator::op_”: class“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”需要有 dll 接口由 struct“torch::jit::Operator”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\operator.h(183): message : 参见“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(94,11): warning C4251: “c10::EnumType::value_type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(95,30): warning C4251: “c10::EnumType::enum_names_values_”: class“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\enum_type.h(17): message : 参见“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(96,48): warning C4251: “c10::EnumType::cu_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(324,23): warning C4251: “torch::jit::Node::inputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(150): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(325,23): warning C4251: “torch::jit::Node::outputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(150): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(327,23): warning C4251: “torch::jit::Node::blocks_”: class“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(327): message : 参见“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(330,30): warning C4251: “torch::jit::Node::source_range_”: class“c10::optional<torch::jit::SourceRange>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(86): message : 参见“c10::optional<torch::jit::SourceRange>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(331,12): warning C4251: “torch::jit::Node::scope_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(27): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(332,38): warning C4251: “torch::jit::Node::callstack_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(340,31): warning C4251: “torch::jit::Node::wrap_”: class“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(340): message : 参见“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(346,30): warning C4251: “torch::jit::Node::historic_schema_name_”: class“c10::optional<std::string>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(947,22): warning C4251: “torch::jit::Node::values_”: class“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(947): message : 参见“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(1556,45): warning C4251: “torch::jit::ProfileIValueOp::callback_”: class“std::function<void (torch::jit::Stack &)>”需要有 dll 接口由 struct“torch::jit::ProfileIValueOp”的客户端使用
C:\Program Files\libtorch\include\ATen\core\stack.h(19): message : 参见“std::function<void (torch::jit::Stack &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(210,21): warning C4251: “torch::jit::ArgumentSpecCreator::instructions_”: class“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”需要有 dll 接口由 struct“torch::jit::ArgumentSpecCreator”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(210): message : 参见“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4267: “初始化”: 从“size_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4267: “初始化”: 从“size_t”转换到“const int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(255,33): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(281,37): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(460,39): warning C4267: “参数”: 从“size_t”转换到“const int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(39,46): warning C4251: “at::ThreadLocalState::debug_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(51,54): warning C4251: “at::ThreadLocalState::functorch_tls_”: class“std::shared_ptr<const at::functorch::FuncTorchTLSBase>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\ATen\FuncTorchTLS.h(41): message : 参见“std::shared_ptr<const at::functorch::FuncTorchTLSBase>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(56,44): warning C4251: “at::ThreadLocalState::python_mode_state_”: class“std::shared_ptr<c10::TorchDispatchTypeObject>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(269): message : 参见“std::shared_ptr<c10::TorchDispatchTypeObject>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(59,47): warning C4251: “at::ThreadLocalState::saved_tensors_default_hooks_”: class“std::stack<std::pair<PyObject *,PyObject *>,std::deque<std::pair<PyObject *,PyObject *>,std::allocator<std::pair<PyObject *,PyObject *>>>>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(59): message : 参见“std::stack<std::pair<PyObject *,PyObject *>,std::deque<std::pair<PyObject *,PyObject *>,std::allocator<std::pair<PyObject *,PyObject *>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(80,42): warning C4251: “torch::jit::Code::pImpl”: class“std::shared_ptr<torch::jit::interpreter::CodeImpl>”需要有 dll 接口由 struct“torch::jit::Code”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(80): message : 参见“std::shared_ptr<torch::jit::interpreter::CodeImpl>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(149): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::ThreadLocalState>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\graph_executor.h(87,42): warning C4251: “torch::jit::GraphExecutor::pImpl”: class“std::shared_ptr<torch::jit::GraphExecutorImplBase>”需要有 dll 接口由 struct“torch::jit::GraphExecutor”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\graph_executor.h(87): message : 参见“std::shared_ptr<torch::jit::GraphExecutorImplBase>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(127,22): warning C4251: “torch::jit::GraphFunction::name_”: struct“c10::QualifiedName”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\qualified_name.h(12): message : 参见“c10::QualifiedName”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(129,26): warning C4251: “torch::jit::GraphFunction::graph_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function.h(32): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\array(602): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::shared_ptr<torch::jit::Graph>>”的引用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(135): message : 查看对正在编译的 类 模板 实例化“std::array<c10::optional<std::shared_ptr<torch::jit::Graph>>,4>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(142,32): warning C4251: “torch::jit::GraphFunction::compile_mutex”: class“std::recursive_mutex”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(95): message : 参见“std::recursive_mutex”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\array(602): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::GraphExecutor>”的引用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(149): message : 查看对正在编译的 类 模板 实例化“std::array<c10::optional<torch::jit::GraphExecutor>,4>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(154,39): warning C4251: “torch::jit::GraphFunction::function_creator_”: class“std::function<void (torch::jit::GraphFunction &)>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(16): message : 参见“std::function<void (torch::jit::GraphFunction &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(159,43): warning C4251: “torch::jit::GraphFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(28): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\method.h(70,13): warning C4251: “torch::jit::Method::owner_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Method”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(672): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(46): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Method>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(185,21): warning C4251: “torch::jit::Object::_ivalue_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Object”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(672): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319,42): warning C4251: “torch::jit::CompilationUnit::functions_”: class“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319): message : 参见“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321,50): warning C4251: “torch::jit::CompilationUnit::dict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(322,50): warning C4251: “torch::jit::CompilationUnit::classDict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(329,34): warning C4251: “torch::jit::CompilationUnit::classes_”: class“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(329): message : 参见“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\module.h(295): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\input-archive.h(110,15): warning C4251: “torch::serialize::InputArchive::hierarchy_prefix_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::serialize::InputArchive”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\output-archive.h(76,41): warning C4251: “torch::serialize::OutputArchive::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 class“torch::serialize::OutputArchive”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1192): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(64,70): warning C4251: “std::enable_shared_from_this<torch::nn::Module>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::nn::Module>”的客户端使用
          with
          [
              _Ty=torch::nn::Module
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::nn::Module
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(544,36): warning C4251: “torch::nn::Module::parameters_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(212): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(592,36): warning C4251: “torch::nn::Module::buffers_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(212): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(595,53): warning C4251: “torch::nn::Module::children_”: class“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(248): message : 参见“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(598,33): warning C4251: “torch::nn::Module::name_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\util.h(60,15): warning C4251: “torch::profiler::impl::FileLineFunc::filename”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::profiler::impl::FileLineFunc”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\util.h(62,15): warning C4251: “torch::profiler::impl::FileLineFunc::funcname”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::profiler::impl::FileLineFunc”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(103,14): warning C4251: “torch::profiler::impl::ProfilerThreadLocalStateBase::state_mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::profiler::impl::ProfilerThreadLocalStateBase”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(261,37): warning C4251: “torch::autograd::profiler::LegacyEvent::shapes_”: class“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\WrapDimUtils.h(29): message : 参见“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(265,40): warning C4251: “torch::autograd::profiler::LegacyEvent::cuda_event”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(272,28): warning C4251: “torch::autograd::profiler::LegacyEvent::stack_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(276,48): warning C4251: “torch::autograd::profiler::LegacyEvent::extra_args_”: class“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function_schema.h(396): message : 参见“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(79,17): warning C4244: “初始化”: 从“double”转换到“int64_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(129,22): warning C4244: “=”: 从“double”转换到“int64_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(361,34): warning C4251: “torch::autograd::profiler::RecordProfile::file_”: class“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”需要有 dll 接口由 struct“torch::autograd::profiler::RecordProfile”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(361): message : 参见“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(400): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(400,65): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::cb_”: class“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(378): message : 参见“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(401,47): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::profilerDisableOptions_”: class“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(340): message : 参见“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247,52): warning C4251: “torch::autograd::profiler::KinetoEvent::shapes_”: class“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247): message : 参见“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(248,43): warning C4251: “torch::autograd::profiler::KinetoEvent::stack_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(249,43): warning C4251: “torch::autograd::profiler::KinetoEvent::module_hierarchy_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(250,43): warning C4251: “torch::autograd::profiler::KinetoEvent::dtypes_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(253,15): warning C4251: “torch::autograd::profiler::KinetoEvent::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(264,15): warning C4251: “torch::autograd::profiler::KinetoEvent::backend_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(266,40): warning C4251: “torch::autograd::profiler::KinetoEvent::cuda_event_start_”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(267,40): warning C4251: “torch::autograd::profiler::KinetoEvent::cuda_event_end_”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(293,28): warning C4251: “torch::autograd::profiler::ProfilerResult::events_”: class“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(277): message : 参见“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(294,55): warning C4251: “torch::autograd::profiler::ProfilerResult::trace_”: struct“torch::profiler::impl::kineto::ActivityTraceWrapper”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\kineto_shim.h(99): message : 参见“torch::profiler::impl::kineto::ActivityTraceWrapper”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(378,15): warning C4251: “torch::autograd::profiler::python_tracer::PyTraceEvent::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::python_tracer::PyTraceEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\batchnorm.h(24,3): warning C4251: “torch::nn::BatchNormOptions::momentum_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::BatchNormOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\batchnorm.h(81,3): warning C4251: “torch::nn::functional::BatchNormFuncOptions::momentum_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::BatchNormFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(29,3): warning C4251: “torch::nn::EmbeddingOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(31,3): warning C4251: “torch::nn::EmbeddingOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(52,3): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(54,3): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(78,3): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(80,3): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(109,3): warning C4251: “torch::nn::EmbeddingBagOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(117,3): warning C4251: “torch::nn::EmbeddingBagOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(132,3): warning C4251: “torch::nn::EmbeddingBagOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(143,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(151,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(163,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(182,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(190,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(206,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(44,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(44,48): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(127,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(127,48): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(27,3): warning C4251: “torch::nn::FoldOptions::output_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(30,3): warning C4251: “torch::nn::FoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(34,3): warning C4251: “torch::nn::FoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(38,3): warning C4251: “torch::nn::FoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(41,3): warning C4251: “torch::nn::FoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(72,3): warning C4251: “torch::nn::UnfoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(76,3): warning C4251: “torch::nn::UnfoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(80,3): warning C4251: “torch::nn::UnfoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(83,3): warning C4251: “torch::nn::UnfoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(223,3): warning C4251: “torch::nn::functional::SoftmaxFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftmaxFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(263,3): warning C4251: “torch::nn::functional::SoftminFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftminFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(303,3): warning C4251: “torch::nn::functional::LogSoftmaxFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::LogSoftmaxFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(65,3): warning C4251: “torch::nn::UnflattenOptions::dimname_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(67,3): warning C4251: “torch::nn::UnflattenOptions::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(69,3): warning C4251: “torch::nn::UnflattenOptions::namedshape_”: class“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(56): message : 参见“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(654,18): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(676,16): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(686,26): warning C4244: “=”: 从“T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(23,3): warning C4251: “torch::nn::L1LossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::L1LossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(55,3): warning C4251: “torch::nn::KLDivLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”需要有 dll 接口由 struct“torch::nn::KLDivLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(49): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(90,3): warning C4251: “torch::nn::MSELossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MSELossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(122,3): warning C4251: “torch::nn::BCELossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCELossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(154,3): warning C4251: “torch::nn::HingeEmbeddingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HingeEmbeddingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(195,3): warning C4251: “torch::nn::MultiMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(228,3): warning C4251: “torch::nn::CosineEmbeddingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CosineEmbeddingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(262,3): warning C4251: “torch::nn::MultiLabelMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(296,3): warning C4251: “torch::nn::SoftMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SoftMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(333,3): warning C4251: “torch::nn::MultiLabelSoftMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelSoftMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(372,3): warning C4251: “torch::nn::TripletMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404,3): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::distance_function_”: class“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404): message : 参见“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(417,3): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(448,3): warning C4251: “torch::nn::CTCLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CTCLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(486,3): warning C4251: “torch::nn::SmoothL1LossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SmoothL1LossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(522,3): warning C4251: “torch::nn::HuberLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HuberLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(562,3): warning C4251: “torch::nn::PoissonNLLLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::PoissonNLLLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(593,3): warning C4251: “torch::nn::MarginRankingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MarginRankingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(629,3): warning C4251: “torch::nn::NLLLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::NLLLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(664,3): warning C4251: “torch::nn::CrossEntropyLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CrossEntropyLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(697,3): warning C4251: “torch::nn::BCEWithLogitsLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCEWithLogitsLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(20,3): warning C4251: “torch::nn::LayerNormOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::LayerNormOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(43,3): warning C4251: “torch::nn::functional::LayerNormFuncOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::LayerNormFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(133,3): warning C4251: “torch::nn::functional::NormalizeFuncOptions::out_”: class“c10::optional<at::Tensor>”需要有 dll 接口由 struct“torch::nn::functional::NormalizeFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\_backward_ops.h(43): message : 参见“c10::optional<at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(25): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(65): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(105,3): warning C4251: “torch::nn::ZeroPad2dOptions::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ZeroPad2dOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(125): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(172,3): warning C4251: “torch::nn::functional::PadFuncOptions::pad_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(175,3): warning C4251: “torch::nn::functional::PadFuncOptions::mode_”: class“c10::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(163): message : 参见“c10::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\padding.h(14,36): warning C4267: “初始化”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\pooling.h(965,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\pooling.h(966,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(23,3): warning C4251: “torch::nn::UpsampleOptions::size_”: class“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(157): message : 参见“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<T,std::allocator<T>>>”的引用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26,3): warning C4251: “torch::nn::UpsampleOptions::scale_factor_”: class“c10::optional<std::vector<T,std::allocator<T>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 参见“c10::optional<std::vector<T,std::allocator<T>>>”的声明
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(36,3): warning C4251: “torch::nn::UpsampleOptions::mode_”: class“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(30): message : 参见“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(42,3): warning C4251: “torch::nn::UpsampleOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(65,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::size_”: class“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(157): message : 参见“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(68,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::scale_factor_”: class“c10::optional<std::vector<T,std::allocator<T>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 参见“c10::optional<std::vector<T,std::allocator<T>>>”的声明
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(72,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::mode_”: class“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea,torch::enumtype::kNearestExact>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(55): message : 参见“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea,torch::enumtype::kNearestExact>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(83,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(94,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::recompute_scale_factor_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(24,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::mode_”: class“c10::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(20): message : 参见“c10::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(26,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::padding_mode_”: class“c10::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(21): message : 参见“c10::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(28,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\functional.h(96,12): warning C4251: “torch::nn::FunctionalImpl::function_”: class“std::function<at::Tensor (at::Tensor)>”需要有 dll 接口由 class“torch::nn::FunctionalImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\transforms\tensor.h(39): message : 参见“std::function<at::Tensor (at::Tensor)>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\adaptive.h(26,3): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossOptions::cutoffs_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::AdaptiveLogSoftmaxWithLossOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(72,24): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::cutoffs”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(82,10): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::head”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(84,14): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::tail”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(178,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(178,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(211,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(211,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(247,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(247,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(334,90): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(334,90): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(370,90): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(370,90): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(406,90): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(406,90): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(46): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<1,torch::nn::ReflectionPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(72): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<2,torch::nn::ReflectionPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(99): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<3,torch::nn::ReflectionPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(147): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<1,torch::nn::ReplicationPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(173): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<2,torch::nn::ReplicationPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(199): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<3,torch::nn::ReplicationPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(285): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<1,torch::nn::ConstantPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(311): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<2,torch::nn::ConstantPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(337): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<3,torch::nn::ConstantPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>::options”: struct“torch::nn::AvgPoolOptions<1>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(43): message : 参见“torch::nn::AvgPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(46): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>::options”: struct“torch::nn::AvgPoolOptions<2>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(51): message : 参见“torch::nn::AvgPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(73): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>::options”: struct“torch::nn::AvgPoolOptions<3>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(59): message : 参见“torch::nn::AvgPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(100): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>::options”: struct“torch::nn::MaxPoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(133): message : 参见“torch::nn::MaxPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(147): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>::options”: struct“torch::nn::MaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(141): message : 参见“torch::nn::MaxPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(178): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>::options”: struct“torch::nn::MaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(149): message : 参见“torch::nn::MaxPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(209): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(236): message : 参见“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(248): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(202): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(265): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(210): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(298): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(218): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(331): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(359): message : 参见“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(371): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(271): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(388): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(279): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(417): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(287): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(446): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(355): message : 参见“torch::nn::MaxUnpoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(494): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(363): message : 参见“torch::nn::MaxUnpoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(524): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(371): message : 参见“torch::nn::MaxUnpoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(554): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(602,30): warning C4251: “torch::nn::FractionalMaxPool2dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool2dImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(453): message : 参见“torch::nn::FractionalMaxPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(646,30): warning C4251: “torch::nn::FractionalMaxPool3dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool3dImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(461): message : 参见“torch::nn::FractionalMaxPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(674,20): warning C4251: “torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>::options”: struct“torch::nn::LPPoolOptions<1>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(511): message : 参见“torch::nn::LPPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(691): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(674,20): warning C4251: “torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>::options”: struct“torch::nn::LPPoolOptions<2>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(519): message : 参见“torch::nn::LPPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(720): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(23,3): warning C4251: “torch::nn::detail::RNNOptionsBase::mode_”: class“c10::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”需要有 dll 接口由 struct“torch::nn::detail::RNNOptionsBase”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(15): message : 参见“c10::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(68,3): warning C4251: “torch::nn::RNNOptions::nonlinearity_”: class“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(54): message : 参见“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(183,3): warning C4251: “torch::nn::RNNCellOptions::nonlinearity_”: class“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNCellOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(54): message : 参见“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(86): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(103): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(148): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(155): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<at::Tensor,at::Tensor>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(201): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(870,10): warning C4251: “torch::nn::MultiheadAttentionImpl::out_proj”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::MultiheadAttentionImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\anomaly_mode.h(59,15): warning C4251: “torch::autograd::AnomalyMetadata::traceback_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\anomaly_mode.h(60,25): warning C4251: “torch::autograd::AnomalyMetadata::parent_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(71,32): warning C4251: “torch::autograd::SavedVariable::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(79,23): warning C4251: “torch::autograd::SavedVariable::weak_grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(93,39): warning C4251: “torch::autograd::SavedVariable::hooks_”: class“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(41): message : 参见“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(96,25): warning C4251: “torch::autograd::SavedVariable::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(97,23): warning C4251: “torch::autograd::SavedVariable::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(105,60): warning C4251: “std::enable_shared_from_this<torch::autograd::Node>::_Wptr”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::Node>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(530,14): warning C4251: “torch::autograd::Node::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(533,13): warning C4251: “torch::autograd::Node::next_edges_”: class“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(39): message : 参见“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(537,36): warning C4251: “torch::autograd::Node::anomaly_metadata_”: class“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(537): message : 参见“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(539,49): warning C4251: “torch::autograd::Node::pre_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(427): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(541,50): warning C4251: “torch::autograd::Node::post_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(403): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(543,37): warning C4251: “torch::autograd::Node::input_metadata_”: class“c10::SmallVector<torch::autograd::InputMetadata,2>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(543): message : 参见“c10::SmallVector<torch::autograd::InputMetadata,2>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(194,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(201,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(209,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(215,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(289,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(105,47): warning C4251: “torch::autograd::AutogradContext::saved_data”: class“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(105): message : 参见“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(129,39): warning C4251: “torch::autograd::AutogradContext::non_differentiable_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(17): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(130,39): warning C4251: “torch::autograd::AutogradContext::dirty_inputs_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(17): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(131,47): warning C4251: “torch::autograd::AutogradContext::saved_variables_”: class“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(40): message : 参见“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(132,17): warning C4251: “torch::autograd::AutogradContext::to_save_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(138,23): warning C4251: “torch::autograd::AutogradContext::grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(155,24): warning C4251: “torch::autograd::VariableInfo::size”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::autograd::VariableInfo”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(36,3): warning C4251: “torch::nn::TransformerEncoderLayerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerEncoderLayerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(65,3): warning C4251: “torch::nn::TransformerDecoderLayerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerDecoderLayerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(60,24): warning C4251: “torch::nn::TransformerEncoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(63,12): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(66,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(69,12): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(72,15): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(74,15): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(77,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(79,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(138,22): warning C4251: “torch::nn::TransformerDecoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(141,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(144,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(147,22): warning C4251: “torch::nn::TransformerDecoderLayerImpl::multihead_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(150,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(153,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(156,10): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(159,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(162,10): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(165,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout3”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(168,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm3”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(28,5): warning C4251: “torch::nn::TransformerEncoderOptions::encoder_layer_”: class“torch::nn::TransformerEncoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(88): message : 参见“torch::nn::TransformerEncoderLayer”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(34,5): warning C4251: “torch::nn::TransformerEncoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(57,3): warning C4251: “torch::nn::TransformerDecoderOptions::decoder_layer_”: class“torch::nn::TransformerDecoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(187): message : 参见“torch::nn::TransformerDecoderLayer”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(63,3): warning C4251: “torch::nn::TransformerDecoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(59,16): warning C4251: “torch::nn::TransformerEncoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(62,15): warning C4251: “torch::nn::TransformerEncoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(122,16): warning C4251: “torch::nn::TransformerDecoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(125,15): warning C4251: “torch::nn::TransformerDecoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(49,3): warning C4251: “torch::nn::TransformerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(52,3): warning C4251: “torch::nn::TransformerOptions::custom_encoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(55,3): warning C4251: “torch::nn::TransformerOptions::custom_decoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformer.h(126,15): warning C4251: “torch::nn::TransformerImpl::encoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformer.h(129,15): warning C4251: “torch::nn::TransformerImpl::decoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(85,23): warning C4251: “torch::optim::OptimizerParamGroup::params_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(87,37): warning C4251: “torch::optim::OptimizerParamGroup::options_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(52): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(155,37): warning C4251: “torch::optim::Optimizer::param_groups_”: class“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(97): message : 参见“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(157,74): warning C4251: “torch::optim::Optimizer::state_”: class“ska::flat_hash_map<std::string,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
          with
          [
              K=std::string,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(142): message : 参见“ska::flat_hash_map<std::string,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=std::string,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(159,38): warning C4251: “torch::optim::Optimizer::defaults_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(52): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(24,3): warning C4251: “torch::optim::AdamOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(23): message : 参见“std::tuple<double,double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adamw.h(24,3): warning C4251: “torch::optim::AdamWOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamWOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(23): message : 参见“std::tuple<double,double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(20,3): warning C4251: “torch::optim::LBFGSOptions::max_eval_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(24,3): warning C4251: “torch::optim::LBFGSOptions::line_search_fn_”: class“c10::optional<std::string>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43,3): warning C4251: “torch::optim::LBFGSParamState::old_dirs_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(44,3): warning C4251: “torch::optim::LBFGSParamState::old_stps_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(45,3): warning C4251: “torch::optim::LBFGSParamState::ro_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46,3): warning C4251: “torch::optim::LBFGSParamState::al_”: class“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46): message : 参见“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(77,26): warning C4251: “torch::optim::LBFGS::_numel_cache”: class“c10::optional<int64_t>”需要有 dll 接口由 class“torch::optim::LBFGS”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\custom_operator.h(23): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Operator>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121,35): warning C4251: “caffe2::serialize::PyTorchStreamReader::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(122,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(123,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(124,41): warning C4251: “caffe2::serialize::PyTorchStreamReader::in_”: class“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(100): message : 参见“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(126,14): warning C4251: “caffe2::serialize::PyTorchStreamReader::reader_lock_”: class“std::mutex”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(160,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::files_written_”: class“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\torch\custom_class.h(491): message : 参见“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(161,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(162,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(163,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(164,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::padding_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(165,17): warning C4251: “caffe2::serialize::PyTorchStreamWriter::file_stream_”: class“std::basic_ofstream<char,std::char_traits<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(244): message : 参见“std::basic_ofstream<char,std::char_traits<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(166,46): warning C4251: “caffe2::serialize::PyTorchStreamWriter::writer_func_”: class“std::function<size_t (const void *,size_t)>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\output-archive.h(65): message : 参见“std::function<size_t (const void *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(380,16): warning C4251: “torch::jit::SharedParserData::head”: class“std::unique_ptr<torch::jit::TokenTrie,std::default_delete<torch::jit::TokenTrie>>”需要有 dll 接口由 struct“torch::jit::SharedParserData”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(145): message : 参见“std::unique_ptr<torch::jit::TokenTrie,std::default_delete<torch::jit::TokenTrie>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(406,1): warning C4267: “参数”: 从“size_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(491,34): warning C4244: “参数”: 从“const int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(14,54): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“torch::jit::ErrorReport”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(14): message : 参见“torch::jit::ErrorReport”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(41,29): warning C4251: “torch::jit::ErrorReport::ss”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(241): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(42,20): warning C4251: “torch::jit::ErrorReport::context”: struct“torch::jit::OwnedSourceRange”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(241): message : 参见“torch::jit::OwnedSourceRange”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(43,23): warning C4251: “torch::jit::ErrorReport::the_message”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(44,21): warning C4251: “torch::jit::ErrorReport::error_stack”: class“std::vector<torch::jit::Call,std::allocator<torch::jit::Call>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(44): message : 参见“std::vector<torch::jit::Call,std::allocator<torch::jit::Call>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\schema_matching.h(29): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::NamedValue>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(29,57): warning C4251: “std::enable_shared_from_this<torch::jit::SugaredValue>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::jit::SugaredValue>”的客户端使用
          with
          [
              _Ty=torch::jit::SugaredValue
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::SugaredValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(222,29): warning C4251: “torch::jit::BuiltinFunction::self”: class“c10::optional<torch::jit::NamedValue>”需要有 dll 接口由 struct“torch::jit::BuiltinFunction”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\schema_matching.h(29): message : 参见“c10::optional<torch::jit::NamedValue>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(301,46): warning C4251: “torch::jit::SugaredTupleValue::tup_”: class“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”需要有 dll 接口由 struct“torch::jit::SugaredTupleValue”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(66): message : 参见“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(335,15): warning C4251: “torch::jit::BuiltinModule::name”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::BuiltinModule”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(338,26): warning C4251: “torch::jit::BuiltinModule::version”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::BuiltinModule”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(364,16): warning C4251: “torch::jit::ClassValue::type_”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 struct“torch::jit::ClassValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\custom_class.h(16): message : 参见“std::shared_ptr<c10::ClassType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(381,16): warning C4251: “torch::jit::NamedTupleConstructor::type_”: class“std::shared_ptr<c10::TupleType>”需要有 dll 接口由 struct“torch::jit::NamedTupleConstructor”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1036): message : 参见“std::shared_ptr<c10::TupleType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(542,11): warning C4251: “torch::jit::CastValue::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“torch::jit::CastValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(572,14): warning C4251: “torch::jit::TensorCastValue::self_”: struct“torch::jit::NamedValue”需要有 dll 接口由 struct“torch::jit::TensorCastValue”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\named_value.h(16): message : 参见“torch::jit::NamedValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(594,19): warning C4251: “torch::jit::MagicMethod::base_value_”: class“std::shared_ptr<torch::jit::SugaredValue>”需要有 dll 接口由 struct“torch::jit::MagicMethod”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(38): message : 参见“std::shared_ptr<torch::jit::SugaredValue>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(595,15): warning C4251: “torch::jit::MagicMethod::desugared_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::MagicMethod”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(656,26): warning C4251: “torch::jit::RangeValue::static_len_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::RangeValue”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(719,26): warning C4251: “torch::jit::IterableTree::unroll_length_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::IterableTree”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(720,32): warning C4251: “torch::jit::IterableTree::children_”: class“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”需要有 dll 接口由 struct“torch::jit::IterableTree”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(66): message : 参见“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(786,15): warning C4251: “torch::jit::ExceptionValue::message_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ExceptionValue”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(805,15): warning C4251: “torch::jit::SugaredEnumClass::enum_type_”: class“std::shared_ptr<c10::EnumType>”需要有 dll 接口由 struct“torch::jit::SugaredEnumClass”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1471): message : 参见“std::shared_ptr<c10::EnumType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\script_type_parser.h(48,15): warning C4251: “torch::jit::ScriptTypeParser::resolver_”: class“std::shared_ptr<torch::jit::Resolver>”需要有 dll 接口由 class“torch::jit::ScriptTypeParser”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(12): message : 参见“std::shared_ptr<torch::jit::Resolver>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(233,44): warning C4251: “torch::jit::Pickler::writer_”: class“std::function<void (const char *,size_t)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(124): message : 参见“std::function<void (const char *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(240,21): warning C4251: “torch::jit::Pickler::stack_”: class“std::vector<char,std::allocator<char>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize.h(77): message : 参见“std::vector<char,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252,45): warning C4251: “torch::jit::Pickler::memoized_ivalue_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(258,23): warning C4251: “torch::jit::Pickler::memoized_ivalues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(260,63): warning C4251: “torch::jit::Pickler::type_renamer_”: class“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(131): message : 参见“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(267,49): warning C4251: “torch::jit::Pickler::get_tensor_id_”: class“std::function<std::string (const at::Tensor &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(133): message : 参见“std::function<std::string (const at::Tensor &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(271,27): warning C4251: “torch::jit::Pickler::tensor_data_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(272,45): warning C4251: “torch::jit::Pickler::memoized_storage_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274,45): warning C4251: “torch::jit::Pickler::memoized_globals_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(275,45): warning C4251: “torch::jit::Pickler::memoized_strings_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(276,45): warning C4251: “torch::jit::Pickler::memoized_devices_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(138,40): warning C4251: “torch::jit::Unpickler::reader_”: class“std::function<size_t (char *,size_t)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(38): message : 参见“std::function<size_t (char *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(144,23): warning C4251: “torch::jit::Unpickler::stack_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(148,42): warning C4251: “torch::jit::Unpickler::globals_”: class“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(148): message : 参见“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(149,23): warning C4251: “torch::jit::Unpickler::memo_table_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(150,23): warning C4251: “torch::jit::Unpickler::marks_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(151,29): warning C4251: “torch::jit::Unpickler::tensor_table_”: class“c10::ArrayRef<at::Tensor>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\ATen\MethodOperators.h(34): message : 参见“c10::ArrayRef<at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(157,49): warning C4251: “torch::jit::Unpickler::type_cache_”: class“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\ATen\core\type_factory.h(50): message : 参见“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(160,16): warning C4251: “torch::jit::Unpickler::type_resolver_”: class“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(14): message : 参见“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(161,13): warning C4251: “torch::jit::Unpickler::obj_loader_”: class“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (c10::StrongTypePtr,c10::IValue)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(16): message : 参见“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (c10::StrongTypePtr,c10::IValue)>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(164,50): warning C4251: “torch::jit::Unpickler::read_record_”: class“std::function<c10::DataPtr (const std::string &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(56): message : 参见“std::function<c10::DataPtr (const std::string &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(165,29): warning C4251: “torch::jit::Unpickler::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(175,50): warning C4251: “torch::jit::Unpickler::storage_context_”: class“std::shared_ptr<torch::jit::DeserializationStorageContext>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(60): message : 参见“std::shared_ptr<torch::jit::DeserializationStorageContext>”的声明
C:\Program Files\libtorch\include\c10\util\SmallVector.h(104,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(102): message : 在编译 类 模板 成员函数“void c10::SmallVectorBase<unsigned int>::set_size(size_t)”时
C:\Program Files\libtorch\include\c10\util\SmallVector.h(481): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorBase<unsigned int>::set_size(size_t)”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(125): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorBase<unsigned int>”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(528): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorTemplateCommon<T,void>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(636): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorTemplateBase<T,true>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1281): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorImpl<T>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1769): message : 查看对正在编译的 类 模板 实例化“c10::SmallVector<int64_t,5>”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(69,26): warning C4267: “初始化”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(68): message : 在编译 类 模板 成员函数“c10::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”时
C:\Program Files\libtorch\include\c10\util\SmallVector.h(139): message : 查看对正在编译的函数 模板 实例化“c10::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(638,1): warning C4267: “参数”: 从“size_t”转换到“T”，可能丢失数据
          with
          [
              T=int32_t
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(349): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(349): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,double>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<double>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=double
          ]
          and
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,double>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(520,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(514): message : 在编译 类 模板 成员函数“void c10::SmallVectorTemplateBase<T,false>::takeAllocationForGrow(T *,size_t)”时
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(496): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorTemplateBase<T,false>::takeAllocationForGrow(T *,size_t)”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(492): message : 在编译 类 模板 成员函数“void c10::SmallVectorTemplateBase<T,false>::grow(size_t)”时
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1172): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorTemplateBase<T,false>::grow(size_t)”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1127): message : 在编译 类 模板 成员函数“c10::SmallVectorImpl<T> &c10::SmallVectorImpl<T>::operator =(c10::SmallVectorImpl<T> &&)”时
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1341): message : 查看对正在编译的函数 模板 实例化“c10::SmallVectorImpl<T> &c10::SmallVectorImpl<T>::operator =(c10::SmallVectorImpl<T> &&)”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1281): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorImpl<T>”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541): message : 查看对正在编译的 类 模板 实例化“c10::SmallVector<at::OperandInfo,4>”的引用
C:\Program Files\libtorch\include\c10\util\complex.h(173,14): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\complex.h(173,34): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
  CUDASceneRepHashSDF.cpp
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
C:\Program Files\libtorch\include\c10\macros\Macros.h(142,20): warning C4067: 预处理器指令后有意外标记 - 应输入换行符
C:\Program Files\libtorch\include\c10\util\Exception.h(28,45): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 class“c10::Error”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(28): message : 参见“c10::Error”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(30,15): warning C4251: “c10::Error::msg_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(35,28): warning C4251: “c10::Error::context_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“c10::Error”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(40,15): warning C4251: “c10::Error::backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(47,15): warning C4251: “c10::Error::what_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(48,15): warning C4251: “c10::Error::what_without_backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(56,34): warning C4251: “c10::ThreadLocalDebugInfo::info_”: class“std::shared_ptr<c10::DebugInfoBase>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(47): message : 参见“std::shared_ptr<c10::DebugInfoBase>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(58,41): warning C4251: “c10::ThreadLocalDebugInfo::parent_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(82,41): warning C4251: “c10::DebugInfoGuard::prev_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::DebugInfoGuard”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\c10\core\Allocator.h(22,30): warning C4251: “c10::DataPtr::ptr_”: class“c10::detail::UniqueVoidPtr”需要有 dll 接口由 class“c10::DataPtr”的客户端使用
C:\Program Files\libtorch\include\c10\util\UniqueVoidPtr.h(38): message : 参见“c10::detail::UniqueVoidPtr”的声明
C:\Program Files\libtorch\include\c10\core\Allocator.h(186,53): warning C4251: “c10::InefficientStdFunctionContext::ptr_”: class“std::unique_ptr<void,std::function<void (void *)>>”需要有 dll 接口由 struct“c10::InefficientStdFunctionContext”的客户端使用
C:\Program Files\libtorch\include\c10\core\Allocator.h(186): message : 参见“std::unique_ptr<void,std::function<void (void *)>>”的声明
C:\Program Files\libtorch\include\c10\util\intrusive_ptr.h(82,31): warning C4251: “c10::intrusive_ptr_target::refcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\util\intrusive_ptr.h(83,31): warning C4251: “c10::intrusive_ptr_target::weakcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(61,18): warning C4251: “c10::impl::LocalDispatchKeySet::included_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(62,18): warning C4251: “c10::impl::LocalDispatchKeySet::excluded_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(99,18): warning C4251: “c10::impl::IncludeDispatchKeyGuard::include_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::IncludeDispatchKeyGuard”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(117,18): warning C4251: “c10::impl::ExcludeDispatchKeyGuard::exclude_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::ExcludeDispatchKeyGuard”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(188,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(191,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(194,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(197,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(201,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(204,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(207,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(210,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(216,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(219,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(222,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(225,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(229,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(232,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(235,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(238,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(192,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(195,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(198,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(201,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(205,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(208,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(211,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(214,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(220,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(223,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(226,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(229,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(233,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(236,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(239,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(242,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\core\Storage.h(166,35): warning C4251: “c10::Storage::storage_impl_”: class“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::Storage”的客户端使用
          with
          [
              TTarget=c10::StorageImpl
          ]
C:\Program Files\libtorch\include\c10\core\Storage.h(12): message : 参见“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::StorageImpl
          ]
C:\Program Files\libtorch\include\c10\util\typeid.h(65,67): warning C4251: “c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>::id_”: struct“c10::util::type_index”需要有 dll 接口由 class“c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>”的客户端使用
C:\Program Files\libtorch\include\c10\util\TypeIndex.h(57): message : 参见“c10::util::type_index”的声明
C:\Program Files\libtorch\include\c10\util\typeid.h(511,32): warning C4251: “caffe2::TypeMeta::nextTypeIndex”: struct“std::atomic<unsigned short>”需要有 dll 接口由 class“caffe2::TypeMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2750): message : 参见“std::atomic<unsigned short>”的声明
C:\Program Files\libtorch\include\c10\util\logging_is_not_google_glog.h(43,21): warning C4251: “c10::MessageLogger::stream_”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::MessageLogger”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(241): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(435,38): warning C4251: “c10::VariableVersion::version_counter_”: class“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::VariableVersion”的客户端使用
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(435): message : 参见“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2453,47): warning C4251: “c10::TensorImpl::autograd_meta_”: class“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(184): message : 参见“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2456,50): warning C4251: “c10::TensorImpl::named_tensor_meta_”: class“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(354): message : 参见“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2482,37): warning C4251: “c10::TensorImpl::pyobj_interpreter_”: struct“std::atomic<c10::impl::PyInterpreter *>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2482): message : 参见“std::atomic<c10::impl::PyInterpreter *>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2522,30): warning C4251: “c10::TensorImpl::device_opt_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2614,18): warning C4251: “c10::TensorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(82,14): warning C4251: “c10::GeneratorImpl::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(98,18): warning C4251: “c10::GeneratorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\ATen\core\Generator.h(133,42): warning C4251: “at::Generator::impl_”: class“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“at::Generator”的客户端使用
          with
          [
              TTarget=c10::GeneratorImpl
          ]
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(71): message : 参见“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::GeneratorImpl
          ]
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(34,15): warning C4251: “at::CPUGeneratorImpl::engine_”: class“at::mt19937_engine”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\core\MT19937RNGEngine.h(110): message : 参见“at::mt19937_engine”的声明
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(35,24): warning C4251: “at::CPUGeneratorImpl::next_float_normal_sample_”: class“c10::optional<float>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(25): message : 参见“c10::optional<float>”的声明
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(36,25): warning C4251: “at::CPUGeneratorImpl::next_double_normal_sample_”: class“c10::optional<double>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24,45): warning C4251: “at::DeprecatedTypePropertiesRegistry::registry”: class“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”需要有 dll 接口由 class“at::DeprecatedTypePropertiesRegistry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24): message : 参见“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”的声明
C:\Program Files\libtorch\include\ATen\Context.h(239,18): warning C4251: “at::Context::thc_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xcall_once.h(20): message : 参见“std::once_flag”的声明
C:\Program Files\libtorch\include\ATen\Context.h(240,18): warning C4251: “at::Context::thh_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xcall_once.h(20): message : 参见“std::once_flag”的声明
C:\Program Files\libtorch\include\ATen\Context.h(257,30): warning C4251: “at::Context::quantized_engine”: class“c10::optional<c10::QEngine>”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\libtorch\include\ATen\Context.h(257): message : 参见“c10::optional<c10::QEngine>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineDeviceGuard.h(427): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>>”的引用
C:\Program Files\libtorch\include\c10\core\DeviceGuard.h(178): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalDeviceGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(193,5): warning C4251: “c10::Scalar::v”: union“c10::Scalar::v_t”需要有 dll 接口由 class“c10::Scalar”的客户端使用
C:\Program Files\libtorch\include\c10\core\Scalar.h(188): message : 参见“c10::Scalar::v_t”的声明
C:\Program Files\libtorch\include\ATen\core\NamedTensor.h(69,24): warning C4251: “at::NamedTensorMeta::names_”: class“std::vector<at::Dimname,std::allocator<at::Dimname>>”需要有 dll 接口由 struct“at::NamedTensorMeta”的客户端使用
C:\Program Files\libtorch\include\ATen\core\NamedTensor.h(35): message : 参见“std::vector<at::Dimname,std::allocator<at::Dimname>>”的声明
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(785,55): warning C4251: “at::TensorBase::impl_”: class“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”需要有 dll 接口由 class“at::TensorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(94): message : 参见“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(933): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::TensorBase>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBody.h(502): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Tensor>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBody.h(576): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Generator>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\ATen\TensorGeometry.h(56,24): warning C4251: “at::TensorGeometry::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\ATen\TensorGeometry.h(57,24): warning C4251: “at::TensorGeometry::strides_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(81,15): warning C4251: “at::TensorMaker::sizes_”: class“c10::ArrayRef<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\util\ArrayRef.h(366): message : 参见“c10::ArrayRef<int64_t>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(82,25): warning C4251: “at::TensorMaker::strides_”: class“c10::optional<c10::IntArrayRef>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\std_ops.h(65): message : 参见“c10::optional<c10::IntArrayRef>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(83,21): warning C4251: “at::TensorMaker::storage_offset_”: class“c10::optional<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(84,30): warning C4251: “at::TensorMaker::deleter_”: class“std::function<void (void *)>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\core\Allocator.h(186): message : 参见“std::function<void (void *)>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(85,41): warning C4251: “at::TensorMaker::ctx_”: class“std::unique_ptr<void,c10::DeleterFnPtr>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\util\UniqueVoidPtr.h(42): message : 参见“std::unique_ptr<void,c10::DeleterFnPtr>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(86,20): warning C4251: “at::TensorMaker::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(125,16): warning C4251: “at::OperandInfo::stride_bytes”: class“c10::SmallVector<int64_t,6>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(110): message : 参见“c10::SmallVector<int64_t,6>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(133,25): warning C4251: “at::OperandInfo::device”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(190,31): warning C4251: “at::OperandInfo::tensor_base_”: class“c10::MaybeOwned<at::TensorBase>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(134): message : 参见“c10::MaybeOwned<at::TensorBase>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(191,31): warning C4251: “at::OperandInfo::original_tensor_base_”: class“c10::MaybeOwned<at::TensorBase>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(134): message : 参见“c10::MaybeOwned<at::TensorBase>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(504,13): warning C4251: “at::TensorIteratorBase::shape_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(514,13): warning C4251: “at::TensorIteratorBase::perm_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(527,13): warning C4251: “at::TensorIteratorBase::view_offsets_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(530,14): warning C4251: “at::TensorIteratorBase::names_”: class“c10::SmallVector<at::Dimname,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(27): message : 参见“c10::SmallVector<at::Dimname,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541,31): warning C4251: “at::TensorIteratorBase::operands_”: class“c10::SmallVector<at::OperandInfo,4>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541): message : 参见“c10::SmallVector<at::OperandInfo,4>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(238,20): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\TensorIterator.h(241,24): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\TensorIterator.h(762,47): warning C4251: “at::TensorIteratorConfig::tensors_”: class“c10::SmallVector<c10::MaybeOwned<at::TensorBase>,4>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(762): message : 参见“c10::SmallVector<c10::MaybeOwned<at::TensorBase>,4>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(766): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::DimVector>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(766,28): warning C4251: “at::TensorIteratorConfig::static_shape_”: class“c10::optional<at::DimVector>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(162): message : 参见“c10::optional<at::DimVector>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(767,29): warning C4251: “at::TensorIteratorConfig::static_dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(768,25): warning C4251: “at::TensorIteratorConfig::static_device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(804,50): warning C4251: “at::SplitUntil32Bit::iterator::vec”: class“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”需要有 dll 接口由 struct“at::SplitUntil32Bit::iterator”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(804): message : 参见“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(443): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::string>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(642,92): warning C4251: “std::enable_shared_from_this<c10::SharedType>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<c10::SharedType>”的客户端使用
          with
          [
              _Ty=c10::SharedType
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=c10::SharedType
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(691): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::QualifiedName>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(691,32): warning C4251: “c10::NamedType::name_”: class“c10::optional<c10::QualifiedName>”需要有 dll 接口由 struct“c10::NamedType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(674): message : 参见“c10::optional<c10::QualifiedName>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1064,11): warning C4251: “c10::IValue::payload”: union“c10::IValue::Payload”需要有 dll 接口由 struct“c10::IValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1026): message : 参见“c10::IValue::Payload”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1182,11): warning C4251: “c10::WeakIValue::payload”: union“c10::IValue::Payload::TriviallyCopyablePayload”需要有 dll 接口由 struct“c10::WeakIValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1032): message : 参见“c10::IValue::Payload::TriviallyCopyablePayload”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1195,48): warning C4251: “c10::StrongTypePtr::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1192): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1196,11): warning C4251: “c10::StrongTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1209,46): warning C4251: “c10::WeakTypePtr::cu_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::WeakTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1210,11): warning C4251: “c10::WeakTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::WeakTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1241): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::shared_ptr<torch::jit::CompilationUnit>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1242): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::weak_ptr<torch::jit::CompilationUnit>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1262,31): warning C4251: “c10::WeakOrStrongTypePtr::cu_”: struct“c10::WeakOrStrongCompilationUnit”需要有 dll 接口由 struct“c10::WeakOrStrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1214): message : 参见“c10::WeakOrStrongCompilationUnit”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1263,11): warning C4251: “c10::WeakOrStrongTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::WeakOrStrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(177,26): warning C4251: “c10::UnionType::types_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::UnionType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(234,11): warning C4251: “c10::OptionalType::contained_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::OptionalType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(285,25): warning C4251: “c10::Stride::stride_index_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(271): message : 参见“c10::optional<size_t>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(286,23): warning C4251: “c10::Stride::contiguous_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(287,25): warning C4251: “c10::Stride::stride_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(271): message : 参见“c10::optional<size_t>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(353,30): warning C4251: “c10::ShapeSymbol::num_symbols”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 struct“c10::ShapeSymbol”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(460): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(460,45): warning C4251: “c10::SymbolicShape::dims_”: class“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”需要有 dll 接口由 struct“c10::SymbolicShape”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(434): message : 参见“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(797,33): warning C4251: “c10::TensorType::scalar_type_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(798,29): warning C4251: “c10::TensorType::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(545): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>>”的引用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(800): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<c10::Stride>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(800,24): warning C4251: “c10::TensorType::strides_”: struct“c10::VaryingShape<c10::Stride>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(570): message : 参见“c10::VaryingShape<c10::Stride>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(801,23): warning C4251: “c10::TensorType::requires_grad_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(813,23): warning C4251: “c10::TensorType::undefined_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(545): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>>”的引用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(591): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<int64_t>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(704): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(821,62): warning C4251: “c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(944,24): warning C4251: “c10::DictType::types”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::DictType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(952,66): warning C4251: “c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(994,62): warning C4251: “c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1124,24): warning C4251: “c10::TupleType::elements_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1126,35): warning C4251: “c10::TupleType::schema_”: class“std::shared_ptr<c10::FunctionSchema>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1084): message : 参见“std::shared_ptr<c10::FunctionSchema>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1930,48): warning C4251: “c10::InterfaceType::methods_”: class“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”需要有 dll 接口由 struct“c10::InterfaceType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1930): message : 参见“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineStreamGuard.h(197): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>>”的引用
C:\Program Files\libtorch\include\c10\core\StreamGuard.h(139): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalStreamGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineStreamGuard.h(232): message : 查看对正在编译的 类 模板 实例化“c10::optional<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\core\StreamGuard.h(162): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineMultiStreamGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(230,21): warning C4251: “c10::ivalue::ConstantString::str_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::ConstantString”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(598,24): warning C4251: “c10::ivalue::Tuple::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Tuple”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(787,62): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“c10::ivalue::Future::FutureError”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(787): message : 参见“c10::ivalue::Future::FutureError”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(797,17): warning C4251: “c10::ivalue::Future::FutureError::error_msg”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::Future::FutureError”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1287,22): warning C4251: “c10::ivalue::Future::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1288,20): warning C4251: “c10::ivalue::Future::completed_”: struct“std::atomic<bool>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2744): message : 参见“std::atomic<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1289,27): warning C4251: “c10::ivalue::Future::finished_cv_”: class“std::condition_variable”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(570): message : 参见“std::condition_variable”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1292,11): warning C4251: “c10::ivalue::Future::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1293,45): warning C4251: “c10::ivalue::Future::callbacks_”: class“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1293): message : 参见“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1294,22): warning C4251: “c10::ivalue::Future::eptr_”: class“std::exception_ptr”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\exception(210): message : 参见“std::exception_ptr”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1298,37): warning C4251: “c10::ivalue::Future::impl_”: class“c10::impl::VirtualGuardImpl”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\c10\core\impl\VirtualGuardImpl.h(12): message : 参见“c10::impl::VirtualGuardImpl”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1303,25): warning C4251: “c10::ivalue::Future::currentDevice_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1309,27): warning C4251: “c10::ivalue::Future::events_”: class“std::vector<c10::Event,std::allocator<c10::Event>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1309): message : 参见“std::vector<c10::Event,std::allocator<c10::Event>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1313,28): warning C4251: “c10::ivalue::Future::storages_”: class“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(834): message : 参见“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1321,34): warning C4251: “c10::ivalue::Future::devices_”: class“std::vector<c10::Device,std::allocator<c10::Device>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(774): message : 参见“std::vector<c10::Device,std::allocator<c10::Device>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(834): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1452,23): warning C4251: “c10::ivalue::Object::slots_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ivalue::Object”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(106,54): warning C4251: “torch::autograd::ForwardADLevel::grads_”: class“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(106): message : 参见“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(107,16): warning C4251: “torch::autograd::ForwardADLevel::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(112,74): warning C4251: “std::enable_shared_from_this<torch::autograd::ForwardGrad>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::ForwardGrad>”的客户端使用
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(191,46): warning C4251: “torch::autograd::ForwardGrad::content_”: class“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(191): message : 参见“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(192,24): warning C4251: “torch::autograd::ForwardGrad::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\TensorNames.h(40,21): warning C4251: “at::namedinference::TensorName::origin_”: class“c10::ArrayRef<at::Dimname>”需要有 dll 接口由 struct“at::namedinference::TensorName”的客户端使用
C:\Program Files\libtorch\include\ATen\core\Dimname.h(36): message : 参见“c10::ArrayRef<at::Dimname>”的声明
C:\Program Files\libtorch\include\ATen\TensorNames.h(70,17): warning C4251: “at::namedinference::TensorNames::names_”: class“c10::SmallVector<at::namedinference::TensorName,10>”需要有 dll 接口由 struct“at::namedinference::TensorNames”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorNames.h(49): message : 参见“c10::SmallVector<at::namedinference::TensorName,10>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(191,15): warning C4251: “torch::autograd::AutogradMeta::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(194,25): warning C4251: “torch::autograd::AutogradMeta::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(195,23): warning C4251: “torch::autograd::AutogradMeta::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(206,32): warning C4251: “torch::autograd::AutogradMeta::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(208,49): warning C4251: “torch::autograd::AutogradMeta::hooks_”: class“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(175): message : 参见“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(209,31): warning C4251: “torch::autograd::AutogradMeta::cpp_hooks_list_”: class“std::shared_ptr<torch::autograd::hooks_list>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\cpp_hook.h(11): message : 参见“std::shared_ptr<torch::autograd::hooks_list>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(230,22): warning C4251: “torch::autograd::AutogradMeta::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(298,44): warning C4251: “torch::autograd::ViewInfo::view_fn_”: class“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”需要有 dll 接口由 struct“torch::autograd::ViewInfo”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(298): message : 参见“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::autograd::ViewInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525,27): warning C4251: “torch::autograd::DifferentiableViewMeta::backward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(526,27): warning C4251: “torch::autograd::DifferentiableViewMeta::forward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(162): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::IValue>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(26): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::AliasInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\ATen\core\boxing\KernelFunction.h(266,38): warning C4251: “c10::KernelFunction::functor_”: class“c10::intrusive_ptr<c10::OperatorKernel,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 class“c10::KernelFunction”的客户端使用
          with
          [
              TTarget=c10::OperatorKernel
          ]
C:\Program Files\libtorch\include\ATen\core\boxing\KernelFunction.h(266): message : 参见“c10::intrusive_ptr<c10::OperatorKernel,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::OperatorKernel
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\CppSignature.h(57,21): warning C4251: “c10::impl::CppSignature::signature_”: class“std::type_index”需要有 dll 接口由 class“c10::impl::CppSignature”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\typeindex(25): message : 参见“std::type_index”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434,62): warning C4251: “c10::RegisterOperators::Options::schemaOrName_”: class“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434): message : 参见“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(436,43): warning C4251: “c10::RegisterOperators::Options::kernels”: class“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(436): message : 参见“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(437,33): warning C4251: “c10::RegisterOperators::Options::aliasAnalysisKind_”: class“c10::optional<c10::AliasAnalysisKind>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function_schema.h(287): message : 参见“c10::optional<c10::AliasAnalysisKind>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588,39): warning C4251: “c10::RegisterOperators::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“c10::RegisterOperators”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
C:\Program Files\libtorch\include\torch\library.h(301,35): warning C4251: “torch::CppFunction::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::DispatchKey>”的声明
C:\Program Files\libtorch\include\torch\library.h(303,42): warning C4251: “torch::CppFunction::cpp_signature_”: class“c10::optional<c10::impl::CppSignature>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::impl::CppSignature>”的声明
C:\Program Files\libtorch\include\torch\library.h(304,40): warning C4251: “torch::CppFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(28): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\torch\library.h(305,15): warning C4251: “torch::CppFunction::debug_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\library.h(799,30): warning C4251: “torch::Library::ns_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\library.h(800,35): warning C4251: “torch::Library::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::DispatchKey>”的声明
C:\Program Files\libtorch\include\torch\library.h(804,44): warning C4251: “torch::Library::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(53,11): warning C4251: “c10::ClassAttribute::attributeType_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(54,15): warning C4251: “c10::ClassAttribute::attributeName_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(410,28): warning C4251: “c10::ClassType::constantNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(411,23): warning C4251: “c10::ClassType::constantValues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(413,34): warning C4251: “c10::ClassType::compilation_unit_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(416,31): warning C4251: “c10::ClassType::attributes_”: class“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(320): message : 参见“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(419,24): warning C4251: “c10::ClassType::attributeTypes_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(422,38): warning C4251: “c10::ClassType::methods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(423,38): warning C4251: “c10::ClassType::staticmethods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(426,38): warning C4251: “c10::ClassType::forward_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(427,38): warning C4251: “c10::ClassType::forward_pre_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(430,25): warning C4251: “c10::ClassType::properties_”: class“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(246): message : 参见“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(435,15): warning C4251: “c10::ClassType::doc_string_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(438,28): warning C4251: “c10::ClassType::unresolved_class_attributes_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\custom_class_detail.h(212,15): warning C4251: “torch::detail::class_base::qualClassName”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\custom_class_detail.h(213,20): warning C4251: “torch::detail::class_base::classTypePtr”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\Program Files\libtorch\include\ATen\core\custom_class.h(16): message : 参见“std::shared_ptr<c10::ClassType>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\DispatchKeyExtractor.h(206,22): warning C4251: “c10::DispatchKeyExtractor::dispatch_arg_indices_reverse_”: struct“c10::utils::bitset”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
C:\Program Files\libtorch\include\c10\util\Bitset.h(22): message : 参见“c10::utils::bitset”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\DispatchKeyExtractor.h(209,18): warning C4251: “c10::DispatchKeyExtractor::nonFallthroughKeys_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(211,16): warning C4251: “c10::impl::OperatorEntry::name_”: struct“c10::OperatorName”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ATenOpList.h(6): message : 参见“c10::OperatorName”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::AnnotatedSchema>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212,34): warning C4251: “c10::impl::OperatorEntry::schema_”: class“c10::optional<c10::impl::AnnotatedSchema>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212): message : 参见“c10::optional<c10::impl::AnnotatedSchema>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(255,24): warning C4251: “c10::impl::OperatorEntry::kernels_”: class“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(248): message : 参见“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271,40): warning C4251: “c10::impl::OperatorEntry::cpp_signature_”: class“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271): message : 参见“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的声明
C:\Program Files\libtorch\include\ATen\record_function.h(84,32): warning C4251: “at::StringView::owned_str_ptr_”: class“std::shared_ptr<std::string>”需要有 dll 接口由 struct“at::StringView”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(84): message : 参见“std::shared_ptr<std::string>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(327): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::OperatorName>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(356): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::RecordFunction::State>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(356,24): warning C4251: “at::RecordFunction::state_”: class“c10::optional<at::RecordFunction::State>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(356): message : 参见“c10::optional<at::RecordFunction::State>”的声明
C:\Program Files\libtorch\include\ATen\record_function.h(676,38): warning C4251: “at::RecordFunctionTLS::sorted_tls_callbacks_”: class“std::vector<at::ThreadLocalRecordFunctionCallbacksEntry,std::allocator<at::ThreadLocalRecordFunctionCallbacksEntry>>”需要有 dll 接口由 struct“at::RecordFunctionTLS”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(575): message : 参见“std::vector<at::ThreadLocalRecordFunctionCallbacksEntry,std::allocator<at::ThreadLocalRecordFunctionCallbacksEntry>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(285,26): warning C4251: “c10::Dispatcher::operators_”: class“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(285): message : 参见“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(287,63): warning C4251: “c10::Dispatcher::operatorLookupTable_”: class“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(287): message : 参见“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”的声明
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(292,48): warning C4251: “c10::Dispatcher::libraries_”: class“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string,std::string>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(292): message : 参见“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string,std::string>>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(296,53): warning C4251: “c10::Dispatcher::listeners_”: class“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(296): message : 参见“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(297,14): warning C4251: “c10::Dispatcher::mutex_”: class“std::mutex”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(391,48): warning C4251: “c10::OperatorHandle::operatorIterator_”: class“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”需要有 dll 接口由 class“c10::OperatorHandle”的客户端使用
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\list(787): message : 参见“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”的声明
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\samplers\distributed.h(101,23): warning C4251: “torch::data::samplers::DistributedRandomSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedRandomSampler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\samplers\distributed.h(134,23): warning C4251: “torch::data::samplers::DistributedSequentialSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedSequentialSampler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\imethod.h(44,36): warning C4251: “torch::IMethod::argumentNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::IMethod”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(128,52): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphAttr”的基
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(57): message : 参见“torch::jit::AttributeValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(128): message : 参见“torch::jit::GraphAttr”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(142,26): warning C4251: “torch::jit::GraphAttr::value_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphAttr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function.h(32): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(145,53): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphsAttr”的基
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(57): message : 参见“torch::jit::AttributeValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(145): message : 参见“torch::jit::GraphsAttr”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(160,13): warning C4251: “torch::jit::GraphsAttr::value_”: class“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”需要有 dll 接口由 struct“torch::jit::GraphsAttr”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(146): message : 参见“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(232,31): warning C4251: “torch::jit::SourceRange::source_view_”: class“std::shared_ptr<torch::jit::SourceView>”需要有 dll 接口由 struct“torch::jit::SourceRange”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(163): message : 参见“std::shared_ptr<torch::jit::SourceView>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(201): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<std::string,size_t,size_t>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(224): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::SourceRange>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(32,12): warning C4251: “torch::jit::Scope::parent_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Scope”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(27): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::InlinedCallStackPtr>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127,38): warning C4251: “torch::jit::InlinedCallStack::callee_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(137,15): warning C4251: “torch::jit::InlinedCallStack::fn_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(140): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ModuleInstanceInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(140,37): warning C4251: “torch::jit::InlinedCallStack::module_instance_info_”: class“c10::optional<torch::jit::ModuleInstanceInfo>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(123): message : 参见“c10::optional<torch::jit::ModuleInstanceInfo>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(21,75): warning C4275: 非 dll 接口 class“std::runtime_error”用作 dll 接口 struct“torch::jit::constant_not_supported_error”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\stdexcept(101): message : 参见“std::runtime_error”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(21): message : 参见“torch::jit::constant_not_supported_error”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(29): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ScopePtr>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\operator.h(183,45): warning C4251: “torch::jit::Operator::op_”: class“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”需要有 dll 接口由 struct“torch::jit::Operator”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\operator.h(183): message : 参见“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(94,11): warning C4251: “c10::EnumType::value_type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(95,30): warning C4251: “c10::EnumType::enum_names_values_”: class“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\enum_type.h(17): message : 参见“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(96,48): warning C4251: “c10::EnumType::cu_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(324,23): warning C4251: “torch::jit::Node::inputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(150): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(325,23): warning C4251: “torch::jit::Node::outputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(150): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(327,23): warning C4251: “torch::jit::Node::blocks_”: class“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(327): message : 参见“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(330,30): warning C4251: “torch::jit::Node::source_range_”: class“c10::optional<torch::jit::SourceRange>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(86): message : 参见“c10::optional<torch::jit::SourceRange>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(331,12): warning C4251: “torch::jit::Node::scope_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(27): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(332,38): warning C4251: “torch::jit::Node::callstack_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(340,31): warning C4251: “torch::jit::Node::wrap_”: class“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(340): message : 参见“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(346,30): warning C4251: “torch::jit::Node::historic_schema_name_”: class“c10::optional<std::string>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(947,22): warning C4251: “torch::jit::Node::values_”: class“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(947): message : 参见“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(1556,45): warning C4251: “torch::jit::ProfileIValueOp::callback_”: class“std::function<void (torch::jit::Stack &)>”需要有 dll 接口由 struct“torch::jit::ProfileIValueOp”的客户端使用
C:\Program Files\libtorch\include\ATen\core\stack.h(19): message : 参见“std::function<void (torch::jit::Stack &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(210,21): warning C4251: “torch::jit::ArgumentSpecCreator::instructions_”: class“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”需要有 dll 接口由 struct“torch::jit::ArgumentSpecCreator”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(210): message : 参见“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4267: “初始化”: 从“size_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4267: “初始化”: 从“size_t”转换到“const int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(255,33): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(281,37): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(460,39): warning C4267: “参数”: 从“size_t”转换到“const int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(39,46): warning C4251: “at::ThreadLocalState::debug_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(51,54): warning C4251: “at::ThreadLocalState::functorch_tls_”: class“std::shared_ptr<const at::functorch::FuncTorchTLSBase>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\ATen\FuncTorchTLS.h(41): message : 参见“std::shared_ptr<const at::functorch::FuncTorchTLSBase>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(56,44): warning C4251: “at::ThreadLocalState::python_mode_state_”: class“std::shared_ptr<c10::TorchDispatchTypeObject>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(269): message : 参见“std::shared_ptr<c10::TorchDispatchTypeObject>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(59,47): warning C4251: “at::ThreadLocalState::saved_tensors_default_hooks_”: class“std::stack<std::pair<PyObject *,PyObject *>,std::deque<std::pair<PyObject *,PyObject *>,std::allocator<std::pair<PyObject *,PyObject *>>>>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(59): message : 参见“std::stack<std::pair<PyObject *,PyObject *>,std::deque<std::pair<PyObject *,PyObject *>,std::allocator<std::pair<PyObject *,PyObject *>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(80,42): warning C4251: “torch::jit::Code::pImpl”: class“std::shared_ptr<torch::jit::interpreter::CodeImpl>”需要有 dll 接口由 struct“torch::jit::Code”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(80): message : 参见“std::shared_ptr<torch::jit::interpreter::CodeImpl>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(149): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::ThreadLocalState>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\graph_executor.h(87,42): warning C4251: “torch::jit::GraphExecutor::pImpl”: class“std::shared_ptr<torch::jit::GraphExecutorImplBase>”需要有 dll 接口由 struct“torch::jit::GraphExecutor”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\graph_executor.h(87): message : 参见“std::shared_ptr<torch::jit::GraphExecutorImplBase>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(127,22): warning C4251: “torch::jit::GraphFunction::name_”: struct“c10::QualifiedName”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\qualified_name.h(12): message : 参见“c10::QualifiedName”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(129,26): warning C4251: “torch::jit::GraphFunction::graph_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function.h(32): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\array(602): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::shared_ptr<torch::jit::Graph>>”的引用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(135): message : 查看对正在编译的 类 模板 实例化“std::array<c10::optional<std::shared_ptr<torch::jit::Graph>>,4>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(142,32): warning C4251: “torch::jit::GraphFunction::compile_mutex”: class“std::recursive_mutex”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(95): message : 参见“std::recursive_mutex”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\array(602): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::GraphExecutor>”的引用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(149): message : 查看对正在编译的 类 模板 实例化“std::array<c10::optional<torch::jit::GraphExecutor>,4>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(154,39): warning C4251: “torch::jit::GraphFunction::function_creator_”: class“std::function<void (torch::jit::GraphFunction &)>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(16): message : 参见“std::function<void (torch::jit::GraphFunction &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(159,43): warning C4251: “torch::jit::GraphFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(28): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\method.h(70,13): warning C4251: “torch::jit::Method::owner_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Method”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(672): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(46): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Method>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(185,21): warning C4251: “torch::jit::Object::_ivalue_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Object”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(672): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319,42): warning C4251: “torch::jit::CompilationUnit::functions_”: class“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319): message : 参见“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321,50): warning C4251: “torch::jit::CompilationUnit::dict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(322,50): warning C4251: “torch::jit::CompilationUnit::classDict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(329,34): warning C4251: “torch::jit::CompilationUnit::classes_”: class“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(329): message : 参见“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\module.h(295): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\input-archive.h(110,15): warning C4251: “torch::serialize::InputArchive::hierarchy_prefix_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::serialize::InputArchive”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\output-archive.h(76,41): warning C4251: “torch::serialize::OutputArchive::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 class“torch::serialize::OutputArchive”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1192): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(64,70): warning C4251: “std::enable_shared_from_this<torch::nn::Module>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::nn::Module>”的客户端使用
          with
          [
              _Ty=torch::nn::Module
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::nn::Module
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(544,36): warning C4251: “torch::nn::Module::parameters_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(212): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(592,36): warning C4251: “torch::nn::Module::buffers_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(212): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(595,53): warning C4251: “torch::nn::Module::children_”: class“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(248): message : 参见“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(598,33): warning C4251: “torch::nn::Module::name_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\util.h(60,15): warning C4251: “torch::profiler::impl::FileLineFunc::filename”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::profiler::impl::FileLineFunc”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\util.h(62,15): warning C4251: “torch::profiler::impl::FileLineFunc::funcname”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::profiler::impl::FileLineFunc”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(103,14): warning C4251: “torch::profiler::impl::ProfilerThreadLocalStateBase::state_mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::profiler::impl::ProfilerThreadLocalStateBase”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(261,37): warning C4251: “torch::autograd::profiler::LegacyEvent::shapes_”: class“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\WrapDimUtils.h(29): message : 参见“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(265,40): warning C4251: “torch::autograd::profiler::LegacyEvent::cuda_event”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(272,28): warning C4251: “torch::autograd::profiler::LegacyEvent::stack_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(276,48): warning C4251: “torch::autograd::profiler::LegacyEvent::extra_args_”: class“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function_schema.h(396): message : 参见“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(79,17): warning C4244: “初始化”: 从“double”转换到“int64_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(129,22): warning C4244: “=”: 从“double”转换到“int64_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(361,34): warning C4251: “torch::autograd::profiler::RecordProfile::file_”: class“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”需要有 dll 接口由 struct“torch::autograd::profiler::RecordProfile”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(361): message : 参见“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(400): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(400,65): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::cb_”: class“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(378): message : 参见“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(401,47): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::profilerDisableOptions_”: class“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(340): message : 参见“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247,52): warning C4251: “torch::autograd::profiler::KinetoEvent::shapes_”: class“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247): message : 参见“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(248,43): warning C4251: “torch::autograd::profiler::KinetoEvent::stack_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(249,43): warning C4251: “torch::autograd::profiler::KinetoEvent::module_hierarchy_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(250,43): warning C4251: “torch::autograd::profiler::KinetoEvent::dtypes_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(253,15): warning C4251: “torch::autograd::profiler::KinetoEvent::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(264,15): warning C4251: “torch::autograd::profiler::KinetoEvent::backend_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(266,40): warning C4251: “torch::autograd::profiler::KinetoEvent::cuda_event_start_”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(267,40): warning C4251: “torch::autograd::profiler::KinetoEvent::cuda_event_end_”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(293,28): warning C4251: “torch::autograd::profiler::ProfilerResult::events_”: class“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(277): message : 参见“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(294,55): warning C4251: “torch::autograd::profiler::ProfilerResult::trace_”: struct“torch::profiler::impl::kineto::ActivityTraceWrapper”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\kineto_shim.h(99): message : 参见“torch::profiler::impl::kineto::ActivityTraceWrapper”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(378,15): warning C4251: “torch::autograd::profiler::python_tracer::PyTraceEvent::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::python_tracer::PyTraceEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\batchnorm.h(24,3): warning C4251: “torch::nn::BatchNormOptions::momentum_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::BatchNormOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\batchnorm.h(81,3): warning C4251: “torch::nn::functional::BatchNormFuncOptions::momentum_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::BatchNormFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(29,3): warning C4251: “torch::nn::EmbeddingOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(31,3): warning C4251: “torch::nn::EmbeddingOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(52,3): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(54,3): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(78,3): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(80,3): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(109,3): warning C4251: “torch::nn::EmbeddingBagOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(117,3): warning C4251: “torch::nn::EmbeddingBagOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(132,3): warning C4251: “torch::nn::EmbeddingBagOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(143,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(151,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(163,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(182,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(190,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(206,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(44,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(44,48): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(127,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(127,48): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(27,3): warning C4251: “torch::nn::FoldOptions::output_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(30,3): warning C4251: “torch::nn::FoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(34,3): warning C4251: “torch::nn::FoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(38,3): warning C4251: “torch::nn::FoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(41,3): warning C4251: “torch::nn::FoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(72,3): warning C4251: “torch::nn::UnfoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(76,3): warning C4251: “torch::nn::UnfoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(80,3): warning C4251: “torch::nn::UnfoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(83,3): warning C4251: “torch::nn::UnfoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(223,3): warning C4251: “torch::nn::functional::SoftmaxFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftmaxFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(263,3): warning C4251: “torch::nn::functional::SoftminFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftminFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(303,3): warning C4251: “torch::nn::functional::LogSoftmaxFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::LogSoftmaxFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(65,3): warning C4251: “torch::nn::UnflattenOptions::dimname_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(67,3): warning C4251: “torch::nn::UnflattenOptions::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(69,3): warning C4251: “torch::nn::UnflattenOptions::namedshape_”: class“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(56): message : 参见“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(654,18): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(676,16): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(686,26): warning C4244: “=”: 从“T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(23,3): warning C4251: “torch::nn::L1LossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::L1LossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(55,3): warning C4251: “torch::nn::KLDivLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”需要有 dll 接口由 struct“torch::nn::KLDivLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(49): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(90,3): warning C4251: “torch::nn::MSELossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MSELossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(122,3): warning C4251: “torch::nn::BCELossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCELossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(154,3): warning C4251: “torch::nn::HingeEmbeddingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HingeEmbeddingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(195,3): warning C4251: “torch::nn::MultiMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(228,3): warning C4251: “torch::nn::CosineEmbeddingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CosineEmbeddingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(262,3): warning C4251: “torch::nn::MultiLabelMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(296,3): warning C4251: “torch::nn::SoftMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SoftMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(333,3): warning C4251: “torch::nn::MultiLabelSoftMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelSoftMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(372,3): warning C4251: “torch::nn::TripletMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404,3): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::distance_function_”: class“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404): message : 参见“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(417,3): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(448,3): warning C4251: “torch::nn::CTCLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CTCLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(486,3): warning C4251: “torch::nn::SmoothL1LossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SmoothL1LossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(522,3): warning C4251: “torch::nn::HuberLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HuberLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(562,3): warning C4251: “torch::nn::PoissonNLLLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::PoissonNLLLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(593,3): warning C4251: “torch::nn::MarginRankingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MarginRankingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(629,3): warning C4251: “torch::nn::NLLLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::NLLLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(664,3): warning C4251: “torch::nn::CrossEntropyLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CrossEntropyLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(697,3): warning C4251: “torch::nn::BCEWithLogitsLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCEWithLogitsLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(20,3): warning C4251: “torch::nn::LayerNormOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::LayerNormOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(43,3): warning C4251: “torch::nn::functional::LayerNormFuncOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::LayerNormFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(133,3): warning C4251: “torch::nn::functional::NormalizeFuncOptions::out_”: class“c10::optional<at::Tensor>”需要有 dll 接口由 struct“torch::nn::functional::NormalizeFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\_backward_ops.h(43): message : 参见“c10::optional<at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(25): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(65): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(105,3): warning C4251: “torch::nn::ZeroPad2dOptions::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ZeroPad2dOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(125): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(172,3): warning C4251: “torch::nn::functional::PadFuncOptions::pad_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(175,3): warning C4251: “torch::nn::functional::PadFuncOptions::mode_”: class“c10::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(163): message : 参见“c10::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\padding.h(14,36): warning C4267: “初始化”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\pooling.h(965,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\pooling.h(966,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(23,3): warning C4251: “torch::nn::UpsampleOptions::size_”: class“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(157): message : 参见“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<T,std::allocator<T>>>”的引用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26,3): warning C4251: “torch::nn::UpsampleOptions::scale_factor_”: class“c10::optional<std::vector<T,std::allocator<T>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 参见“c10::optional<std::vector<T,std::allocator<T>>>”的声明
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(36,3): warning C4251: “torch::nn::UpsampleOptions::mode_”: class“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(30): message : 参见“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(42,3): warning C4251: “torch::nn::UpsampleOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(65,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::size_”: class“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(157): message : 参见“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(68,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::scale_factor_”: class“c10::optional<std::vector<T,std::allocator<T>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 参见“c10::optional<std::vector<T,std::allocator<T>>>”的声明
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(72,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::mode_”: class“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea,torch::enumtype::kNearestExact>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(55): message : 参见“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea,torch::enumtype::kNearestExact>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(83,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(94,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::recompute_scale_factor_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(24,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::mode_”: class“c10::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(20): message : 参见“c10::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(26,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::padding_mode_”: class“c10::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(21): message : 参见“c10::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(28,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\functional.h(96,12): warning C4251: “torch::nn::FunctionalImpl::function_”: class“std::function<at::Tensor (at::Tensor)>”需要有 dll 接口由 class“torch::nn::FunctionalImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\transforms\tensor.h(39): message : 参见“std::function<at::Tensor (at::Tensor)>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\adaptive.h(26,3): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossOptions::cutoffs_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::AdaptiveLogSoftmaxWithLossOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(72,24): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::cutoffs”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(82,10): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::head”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(84,14): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::tail”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(178,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(178,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(211,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(211,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(247,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(247,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(334,90): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(334,90): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(370,90): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(370,90): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(406,90): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(406,90): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(46): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<1,torch::nn::ReflectionPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(72): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<2,torch::nn::ReflectionPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(99): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<3,torch::nn::ReflectionPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(147): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<1,torch::nn::ReplicationPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(173): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<2,torch::nn::ReplicationPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(199): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<3,torch::nn::ReplicationPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(285): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<1,torch::nn::ConstantPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(311): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<2,torch::nn::ConstantPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(337): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<3,torch::nn::ConstantPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>::options”: struct“torch::nn::AvgPoolOptions<1>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(43): message : 参见“torch::nn::AvgPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(46): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>::options”: struct“torch::nn::AvgPoolOptions<2>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(51): message : 参见“torch::nn::AvgPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(73): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>::options”: struct“torch::nn::AvgPoolOptions<3>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(59): message : 参见“torch::nn::AvgPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(100): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>::options”: struct“torch::nn::MaxPoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(133): message : 参见“torch::nn::MaxPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(147): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>::options”: struct“torch::nn::MaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(141): message : 参见“torch::nn::MaxPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(178): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>::options”: struct“torch::nn::MaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(149): message : 参见“torch::nn::MaxPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(209): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(236): message : 参见“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(248): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(202): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(265): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(210): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(298): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(218): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(331): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(359): message : 参见“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(371): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(271): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(388): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(279): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(417): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(287): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(446): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(355): message : 参见“torch::nn::MaxUnpoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(494): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(363): message : 参见“torch::nn::MaxUnpoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(524): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(371): message : 参见“torch::nn::MaxUnpoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(554): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(602,30): warning C4251: “torch::nn::FractionalMaxPool2dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool2dImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(453): message : 参见“torch::nn::FractionalMaxPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(646,30): warning C4251: “torch::nn::FractionalMaxPool3dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool3dImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(461): message : 参见“torch::nn::FractionalMaxPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(674,20): warning C4251: “torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>::options”: struct“torch::nn::LPPoolOptions<1>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(511): message : 参见“torch::nn::LPPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(691): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(674,20): warning C4251: “torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>::options”: struct“torch::nn::LPPoolOptions<2>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(519): message : 参见“torch::nn::LPPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(720): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(23,3): warning C4251: “torch::nn::detail::RNNOptionsBase::mode_”: class“c10::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”需要有 dll 接口由 struct“torch::nn::detail::RNNOptionsBase”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(15): message : 参见“c10::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(68,3): warning C4251: “torch::nn::RNNOptions::nonlinearity_”: class“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(54): message : 参见“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(183,3): warning C4251: “torch::nn::RNNCellOptions::nonlinearity_”: class“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNCellOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(54): message : 参见“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(86): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(103): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(148): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(155): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<at::Tensor,at::Tensor>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(201): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(870,10): warning C4251: “torch::nn::MultiheadAttentionImpl::out_proj”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::MultiheadAttentionImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\anomaly_mode.h(59,15): warning C4251: “torch::autograd::AnomalyMetadata::traceback_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\anomaly_mode.h(60,25): warning C4251: “torch::autograd::AnomalyMetadata::parent_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(71,32): warning C4251: “torch::autograd::SavedVariable::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(79,23): warning C4251: “torch::autograd::SavedVariable::weak_grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(93,39): warning C4251: “torch::autograd::SavedVariable::hooks_”: class“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(41): message : 参见“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(96,25): warning C4251: “torch::autograd::SavedVariable::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(97,23): warning C4251: “torch::autograd::SavedVariable::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(105,60): warning C4251: “std::enable_shared_from_this<torch::autograd::Node>::_Wptr”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::Node>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(530,14): warning C4251: “torch::autograd::Node::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(533,13): warning C4251: “torch::autograd::Node::next_edges_”: class“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(39): message : 参见“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(537,36): warning C4251: “torch::autograd::Node::anomaly_metadata_”: class“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(537): message : 参见“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(539,49): warning C4251: “torch::autograd::Node::pre_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(427): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(541,50): warning C4251: “torch::autograd::Node::post_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(403): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(543,37): warning C4251: “torch::autograd::Node::input_metadata_”: class“c10::SmallVector<torch::autograd::InputMetadata,2>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(543): message : 参见“c10::SmallVector<torch::autograd::InputMetadata,2>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(194,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(201,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(209,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(215,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(289,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(105,47): warning C4251: “torch::autograd::AutogradContext::saved_data”: class“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(105): message : 参见“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(129,39): warning C4251: “torch::autograd::AutogradContext::non_differentiable_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(17): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(130,39): warning C4251: “torch::autograd::AutogradContext::dirty_inputs_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(17): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(131,47): warning C4251: “torch::autograd::AutogradContext::saved_variables_”: class“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(40): message : 参见“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(132,17): warning C4251: “torch::autograd::AutogradContext::to_save_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(138,23): warning C4251: “torch::autograd::AutogradContext::grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(155,24): warning C4251: “torch::autograd::VariableInfo::size”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::autograd::VariableInfo”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(36,3): warning C4251: “torch::nn::TransformerEncoderLayerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerEncoderLayerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(65,3): warning C4251: “torch::nn::TransformerDecoderLayerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerDecoderLayerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(60,24): warning C4251: “torch::nn::TransformerEncoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(63,12): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(66,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(69,12): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(72,15): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(74,15): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(77,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(79,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(138,22): warning C4251: “torch::nn::TransformerDecoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(141,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(144,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(147,22): warning C4251: “torch::nn::TransformerDecoderLayerImpl::multihead_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(150,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(153,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(156,10): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(159,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(162,10): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(165,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout3”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(168,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm3”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(28,5): warning C4251: “torch::nn::TransformerEncoderOptions::encoder_layer_”: class“torch::nn::TransformerEncoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(88): message : 参见“torch::nn::TransformerEncoderLayer”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(34,5): warning C4251: “torch::nn::TransformerEncoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(57,3): warning C4251: “torch::nn::TransformerDecoderOptions::decoder_layer_”: class“torch::nn::TransformerDecoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(187): message : 参见“torch::nn::TransformerDecoderLayer”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(63,3): warning C4251: “torch::nn::TransformerDecoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(59,16): warning C4251: “torch::nn::TransformerEncoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(62,15): warning C4251: “torch::nn::TransformerEncoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(122,16): warning C4251: “torch::nn::TransformerDecoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(125,15): warning C4251: “torch::nn::TransformerDecoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(49,3): warning C4251: “torch::nn::TransformerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(52,3): warning C4251: “torch::nn::TransformerOptions::custom_encoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(55,3): warning C4251: “torch::nn::TransformerOptions::custom_decoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformer.h(126,15): warning C4251: “torch::nn::TransformerImpl::encoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformer.h(129,15): warning C4251: “torch::nn::TransformerImpl::decoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(85,23): warning C4251: “torch::optim::OptimizerParamGroup::params_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(87,37): warning C4251: “torch::optim::OptimizerParamGroup::options_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(52): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(155,37): warning C4251: “torch::optim::Optimizer::param_groups_”: class“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(97): message : 参见“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(157,74): warning C4251: “torch::optim::Optimizer::state_”: class“ska::flat_hash_map<std::string,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
          with
          [
              K=std::string,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(142): message : 参见“ska::flat_hash_map<std::string,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=std::string,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(159,38): warning C4251: “torch::optim::Optimizer::defaults_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(52): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(24,3): warning C4251: “torch::optim::AdamOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(23): message : 参见“std::tuple<double,double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adamw.h(24,3): warning C4251: “torch::optim::AdamWOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamWOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(23): message : 参见“std::tuple<double,double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(20,3): warning C4251: “torch::optim::LBFGSOptions::max_eval_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(24,3): warning C4251: “torch::optim::LBFGSOptions::line_search_fn_”: class“c10::optional<std::string>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43,3): warning C4251: “torch::optim::LBFGSParamState::old_dirs_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(44,3): warning C4251: “torch::optim::LBFGSParamState::old_stps_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(45,3): warning C4251: “torch::optim::LBFGSParamState::ro_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46,3): warning C4251: “torch::optim::LBFGSParamState::al_”: class“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46): message : 参见“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(77,26): warning C4251: “torch::optim::LBFGS::_numel_cache”: class“c10::optional<int64_t>”需要有 dll 接口由 class“torch::optim::LBFGS”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\custom_operator.h(23): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Operator>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121,35): warning C4251: “caffe2::serialize::PyTorchStreamReader::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(122,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(123,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(124,41): warning C4251: “caffe2::serialize::PyTorchStreamReader::in_”: class“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(100): message : 参见“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(126,14): warning C4251: “caffe2::serialize::PyTorchStreamReader::reader_lock_”: class“std::mutex”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(160,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::files_written_”: class“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\torch\custom_class.h(491): message : 参见“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(161,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(162,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(163,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(164,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::padding_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(165,17): warning C4251: “caffe2::serialize::PyTorchStreamWriter::file_stream_”: class“std::basic_ofstream<char,std::char_traits<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(244): message : 参见“std::basic_ofstream<char,std::char_traits<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(166,46): warning C4251: “caffe2::serialize::PyTorchStreamWriter::writer_func_”: class“std::function<size_t (const void *,size_t)>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\output-archive.h(65): message : 参见“std::function<size_t (const void *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(380,16): warning C4251: “torch::jit::SharedParserData::head”: class“std::unique_ptr<torch::jit::TokenTrie,std::default_delete<torch::jit::TokenTrie>>”需要有 dll 接口由 struct“torch::jit::SharedParserData”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(145): message : 参见“std::unique_ptr<torch::jit::TokenTrie,std::default_delete<torch::jit::TokenTrie>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(406,1): warning C4267: “参数”: 从“size_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(491,34): warning C4244: “参数”: 从“const int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(14,54): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“torch::jit::ErrorReport”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(14): message : 参见“torch::jit::ErrorReport”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(41,29): warning C4251: “torch::jit::ErrorReport::ss”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(241): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(42,20): warning C4251: “torch::jit::ErrorReport::context”: struct“torch::jit::OwnedSourceRange”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(241): message : 参见“torch::jit::OwnedSourceRange”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(43,23): warning C4251: “torch::jit::ErrorReport::the_message”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(44,21): warning C4251: “torch::jit::ErrorReport::error_stack”: class“std::vector<torch::jit::Call,std::allocator<torch::jit::Call>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(44): message : 参见“std::vector<torch::jit::Call,std::allocator<torch::jit::Call>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\schema_matching.h(29): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::NamedValue>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(29,57): warning C4251: “std::enable_shared_from_this<torch::jit::SugaredValue>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::jit::SugaredValue>”的客户端使用
          with
          [
              _Ty=torch::jit::SugaredValue
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::SugaredValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(222,29): warning C4251: “torch::jit::BuiltinFunction::self”: class“c10::optional<torch::jit::NamedValue>”需要有 dll 接口由 struct“torch::jit::BuiltinFunction”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\schema_matching.h(29): message : 参见“c10::optional<torch::jit::NamedValue>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(301,46): warning C4251: “torch::jit::SugaredTupleValue::tup_”: class“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”需要有 dll 接口由 struct“torch::jit::SugaredTupleValue”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(66): message : 参见“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(335,15): warning C4251: “torch::jit::BuiltinModule::name”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::BuiltinModule”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(338,26): warning C4251: “torch::jit::BuiltinModule::version”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::BuiltinModule”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(364,16): warning C4251: “torch::jit::ClassValue::type_”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 struct“torch::jit::ClassValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\custom_class.h(16): message : 参见“std::shared_ptr<c10::ClassType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(381,16): warning C4251: “torch::jit::NamedTupleConstructor::type_”: class“std::shared_ptr<c10::TupleType>”需要有 dll 接口由 struct“torch::jit::NamedTupleConstructor”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1036): message : 参见“std::shared_ptr<c10::TupleType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(542,11): warning C4251: “torch::jit::CastValue::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“torch::jit::CastValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(572,14): warning C4251: “torch::jit::TensorCastValue::self_”: struct“torch::jit::NamedValue”需要有 dll 接口由 struct“torch::jit::TensorCastValue”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\named_value.h(16): message : 参见“torch::jit::NamedValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(594,19): warning C4251: “torch::jit::MagicMethod::base_value_”: class“std::shared_ptr<torch::jit::SugaredValue>”需要有 dll 接口由 struct“torch::jit::MagicMethod”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(38): message : 参见“std::shared_ptr<torch::jit::SugaredValue>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(595,15): warning C4251: “torch::jit::MagicMethod::desugared_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::MagicMethod”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(656,26): warning C4251: “torch::jit::RangeValue::static_len_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::RangeValue”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(719,26): warning C4251: “torch::jit::IterableTree::unroll_length_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::IterableTree”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(720,32): warning C4251: “torch::jit::IterableTree::children_”: class“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”需要有 dll 接口由 struct“torch::jit::IterableTree”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(66): message : 参见“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(786,15): warning C4251: “torch::jit::ExceptionValue::message_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ExceptionValue”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(805,15): warning C4251: “torch::jit::SugaredEnumClass::enum_type_”: class“std::shared_ptr<c10::EnumType>”需要有 dll 接口由 struct“torch::jit::SugaredEnumClass”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1471): message : 参见“std::shared_ptr<c10::EnumType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\script_type_parser.h(48,15): warning C4251: “torch::jit::ScriptTypeParser::resolver_”: class“std::shared_ptr<torch::jit::Resolver>”需要有 dll 接口由 class“torch::jit::ScriptTypeParser”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(12): message : 参见“std::shared_ptr<torch::jit::Resolver>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(233,44): warning C4251: “torch::jit::Pickler::writer_”: class“std::function<void (const char *,size_t)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(124): message : 参见“std::function<void (const char *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(240,21): warning C4251: “torch::jit::Pickler::stack_”: class“std::vector<char,std::allocator<char>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize.h(77): message : 参见“std::vector<char,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252,45): warning C4251: “torch::jit::Pickler::memoized_ivalue_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(258,23): warning C4251: “torch::jit::Pickler::memoized_ivalues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(260,63): warning C4251: “torch::jit::Pickler::type_renamer_”: class“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(131): message : 参见“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(267,49): warning C4251: “torch::jit::Pickler::get_tensor_id_”: class“std::function<std::string (const at::Tensor &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(133): message : 参见“std::function<std::string (const at::Tensor &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(271,27): warning C4251: “torch::jit::Pickler::tensor_data_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(272,45): warning C4251: “torch::jit::Pickler::memoized_storage_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274,45): warning C4251: “torch::jit::Pickler::memoized_globals_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(275,45): warning C4251: “torch::jit::Pickler::memoized_strings_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(276,45): warning C4251: “torch::jit::Pickler::memoized_devices_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(138,40): warning C4251: “torch::jit::Unpickler::reader_”: class“std::function<size_t (char *,size_t)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(38): message : 参见“std::function<size_t (char *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(144,23): warning C4251: “torch::jit::Unpickler::stack_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(148,42): warning C4251: “torch::jit::Unpickler::globals_”: class“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(148): message : 参见“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(149,23): warning C4251: “torch::jit::Unpickler::memo_table_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(150,23): warning C4251: “torch::jit::Unpickler::marks_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(151,29): warning C4251: “torch::jit::Unpickler::tensor_table_”: class“c10::ArrayRef<at::Tensor>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\ATen\MethodOperators.h(34): message : 参见“c10::ArrayRef<at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(157,49): warning C4251: “torch::jit::Unpickler::type_cache_”: class“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\ATen\core\type_factory.h(50): message : 参见“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(160,16): warning C4251: “torch::jit::Unpickler::type_resolver_”: class“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(14): message : 参见“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(161,13): warning C4251: “torch::jit::Unpickler::obj_loader_”: class“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (c10::StrongTypePtr,c10::IValue)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(16): message : 参见“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (c10::StrongTypePtr,c10::IValue)>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(164,50): warning C4251: “torch::jit::Unpickler::read_record_”: class“std::function<c10::DataPtr (const std::string &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(56): message : 参见“std::function<c10::DataPtr (const std::string &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(165,29): warning C4251: “torch::jit::Unpickler::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(175,50): warning C4251: “torch::jit::Unpickler::storage_context_”: class“std::shared_ptr<torch::jit::DeserializationStorageContext>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(60): message : 参见“std::shared_ptr<torch::jit::DeserializationStorageContext>”的声明
C:\Program Files\libtorch\include\c10\util\SmallVector.h(104,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(102): message : 在编译 类 模板 成员函数“void c10::SmallVectorBase<unsigned int>::set_size(size_t)”时
C:\Program Files\libtorch\include\c10\util\SmallVector.h(481): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorBase<unsigned int>::set_size(size_t)”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(125): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorBase<unsigned int>”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(528): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorTemplateCommon<T,void>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(636): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorTemplateBase<T,true>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1281): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorImpl<T>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1769): message : 查看对正在编译的 类 模板 实例化“c10::SmallVector<int64_t,5>”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(69,26): warning C4267: “初始化”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(68): message : 在编译 类 模板 成员函数“c10::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”时
C:\Program Files\libtorch\include\c10\util\SmallVector.h(139): message : 查看对正在编译的函数 模板 实例化“c10::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(638,1): warning C4267: “参数”: 从“size_t”转换到“T”，可能丢失数据
          with
          [
              T=int32_t
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(349): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(349): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,double>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<double>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=double
          ]
          and
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,double>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(520,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(514): message : 在编译 类 模板 成员函数“void c10::SmallVectorTemplateBase<T,false>::takeAllocationForGrow(T *,size_t)”时
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(496): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorTemplateBase<T,false>::takeAllocationForGrow(T *,size_t)”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(492): message : 在编译 类 模板 成员函数“void c10::SmallVectorTemplateBase<T,false>::grow(size_t)”时
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1172): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorTemplateBase<T,false>::grow(size_t)”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1127): message : 在编译 类 模板 成员函数“c10::SmallVectorImpl<T> &c10::SmallVectorImpl<T>::operator =(c10::SmallVectorImpl<T> &&)”时
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1341): message : 查看对正在编译的函数 模板 实例化“c10::SmallVectorImpl<T> &c10::SmallVectorImpl<T>::operator =(c10::SmallVectorImpl<T> &&)”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1281): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorImpl<T>”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541): message : 查看对正在编译的 类 模板 实例化“c10::SmallVector<at::OperandInfo,4>”的引用
C:\Program Files\libtorch\include\c10\util\complex.h(173,14): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\complex.h(173,34): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
  DepthSensing.cpp
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\KinectSensor.h(12,10): fatal error C1083: 无法打开包括文件: “NuiApi.h”: No such file or directory
  DX11CustomRenderTarget.cpp
  DX11PhongLighting.cpp
  DX11QuadDrawer.cpp
  DX11RayIntervalSplatting.cpp
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  正在编译...
  DX11RGBDRenderer.cpp
  DX11Utils.cpp
  GlobalAppState.cpp
  GlobalCameraTrackingState.cpp
  ICPErrorLog.cpp
  IntelSensor.cpp
  KinectOneSensor.cpp
  KinectSensor.cpp
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\KinectSensor.h(12,10): fatal error C1083: 无法打开包括文件: “NuiApi.h”: No such file or directory
  NetworkSensor.cpp
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\KinectSensor.h(12,10): fatal error C1083: 无法打开包括文件: “NuiApi.h”: No such file or directory
  NetworkServer.cpp
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\NetworkServer.h(105,24): warning C4996: 'inet_ntoa': Use inet_ntop() or InetNtop() instead or define _WINSOCK_DEPRECATED_NO_WARNINGS to disable deprecated API warnings
  PrimeSenseSensor.cpp
  RealSenseSensor.cpp
  RGBDSensor.cpp
  Hungarian.cpp
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\hungarian-algorithm-cpp\Hungarian.cpp(396,1): fatal error C1010: 在查找预编译头时遇到意外的文件结尾。是否忘记了向源中添加“#include "stdafx.h"”?
  Scan2CAD.cpp
C:\Program Files\libtorch\include\c10\macros\Macros.h(142,20): warning C4067: 预处理器指令后有意外标记 - 应输入换行符
C:\Program Files\libtorch\include\c10\util\Exception.h(28,45): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 class“c10::Error”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(28): message : 参见“c10::Error”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(30,15): warning C4251: “c10::Error::msg_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(35,28): warning C4251: “c10::Error::context_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“c10::Error”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(40,15): warning C4251: “c10::Error::backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(47,15): warning C4251: “c10::Error::what_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Exception.h(48,15): warning C4251: “c10::Error::what_without_backtrace_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::Error”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(56,34): warning C4251: “c10::ThreadLocalDebugInfo::info_”: class“std::shared_ptr<c10::DebugInfoBase>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(47): message : 参见“std::shared_ptr<c10::DebugInfoBase>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(58,41): warning C4251: “c10::ThreadLocalDebugInfo::parent_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::ThreadLocalDebugInfo”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(82,41): warning C4251: “c10::DebugInfoGuard::prev_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“c10::DebugInfoGuard”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\c10\core\Allocator.h(22,30): warning C4251: “c10::DataPtr::ptr_”: class“c10::detail::UniqueVoidPtr”需要有 dll 接口由 class“c10::DataPtr”的客户端使用
C:\Program Files\libtorch\include\c10\util\UniqueVoidPtr.h(38): message : 参见“c10::detail::UniqueVoidPtr”的声明
C:\Program Files\libtorch\include\c10\core\Allocator.h(186,53): warning C4251: “c10::InefficientStdFunctionContext::ptr_”: class“std::unique_ptr<void,std::function<void (void *)>>”需要有 dll 接口由 struct“c10::InefficientStdFunctionContext”的客户端使用
C:\Program Files\libtorch\include\c10\core\Allocator.h(186): message : 参见“std::unique_ptr<void,std::function<void (void *)>>”的声明
C:\Program Files\libtorch\include\c10\util\intrusive_ptr.h(82,31): warning C4251: “c10::intrusive_ptr_target::refcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\util\intrusive_ptr.h(83,31): warning C4251: “c10::intrusive_ptr_target::weakcount_”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 class“c10::intrusive_ptr_target”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(61,18): warning C4251: “c10::impl::LocalDispatchKeySet::included_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(62,18): warning C4251: “c10::impl::LocalDispatchKeySet::excluded_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::impl::LocalDispatchKeySet”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(99,18): warning C4251: “c10::impl::IncludeDispatchKeyGuard::include_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::IncludeDispatchKeyGuard”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\impl\LocalDispatchKeySet.h(117,18): warning C4251: “c10::impl::ExcludeDispatchKeyGuard::exclude_”: class“c10::DispatchKeySet”需要有 dll 接口由 class“c10::impl::ExcludeDispatchKeyGuard”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(188,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(191,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(194,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(197,36): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(201,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(204,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(207,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(210,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(216,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(219,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(222,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(225,36): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(229,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(232,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(235,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\BFloat16-inl.h(238,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(192,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(195,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(198,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(201,32): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(205,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(208,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(211,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(214,28): warning C4244: “参数”: 从“int”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(220,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(223,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(226,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(229,32): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(233,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(236,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(239,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\util\Half-inl.h(242,28): warning C4244: “参数”: 从“int64_t”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\c10\core\Storage.h(166,35): warning C4251: “c10::Storage::storage_impl_”: class“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::Storage”的客户端使用
          with
          [
              TTarget=c10::StorageImpl
          ]
C:\Program Files\libtorch\include\c10\core\Storage.h(12): message : 参见“c10::intrusive_ptr<c10::StorageImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::StorageImpl
          ]
C:\Program Files\libtorch\include\c10\util\typeid.h(65,67): warning C4251: “c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>::id_”: struct“c10::util::type_index”需要有 dll 接口由 class“c10::IdWrapper<caffe2::TypeIdentifier,c10::util::type_index>”的客户端使用
C:\Program Files\libtorch\include\c10\util\TypeIndex.h(57): message : 参见“c10::util::type_index”的声明
C:\Program Files\libtorch\include\c10\util\typeid.h(511,32): warning C4251: “caffe2::TypeMeta::nextTypeIndex”: struct“std::atomic<unsigned short>”需要有 dll 接口由 class“caffe2::TypeMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2750): message : 参见“std::atomic<unsigned short>”的声明
C:\Program Files\libtorch\include\c10\util\logging_is_not_google_glog.h(43,21): warning C4251: “c10::MessageLogger::stream_”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“c10::MessageLogger”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(241): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(435,38): warning C4251: “c10::VariableVersion::version_counter_”: class“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“c10::VariableVersion”的客户端使用
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(435): message : 参见“c10::intrusive_ptr<c10::VariableVersion::VersionCounter,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::VariableVersion::VersionCounter
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2453,47): warning C4251: “c10::TensorImpl::autograd_meta_”: class“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(184): message : 参见“std::unique_ptr<c10::AutogradMetaInterface,std::default_delete<c10::AutogradMetaInterface>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2456,50): warning C4251: “c10::TensorImpl::named_tensor_meta_”: class“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(354): message : 参见“std::unique_ptr<c10::NamedTensorMetaInterface,std::default_delete<c10::NamedTensorMetaInterface>>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2482,37): warning C4251: “c10::TensorImpl::pyobj_interpreter_”: struct“std::atomic<c10::impl::PyInterpreter *>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2482): message : 参见“std::atomic<c10::impl::PyInterpreter *>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2522,30): warning C4251: “c10::TensorImpl::device_opt_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(2614,18): warning C4251: “c10::TensorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::TensorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(82,14): warning C4251: “c10::GeneratorImpl::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(98,18): warning C4251: “c10::GeneratorImpl::key_set_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::GeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\ATen\core\Generator.h(133,42): warning C4251: “at::Generator::impl_”: class“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“at::Generator”的客户端使用
          with
          [
              TTarget=c10::GeneratorImpl
          ]
C:\Program Files\libtorch\include\c10\core\GeneratorImpl.h(71): message : 参见“c10::intrusive_ptr<c10::GeneratorImpl,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::GeneratorImpl
          ]
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(34,15): warning C4251: “at::CPUGeneratorImpl::engine_”: class“at::mt19937_engine”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\core\MT19937RNGEngine.h(110): message : 参见“at::mt19937_engine”的声明
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(35,24): warning C4251: “at::CPUGeneratorImpl::next_float_normal_sample_”: class“c10::optional<float>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(25): message : 参见“c10::optional<float>”的声明
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(36,25): warning C4251: “at::CPUGeneratorImpl::next_double_normal_sample_”: class“c10::optional<double>”需要有 dll 接口由 struct“at::CPUGeneratorImpl”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24,45): warning C4251: “at::DeprecatedTypePropertiesRegistry::registry”: class“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”需要有 dll 接口由 class“at::DeprecatedTypePropertiesRegistry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\DeprecatedTypePropertiesRegistry.h(24): message : 参见“std::unique_ptr<at::DeprecatedTypeProperties,std::default_delete<at::DeprecatedTypeProperties>>”的声明
C:\Program Files\libtorch\include\ATen\Context.h(239,18): warning C4251: “at::Context::thc_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xcall_once.h(20): message : 参见“std::once_flag”的声明
C:\Program Files\libtorch\include\ATen\Context.h(240,18): warning C4251: “at::Context::thh_init”: struct“std::once_flag”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xcall_once.h(20): message : 参见“std::once_flag”的声明
C:\Program Files\libtorch\include\ATen\Context.h(257,30): warning C4251: “at::Context::quantized_engine”: class“c10::optional<c10::QEngine>”需要有 dll 接口由 class“at::Context”的客户端使用
C:\Program Files\libtorch\include\ATen\Context.h(257): message : 参见“c10::optional<c10::QEngine>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineDeviceGuard.h(427): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>>”的引用
C:\Program Files\libtorch\include\c10\core\DeviceGuard.h(178): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalDeviceGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineDeviceGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(193,5): warning C4251: “c10::Scalar::v”: union“c10::Scalar::v_t”需要有 dll 接口由 class“c10::Scalar”的客户端使用
C:\Program Files\libtorch\include\c10\core\Scalar.h(188): message : 参见“c10::Scalar::v_t”的声明
C:\Program Files\libtorch\include\ATen\core\NamedTensor.h(69,24): warning C4251: “at::NamedTensorMeta::names_”: class“std::vector<at::Dimname,std::allocator<at::Dimname>>”需要有 dll 接口由 struct“at::NamedTensorMeta”的客户端使用
C:\Program Files\libtorch\include\ATen\core\NamedTensor.h(35): message : 参见“std::vector<at::Dimname,std::allocator<at::Dimname>>”的声明
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(785,55): warning C4251: “at::TensorBase::impl_”: class“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”需要有 dll 接口由 class“at::TensorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(94): message : 参见“c10::intrusive_ptr<c10::TensorImpl,c10::UndefinedTensorImpl>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(933): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::TensorBase>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::TensorBase
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBody.h(502): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Tensor>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Tensor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\ATen\core\TensorBody.h(576): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::Generator>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::Generator
          ]
C:\Program Files\libtorch\include\ATen\TensorGeometry.h(56,24): warning C4251: “at::TensorGeometry::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\ATen\TensorGeometry.h(57,24): warning C4251: “at::TensorGeometry::strides_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“at::TensorGeometry”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(81,15): warning C4251: “at::TensorMaker::sizes_”: class“c10::ArrayRef<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\util\ArrayRef.h(366): message : 参见“c10::ArrayRef<int64_t>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(82,25): warning C4251: “at::TensorMaker::strides_”: class“c10::optional<c10::IntArrayRef>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\std_ops.h(65): message : 参见“c10::optional<c10::IntArrayRef>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(83,21): warning C4251: “at::TensorMaker::storage_offset_”: class“c10::optional<int64_t>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(84,30): warning C4251: “at::TensorMaker::deleter_”: class“std::function<void (void *)>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\core\Allocator.h(186): message : 参见“std::function<void (void *)>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(85,41): warning C4251: “at::TensorMaker::ctx_”: class“std::unique_ptr<void,c10::DeleterFnPtr>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\util\UniqueVoidPtr.h(42): message : 参见“std::unique_ptr<void,c10::DeleterFnPtr>”的声明
C:\Program Files\libtorch\include\ATen\ops\from_blob.h(86,20): warning C4251: “at::TensorMaker::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“at::TensorMaker”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(125,16): warning C4251: “at::OperandInfo::stride_bytes”: class“c10::SmallVector<int64_t,6>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(110): message : 参见“c10::SmallVector<int64_t,6>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(133,25): warning C4251: “at::OperandInfo::device”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(190,31): warning C4251: “at::OperandInfo::tensor_base_”: class“c10::MaybeOwned<at::TensorBase>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(134): message : 参见“c10::MaybeOwned<at::TensorBase>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(191,31): warning C4251: “at::OperandInfo::original_tensor_base_”: class“c10::MaybeOwned<at::TensorBase>”需要有 dll 接口由 struct“at::OperandInfo”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(134): message : 参见“c10::MaybeOwned<at::TensorBase>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(504,13): warning C4251: “at::TensorIteratorBase::shape_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(514,13): warning C4251: “at::TensorIteratorBase::perm_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(527,13): warning C4251: “at::TensorIteratorBase::view_offsets_”: class“c10::SmallVector<int64_t,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1767): message : 参见“c10::SmallVector<int64_t,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(530,14): warning C4251: “at::TensorIteratorBase::names_”: class“c10::SmallVector<at::Dimname,5>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(27): message : 参见“c10::SmallVector<at::Dimname,5>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541,31): warning C4251: “at::TensorIteratorBase::operands_”: class“c10::SmallVector<at::OperandInfo,4>”需要有 dll 接口由 struct“at::TensorIteratorBase”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541): message : 参见“c10::SmallVector<at::OperandInfo,4>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(238,20): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\TensorIterator.h(241,24): warning C4267: “return”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\TensorIterator.h(762,47): warning C4251: “at::TensorIteratorConfig::tensors_”: class“c10::SmallVector<c10::MaybeOwned<at::TensorBase>,4>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(762): message : 参见“c10::SmallVector<c10::MaybeOwned<at::TensorBase>,4>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(766): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::DimVector>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::DimVector
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(766,28): warning C4251: “at::TensorIteratorConfig::static_shape_”: class“c10::optional<at::DimVector>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(162): message : 参见“c10::optional<at::DimVector>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(767,29): warning C4251: “at::TensorIteratorConfig::static_dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(768,25): warning C4251: “at::TensorIteratorConfig::static_device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“at::TensorIteratorConfig”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\TensorIterator.h(804,50): warning C4251: “at::SplitUntil32Bit::iterator::vec”: class“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”需要有 dll 接口由 struct“at::SplitUntil32Bit::iterator”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorIterator.h(804): message : 参见“std::vector<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>,std::allocator<std::unique_ptr<at::TensorIterator,std::default_delete<at::TensorIterator>>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(443): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::string>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::string
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(642,92): warning C4251: “std::enable_shared_from_this<c10::SharedType>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<c10::SharedType>”的客户端使用
          with
          [
              _Ty=c10::SharedType
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=c10::SharedType
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(691): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::QualifiedName>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::QualifiedName
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(691,32): warning C4251: “c10::NamedType::name_”: class“c10::optional<c10::QualifiedName>”需要有 dll 接口由 struct“c10::NamedType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(674): message : 参见“c10::optional<c10::QualifiedName>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1064,11): warning C4251: “c10::IValue::payload”: union“c10::IValue::Payload”需要有 dll 接口由 struct“c10::IValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1026): message : 参见“c10::IValue::Payload”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1182,11): warning C4251: “c10::WeakIValue::payload”: union“c10::IValue::Payload::TriviallyCopyablePayload”需要有 dll 接口由 struct“c10::WeakIValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1032): message : 参见“c10::IValue::Payload::TriviallyCopyablePayload”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1195,48): warning C4251: “c10::StrongTypePtr::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1192): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1196,11): warning C4251: “c10::StrongTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::StrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1209,46): warning C4251: “c10::WeakTypePtr::cu_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::WeakTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1210,11): warning C4251: “c10::WeakTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::WeakTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1241): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::shared_ptr<torch::jit::CompilationUnit>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1242): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::weak_ptr<torch::jit::CompilationUnit>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::weak_ptr<torch::jit::CompilationUnit>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1262,31): warning C4251: “c10::WeakOrStrongTypePtr::cu_”: struct“c10::WeakOrStrongCompilationUnit”需要有 dll 接口由 struct“c10::WeakOrStrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1214): message : 参见“c10::WeakOrStrongCompilationUnit”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1263,11): warning C4251: “c10::WeakOrStrongTypePtr::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::WeakOrStrongTypePtr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(177,26): warning C4251: “c10::UnionType::types_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::UnionType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(234,11): warning C4251: “c10::OptionalType::contained_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::OptionalType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(285,25): warning C4251: “c10::Stride::stride_index_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(271): message : 参见“c10::optional<size_t>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(286,23): warning C4251: “c10::Stride::contiguous_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(287,25): warning C4251: “c10::Stride::stride_”: class“c10::optional<size_t>”需要有 dll 接口由 struct“c10::Stride”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(271): message : 参见“c10::optional<size_t>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(353,30): warning C4251: “c10::ShapeSymbol::num_symbols”: struct“std::atomic<unsigned __int64>”需要有 dll 接口由 struct“c10::ShapeSymbol”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2756): message : 参见“std::atomic<unsigned __int64>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(460): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(460,45): warning C4251: “c10::SymbolicShape::dims_”: class“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”需要有 dll 接口由 struct“c10::SymbolicShape”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(434): message : 参见“c10::optional<std::vector<c10::ShapeSymbol,std::allocator<c10::ShapeSymbol>>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(797,33): warning C4251: “c10::TensorType::scalar_type_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(798,29): warning C4251: “c10::TensorType::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(545): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>>”的引用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(800): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<c10::Stride>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<c10::Stride>,std::allocator<c10::optional<c10::Stride>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(800,24): warning C4251: “c10::TensorType::strides_”: struct“c10::VaryingShape<c10::Stride>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(570): message : 参见“c10::VaryingShape<c10::Stride>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(801,23): warning C4251: “c10::TensorType::requires_grad_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(813,23): warning C4251: “c10::TensorType::undefined_”: class“c10::optional<bool>”需要有 dll 接口由 struct“c10::TensorType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(545): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>>”的引用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(591): message : 查看对正在编译的 类 模板 实例化“c10::VaryingShape<int64_t>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::optional<int64_t>,std::allocator<c10::optional<int64_t>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(704): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<int64_t,std::allocator<int64_t>>
          ]
C:\Program Files\libtorch\include\ATen\core\jit_type.h(821,62): warning C4251: “c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::ListType,c10::ListType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(944,24): warning C4251: “c10::DictType::types”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::DictType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(952,66): warning C4251: “c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::FutureType,c10::FutureType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(994,62): warning C4251: “c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>::elem”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::SingleElementType<c10::TypeKind::RRefType,c10::RRefType>”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1124,24): warning C4251: “c10::TupleType::elements_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1126,35): warning C4251: “c10::TupleType::schema_”: class“std::shared_ptr<c10::FunctionSchema>”需要有 dll 接口由 struct“c10::TupleType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1084): message : 参见“std::shared_ptr<c10::FunctionSchema>”的声明
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1930,48): warning C4251: “c10::InterfaceType::methods_”: class“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”需要有 dll 接口由 struct“c10::InterfaceType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1930): message : 参见“std::shared_ptr<std::vector<c10::FunctionSchema,std::allocator<c10::FunctionSchema>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineStreamGuard.h(197): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>>”的引用
C:\Program Files\libtorch\include\c10\core\StreamGuard.h(139): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineOptionalStreamGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::InlineStreamGuard<c10::impl::VirtualGuardImpl>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\core\impl\InlineStreamGuard.h(232): message : 查看对正在编译的 类 模板 实例化“c10::optional<T>”的引用
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\c10\core\StreamGuard.h(162): message : 查看对正在编译的 类 模板 实例化“c10::impl::InlineMultiStreamGuard<c10::impl::VirtualGuardImpl>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::VirtualGuardImpl
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(230,21): warning C4251: “c10::ivalue::ConstantString::str_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::ConstantString”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(598,24): warning C4251: “c10::ivalue::Tuple::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Tuple”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(787,62): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“c10::ivalue::Future::FutureError”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(787): message : 参见“c10::ivalue::Future::FutureError”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(797,17): warning C4251: “c10::ivalue::Future::FutureError::error_msg”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ivalue::Future::FutureError”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1287,22): warning C4251: “c10::ivalue::Future::mutex_”: class“std::mutex”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1288,20): warning C4251: “c10::ivalue::Future::completed_”: struct“std::atomic<bool>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\atomic(2744): message : 参见“std::atomic<bool>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1289,27): warning C4251: “c10::ivalue::Future::finished_cv_”: class“std::condition_variable”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(570): message : 参见“std::condition_variable”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1292,11): warning C4251: “c10::ivalue::Future::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1293,45): warning C4251: “c10::ivalue::Future::callbacks_”: class“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1293): message : 参见“std::vector<std::function<void (c10::ivalue::Future &)>,std::allocator<std::function<void (c10::ivalue::Future &)>>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1294,22): warning C4251: “c10::ivalue::Future::eptr_”: class“std::exception_ptr”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\exception(210): message : 参见“std::exception_ptr”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1298,37): warning C4251: “c10::ivalue::Future::impl_”: class“c10::impl::VirtualGuardImpl”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\c10\core\impl\VirtualGuardImpl.h(12): message : 参见“c10::impl::VirtualGuardImpl”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1303,25): warning C4251: “c10::ivalue::Future::currentDevice_”: class“c10::optional<c10::Device>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1309,27): warning C4251: “c10::ivalue::Future::events_”: class“std::vector<c10::Event,std::allocator<c10::Event>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1309): message : 参见“std::vector<c10::Event,std::allocator<c10::Event>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1313,28): warning C4251: “c10::ivalue::Future::storages_”: class“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(834): message : 参见“std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>”的声明
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1321,34): warning C4251: “c10::ivalue::Future::devices_”: class“std::vector<c10::Device,std::allocator<c10::Device>>”需要有 dll 接口由 struct“c10::ivalue::Future”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(774): message : 参见“std::vector<c10::Device,std::allocator<c10::Device>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(834): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<c10::ivalue::Future::WeakStorage,std::allocator<c10::ivalue::Future::WeakStorage>>
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1452,23): warning C4251: “c10::ivalue::Object::slots_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ivalue::Object”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(106,54): warning C4251: “torch::autograd::ForwardADLevel::grads_”: class“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(106): message : 参见“std::unordered_set<std::shared_ptr<torch::autograd::ForwardGrad>,std::hash<std::shared_ptr<torch::autograd::ForwardGrad>>,std::equal_to<std::shared_ptr<torch::autograd::ForwardGrad>>,std::allocator<std::shared_ptr<torch::autograd::ForwardGrad>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(107,16): warning C4251: “torch::autograd::ForwardADLevel::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardADLevel”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(112,74): warning C4251: “std::enable_shared_from_this<torch::autograd::ForwardGrad>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::ForwardGrad>”的客户端使用
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::autograd::ForwardGrad
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(191,46): warning C4251: “torch::autograd::ForwardGrad::content_”: class“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(191): message : 参见“std::unordered_map<uint64_t,at::Tensor,std::hash<uint64_t>,std::equal_to<uint64_t>,std::allocator<std::pair<const uint64_t,at::Tensor>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(192,24): warning C4251: “torch::autograd::ForwardGrad::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::ForwardGrad”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\TensorNames.h(40,21): warning C4251: “at::namedinference::TensorName::origin_”: class“c10::ArrayRef<at::Dimname>”需要有 dll 接口由 struct“at::namedinference::TensorName”的客户端使用
C:\Program Files\libtorch\include\ATen\core\Dimname.h(36): message : 参见“c10::ArrayRef<at::Dimname>”的声明
C:\Program Files\libtorch\include\ATen\TensorNames.h(70,17): warning C4251: “at::namedinference::TensorNames::names_”: class“c10::SmallVector<at::namedinference::TensorName,10>”需要有 dll 接口由 struct“at::namedinference::TensorNames”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorNames.h(49): message : 参见“c10::SmallVector<at::namedinference::TensorName,10>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(191,15): warning C4251: “torch::autograd::AutogradMeta::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(194,25): warning C4251: “torch::autograd::AutogradMeta::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(195,23): warning C4251: “torch::autograd::AutogradMeta::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(206,32): warning C4251: “torch::autograd::AutogradMeta::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(208,49): warning C4251: “torch::autograd::AutogradMeta::hooks_”: class“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(175): message : 参见“std::vector<std::shared_ptr<torch::autograd::FunctionPreHook>,std::allocator<std::shared_ptr<torch::autograd::FunctionPreHook>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(209,31): warning C4251: “torch::autograd::AutogradMeta::cpp_hooks_list_”: class“std::shared_ptr<torch::autograd::hooks_list>”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\cpp_hook.h(11): message : 参见“std::shared_ptr<torch::autograd::hooks_list>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(230,22): warning C4251: “torch::autograd::AutogradMeta::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::AutogradMeta”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(298,44): warning C4251: “torch::autograd::ViewInfo::view_fn_”: class“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”需要有 dll 接口由 struct“torch::autograd::ViewInfo”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(298): message : 参见“std::function<torch::autograd::Variable (const torch::autograd::Variable &)>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::autograd::ViewInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::autograd::ViewInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525,27): warning C4251: “torch::autograd::DifferentiableViewMeta::backward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(526,27): warning C4251: “torch::autograd::DifferentiableViewMeta::forward_info_”: class“c10::optional<torch::autograd::ViewInfo>”需要有 dll 接口由 struct“torch::autograd::DifferentiableViewMeta”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(525): message : 参见“c10::optional<torch::autograd::ViewInfo>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(162): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::IValue>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::IValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(26): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::AliasInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::AliasInfo
          ]
C:\Program Files\libtorch\include\ATen\core\boxing\KernelFunction.h(266,38): warning C4251: “c10::KernelFunction::functor_”: class“c10::intrusive_ptr<c10::OperatorKernel,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 class“c10::KernelFunction”的客户端使用
          with
          [
              TTarget=c10::OperatorKernel
          ]
C:\Program Files\libtorch\include\ATen\core\boxing\KernelFunction.h(266): message : 参见“c10::intrusive_ptr<c10::OperatorKernel,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::OperatorKernel
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\CppSignature.h(57,21): warning C4251: “c10::impl::CppSignature::signature_”: class“std::type_index”需要有 dll 接口由 class“c10::impl::CppSignature”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\typeindex(25): message : 参见“std::type_index”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::either<c10::OperatorName,c10::FunctionSchema>
          ]
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434,62): warning C4251: “c10::RegisterOperators::Options::schemaOrName_”: class“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(434): message : 参见“c10::optional<c10::either<c10::OperatorName,c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(436,43): warning C4251: “c10::RegisterOperators::Options::kernels”: class“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(436): message : 参见“std::vector<c10::RegisterOperators::Options::KernelRegistrationConfig,std::allocator<c10::RegisterOperators::Options::KernelRegistrationConfig>>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(437,33): warning C4251: “c10::RegisterOperators::Options::aliasAnalysisKind_”: class“c10::optional<c10::AliasAnalysisKind>”需要有 dll 接口由 class“c10::RegisterOperators::Options”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function_schema.h(287): message : 参见“c10::optional<c10::AliasAnalysisKind>”的声明
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588,39): warning C4251: “c10::RegisterOperators::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“c10::RegisterOperators”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
C:\Program Files\libtorch\include\torch\library.h(301,35): warning C4251: “torch::CppFunction::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::DispatchKey>”的声明
C:\Program Files\libtorch\include\torch\library.h(303,42): warning C4251: “torch::CppFunction::cpp_signature_”: class“c10::optional<c10::impl::CppSignature>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::impl::CppSignature>”的声明
C:\Program Files\libtorch\include\torch\library.h(304,40): warning C4251: “torch::CppFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(28): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\torch\library.h(305,15): warning C4251: “torch::CppFunction::debug_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::CppFunction”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\library.h(799,30): warning C4251: “torch::Library::ns_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\library.h(800,35): warning C4251: “torch::Library::dispatch_key_”: class“c10::optional<c10::DispatchKey>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(402): message : 参见“c10::optional<c10::DispatchKey>”的声明
C:\Program Files\libtorch\include\torch\library.h(804,44): warning C4251: “torch::Library::registrars_”: class“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”需要有 dll 接口由 class“torch::Library”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(588): message : 参见“std::vector<c10::RegistrationHandleRAII,std::allocator<c10::RegistrationHandleRAII>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(53,11): warning C4251: “c10::ClassAttribute::attributeType_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(54,15): warning C4251: “c10::ClassAttribute::attributeName_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassAttribute”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(410,28): warning C4251: “c10::ClassType::constantNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(411,23): warning C4251: “c10::ClassType::constantValues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(413,34): warning C4251: “c10::ClassType::compilation_unit_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(416,31): warning C4251: “c10::ClassType::attributes_”: class“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(320): message : 参见“std::vector<c10::ClassAttribute,std::allocator<c10::ClassAttribute>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(419,24): warning C4251: “c10::ClassType::attributeTypes_”: class“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(566): message : 参见“std::vector<c10::Type::TypePtr,std::allocator<c10::Type::TypePtr>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(422,38): warning C4251: “c10::ClassType::methods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(423,38): warning C4251: “c10::ClassType::staticmethods_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(426,38): warning C4251: “c10::ClassType::forward_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(427,38): warning C4251: “c10::ClassType::forward_pre_hooks_”: class“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(108): message : 参见“std::vector<torch::jit::Function *,std::allocator<torch::jit::Function *>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(430,25): warning C4251: “c10::ClassType::properties_”: class“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\class_type.h(246): message : 参见“std::vector<c10::ClassType::Property,std::allocator<c10::ClassType::Property>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(435,15): warning C4251: “c10::ClassType::doc_string_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\ATen\core\class_type.h(438,28): warning C4251: “c10::ClassType::unresolved_class_attributes_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“c10::ClassType”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\custom_class_detail.h(212,15): warning C4251: “torch::detail::class_base::qualClassName”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\custom_class_detail.h(213,20): warning C4251: “torch::detail::class_base::classTypePtr”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 class“torch::detail::class_base”的客户端使用
C:\Program Files\libtorch\include\ATen\core\custom_class.h(16): message : 参见“std::shared_ptr<c10::ClassType>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\DispatchKeyExtractor.h(206,22): warning C4251: “c10::DispatchKeyExtractor::dispatch_arg_indices_reverse_”: struct“c10::utils::bitset”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
C:\Program Files\libtorch\include\c10\util\Bitset.h(22): message : 参见“c10::utils::bitset”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\DispatchKeyExtractor.h(209,18): warning C4251: “c10::DispatchKeyExtractor::nonFallthroughKeys_”: class“c10::DispatchKeySet”需要有 dll 接口由 struct“c10::DispatchKeyExtractor”的客户端使用
C:\Program Files\libtorch\include\c10\core\DispatchKeySet.h(35): message : 参见“c10::DispatchKeySet”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(211,16): warning C4251: “c10::impl::OperatorEntry::name_”: struct“c10::OperatorName”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ATenOpList.h(6): message : 参见“c10::OperatorName”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::AnnotatedSchema>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::AnnotatedSchema
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212,34): warning C4251: “c10::impl::OperatorEntry::schema_”: class“c10::optional<c10::impl::AnnotatedSchema>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(212): message : 参见“c10::optional<c10::impl::AnnotatedSchema>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(255,24): warning C4251: “c10::impl::OperatorEntry::kernels_”: class“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(248): message : 参见“ska::flat_hash_map<c10::DispatchKey,std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>,std::hash<c10::DispatchKey>,std::equal_to<K>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=c10::DispatchKey,
              V=std::list<c10::impl::AnnotatedKernel,std::allocator<c10::impl::AnnotatedKernel>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::impl::OperatorEntry::CppSignatureWithDebug
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271,40): warning C4251: “c10::impl::OperatorEntry::cpp_signature_”: class“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”需要有 dll 接口由 class“c10::impl::OperatorEntry”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\OperatorEntry.h(271): message : 参见“c10::optional<c10::impl::OperatorEntry::CppSignatureWithDebug>”的声明
C:\Program Files\libtorch\include\ATen\record_function.h(84,32): warning C4251: “at::StringView::owned_str_ptr_”: class“std::shared_ptr<std::string>”需要有 dll 接口由 struct“at::StringView”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(84): message : 参见“std::shared_ptr<std::string>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(327): message : 查看对正在编译的 类 模板 实例化“c10::optional<c10::OperatorName>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=c10::OperatorName
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(356): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::RecordFunction::State>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::RecordFunction::State
          ]
C:\Program Files\libtorch\include\ATen\record_function.h(356,24): warning C4251: “at::RecordFunction::state_”: class“c10::optional<at::RecordFunction::State>”需要有 dll 接口由 struct“at::RecordFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(356): message : 参见“c10::optional<at::RecordFunction::State>”的声明
C:\Program Files\libtorch\include\ATen\record_function.h(676,38): warning C4251: “at::RecordFunctionTLS::sorted_tls_callbacks_”: class“std::vector<at::ThreadLocalRecordFunctionCallbacksEntry,std::allocator<at::ThreadLocalRecordFunctionCallbacksEntry>>”需要有 dll 接口由 struct“at::RecordFunctionTLS”的客户端使用
C:\Program Files\libtorch\include\ATen\record_function.h(575): message : 参见“std::vector<at::ThreadLocalRecordFunctionCallbacksEntry,std::allocator<at::ThreadLocalRecordFunctionCallbacksEntry>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(285,26): warning C4251: “c10::Dispatcher::operators_”: class“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(285): message : 参见“std::list<c10::Dispatcher::OperatorDef,std::allocator<c10::Dispatcher::OperatorDef>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(287,63): warning C4251: “c10::Dispatcher::operatorLookupTable_”: class“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(287): message : 参见“c10::LeftRight<ska::flat_hash_map<c10::OperatorName,c10::OperatorHandle,std::hash<c10::OperatorName>,std::equal_to<K>,std::allocator<std::pair<K,V>>>>”的声明
          with
          [
              K=c10::OperatorName,
              V=c10::OperatorHandle
          ]
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(292,48): warning C4251: “c10::Dispatcher::libraries_”: class“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string,std::string>>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(292): message : 参见“ska::flat_hash_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string,std::string>>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(296,53): warning C4251: “c10::Dispatcher::listeners_”: class“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(296): message : 参见“std::unique_ptr<c10::detail::RegistrationListenerList,std::default_delete<c10::detail::RegistrationListenerList>>”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(297,14): warning C4251: “c10::Dispatcher::mutex_”: class“std::mutex”需要有 dll 接口由 class“c10::Dispatcher”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\ATen\core\dispatch\Dispatcher.h(391,48): warning C4251: “c10::OperatorHandle::operatorIterator_”: class“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”需要有 dll 接口由 class“c10::OperatorHandle”的客户端使用
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\list(787): message : 参见“std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>”的声明
          with
          [
              _Ty=c10::Dispatcher::OperatorDef
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\samplers\distributed.h(101,23): warning C4251: “torch::data::samplers::DistributedRandomSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedRandomSampler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\samplers\distributed.h(134,23): warning C4251: “torch::data::samplers::DistributedSequentialSampler::all_indices_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::data::samplers::DistributedSequentialSampler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\imethod.h(44,36): warning C4251: “torch::IMethod::argumentNames_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::IMethod”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(128,52): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphAttr”的基
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(57): message : 参见“torch::jit::AttributeValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(128): message : 参见“torch::jit::GraphAttr”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(142,26): warning C4251: “torch::jit::GraphAttr::value_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphAttr”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function.h(32): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(145,53): warning C4275: 非 dll 接口 struct“torch::jit::AttributeValue”用作 dll 接口 struct“torch::jit::GraphsAttr”的基
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(57): message : 参见“torch::jit::AttributeValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(145): message : 参见“torch::jit::GraphsAttr”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(160,13): warning C4251: “torch::jit::GraphsAttr::value_”: class“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”需要有 dll 接口由 struct“torch::jit::GraphsAttr”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\attributes.h(146): message : 参见“std::vector<std::shared_ptr<torch::jit::Graph>,std::allocator<std::shared_ptr<torch::jit::Graph>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(232,31): warning C4251: “torch::jit::SourceRange::source_view_”: class“std::shared_ptr<torch::jit::SourceView>”需要有 dll 接口由 struct“torch::jit::SourceRange”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(163): message : 参见“std::shared_ptr<torch::jit::SourceView>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(201): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<std::string,size_t,size_t>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<std::string,size_t,size_t>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(224): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::SourceRange>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::SourceRange
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(32,12): warning C4251: “torch::jit::Scope::parent_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Scope”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(27): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::InlinedCallStackPtr>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::InlinedCallStackPtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127,38): warning C4251: “torch::jit::InlinedCallStack::callee_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(137,15): warning C4251: “torch::jit::InlinedCallStack::fn_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(140): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ModuleInstanceInfo>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ModuleInstanceInfo
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(140,37): warning C4251: “torch::jit::InlinedCallStack::module_instance_info_”: class“c10::optional<torch::jit::ModuleInstanceInfo>”需要有 dll 接口由 struct“torch::jit::InlinedCallStack”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(123): message : 参见“c10::optional<torch::jit::ModuleInstanceInfo>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(21,75): warning C4275: 非 dll 接口 class“std::runtime_error”用作 dll 接口 struct“torch::jit::constant_not_supported_error”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\stdexcept(101): message : 参见“std::runtime_error”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(21): message : 参见“torch::jit::constant_not_supported_error”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\constants.h(29): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::ScopePtr>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::ScopePtr
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\operator.h(183,45): warning C4251: “torch::jit::Operator::op_”: class“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”需要有 dll 接口由 struct“torch::jit::Operator”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\operator.h(183): message : 参见“c10::either<torch::jit::Operator::C10Operator,torch::jit::Operator::JitOnlyOperator>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(94,11): warning C4251: “c10::EnumType::value_type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(95,30): warning C4251: “c10::EnumType::enum_names_values_”: class“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\enum_type.h(17): message : 参见“std::vector<c10::EnumNameValue,std::allocator<c10::EnumNameValue>>”的声明
C:\Program Files\libtorch\include\ATen\core\enum_type.h(96,48): warning C4251: “c10::EnumType::cu_”: class“std::weak_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 struct“c10::EnumType”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1206): message : 参见“std::weak_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(324,23): warning C4251: “torch::jit::Node::inputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(150): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(325,23): warning C4251: “torch::jit::Node::outputs_”: class“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(150): message : 参见“std::vector<torch::jit::Value *,std::allocator<torch::jit::Value *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(327,23): warning C4251: “torch::jit::Node::blocks_”: class“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(327): message : 参见“std::vector<torch::jit::Block *,std::allocator<torch::jit::Block *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(330,30): warning C4251: “torch::jit::Node::source_range_”: class“c10::optional<torch::jit::SourceRange>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(86): message : 参见“c10::optional<torch::jit::SourceRange>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(331,12): warning C4251: “torch::jit::Node::scope_”: class“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(27): message : 参见“c10::intrusive_ptr<torch::jit::Scope,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=torch::jit::Scope
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(332,38): warning C4251: “torch::jit::Node::callstack_”: class“c10::optional<torch::jit::InlinedCallStackPtr>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\scope.h(127): message : 参见“c10::optional<torch::jit::InlinedCallStackPtr>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(340,31): warning C4251: “torch::jit::Node::wrap_”: class“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(340): message : 参见“std::shared_ptr<torch::jit::Wrap<torch::jit::Node>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(346,30): warning C4251: “torch::jit::Node::historic_schema_name_”: class“c10::optional<std::string>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(947,22): warning C4251: “torch::jit::Node::values_”: class“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”需要有 dll 接口由 struct“torch::jit::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(947): message : 参见“std::vector<torch::jit::Node::AVPtr,std::allocator<torch::jit::Node::AVPtr>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\ir\ir.h(1556,45): warning C4251: “torch::jit::ProfileIValueOp::callback_”: class“std::function<void (torch::jit::Stack &)>”需要有 dll 接口由 struct“torch::jit::ProfileIValueOp”的客户端使用
C:\Program Files\libtorch\include\ATen\core\stack.h(19): message : 参见“std::function<void (torch::jit::Stack &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(210,21): warning C4251: “torch::jit::ArgumentSpecCreator::instructions_”: class“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”需要有 dll 接口由 struct“torch::jit::ArgumentSpecCreator”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(210): message : 参见“std::vector<torch::jit::ArgumentSpecCreator::Inst,std::allocator<torch::jit::ArgumentSpecCreator::Inst>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4267: “初始化”: 从“size_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(250,1): warning C4267: “初始化”: 从“size_t”转换到“const int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(255,33): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(281,37): warning C4244: “+=”: 从“int64_t”转换到“int32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\argument_spec.h(460,39): warning C4267: “参数”: 从“size_t”转换到“const int”，可能丢失数据
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(39,46): warning C4251: “at::ThreadLocalState::debug_info_”: class“std::shared_ptr<c10::ThreadLocalDebugInfo>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\c10\util\ThreadLocalDebugInfo.h(40): message : 参见“std::shared_ptr<c10::ThreadLocalDebugInfo>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(51,54): warning C4251: “at::ThreadLocalState::functorch_tls_”: class“std::shared_ptr<const at::functorch::FuncTorchTLSBase>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\ATen\FuncTorchTLS.h(41): message : 参见“std::shared_ptr<const at::functorch::FuncTorchTLSBase>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(56,44): warning C4251: “at::ThreadLocalState::python_mode_state_”: class“std::shared_ptr<c10::TorchDispatchTypeObject>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(269): message : 参见“std::shared_ptr<c10::TorchDispatchTypeObject>”的声明
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(59,47): warning C4251: “at::ThreadLocalState::saved_tensors_default_hooks_”: class“std::stack<std::pair<PyObject *,PyObject *>,std::deque<std::pair<PyObject *,PyObject *>,std::allocator<std::pair<PyObject *,PyObject *>>>>”需要有 dll 接口由 class“at::ThreadLocalState”的客户端使用
C:\Program Files\libtorch\include\ATen\ThreadLocalState.h(59): message : 参见“std::stack<std::pair<PyObject *,PyObject *>,std::deque<std::pair<PyObject *,PyObject *>,std::allocator<std::pair<PyObject *,PyObject *>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(80,42): warning C4251: “torch::jit::Code::pImpl”: class“std::shared_ptr<torch::jit::interpreter::CodeImpl>”需要有 dll 接口由 struct“torch::jit::Code”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(80): message : 参见“std::shared_ptr<torch::jit::interpreter::CodeImpl>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\interpreter.h(149): message : 查看对正在编译的 类 模板 实例化“c10::optional<at::ThreadLocalState>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=at::ThreadLocalState
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\graph_executor.h(87,42): warning C4251: “torch::jit::GraphExecutor::pImpl”: class“std::shared_ptr<torch::jit::GraphExecutorImplBase>”需要有 dll 接口由 struct“torch::jit::GraphExecutor”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\graph_executor.h(87): message : 参见“std::shared_ptr<torch::jit::GraphExecutorImplBase>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(127,22): warning C4251: “torch::jit::GraphFunction::name_”: struct“c10::QualifiedName”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\qualified_name.h(12): message : 参见“c10::QualifiedName”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(129,26): warning C4251: “torch::jit::GraphFunction::graph_”: class“std::shared_ptr<torch::jit::Graph>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function.h(32): message : 参见“std::shared_ptr<torch::jit::Graph>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\array(602): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::shared_ptr<torch::jit::Graph>>”的引用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(135): message : 查看对正在编译的 类 模板 实例化“std::array<c10::optional<std::shared_ptr<torch::jit::Graph>>,4>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::shared_ptr<torch::jit::Graph>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(142,32): warning C4251: “torch::jit::GraphFunction::compile_mutex”: class“std::recursive_mutex”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(95): message : 参见“std::recursive_mutex”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\array(602): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::GraphExecutor>”的引用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(149): message : 查看对正在编译的 类 模板 实例化“std::array<c10::optional<torch::jit::GraphExecutor>,4>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::GraphExecutor
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(154,39): warning C4251: “torch::jit::GraphFunction::function_creator_”: class“std::function<void (torch::jit::GraphFunction &)>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(16): message : 参见“std::function<void (torch::jit::GraphFunction &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\function_impl.h(159,43): warning C4251: “torch::jit::GraphFunction::schema_”: class“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”需要有 dll 接口由 struct“torch::jit::GraphFunction”的客户端使用
C:\Program Files\libtorch\include\ATen\core\op_registration\op_registration.h(28): message : 参见“std::unique_ptr<c10::FunctionSchema,std::default_delete<c10::FunctionSchema>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\method.h(70,13): warning C4251: “torch::jit::Method::owner_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Method”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(672): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(46): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Method>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Method
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(185,21): warning C4251: “torch::jit::Object::_ivalue_”: class“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”需要有 dll 接口由 struct“torch::jit::Object”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\ATen\core\ivalue.h(672): message : 参见“c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319,42): warning C4251: “torch::jit::CompilationUnit::functions_”: class“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(319): message : 参见“std::vector<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>,std::allocator<std::unique_ptr<torch::jit::Function,std::default_delete<torch::jit::Function>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321,50): warning C4251: “torch::jit::CompilationUnit::dict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(322,50): warning C4251: “torch::jit::CompilationUnit::classDict_”: class“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(321): message : 参见“std::unordered_map<c10::QualifiedName,size_t,std::hash<c10::QualifiedName>,std::equal_to<c10::QualifiedName>,std::allocator<std::pair<const c10::QualifiedName,size_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(329,34): warning C4251: “torch::jit::CompilationUnit::classes_”: class“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”需要有 dll 接口由 struct“torch::jit::CompilationUnit”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(329): message : 参见“std::vector<c10::NamedTypePtr,std::allocator<c10::NamedTypePtr>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\api\module.h(295): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::string,std::allocator<std::string>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\input-archive.h(110,15): warning C4251: “torch::serialize::InputArchive::hierarchy_prefix_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“torch::serialize::InputArchive”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\output-archive.h(76,41): warning C4251: “torch::serialize::OutputArchive::cu_”: class“std::shared_ptr<torch::jit::CompilationUnit>”需要有 dll 接口由 class“torch::serialize::OutputArchive”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue.h(1192): message : 参见“std::shared_ptr<torch::jit::CompilationUnit>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(64,70): warning C4251: “std::enable_shared_from_this<torch::nn::Module>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::nn::Module>”的客户端使用
          with
          [
              _Ty=torch::nn::Module
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::nn::Module
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(544,36): warning C4251: “torch::nn::Module::parameters_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(212): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(592,36): warning C4251: “torch::nn::Module::buffers_”: class“torch::OrderedDict<std::string,at::Tensor>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(212): message : 参见“torch::OrderedDict<std::string,at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(595,53): warning C4251: “torch::nn::Module::children_”: class“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(248): message : 参见“torch::OrderedDict<std::string,std::shared_ptr<torch::nn::Module>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\module.h(598,33): warning C4251: “torch::nn::Module::name_”: class“c10::optional<std::string>”需要有 dll 接口由 class“torch::nn::Module”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\util.h(60,15): warning C4251: “torch::profiler::impl::FileLineFunc::filename”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::profiler::impl::FileLineFunc”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\util.h(62,15): warning C4251: “torch::profiler::impl::FileLineFunc::funcname”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::profiler::impl::FileLineFunc”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(103,14): warning C4251: “torch::profiler::impl::ProfilerThreadLocalStateBase::state_mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::profiler::impl::ProfilerThreadLocalStateBase”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(261,37): warning C4251: “torch::autograd::profiler::LegacyEvent::shapes_”: class“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\WrapDimUtils.h(29): message : 参见“std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(265,40): warning C4251: “torch::autograd::profiler::LegacyEvent::cuda_event”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(272,28): warning C4251: “torch::autograd::profiler::LegacyEvent::stack_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(276,48): warning C4251: “torch::autograd::profiler::LegacyEvent::extra_args_”: class“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”需要有 dll 接口由 struct“torch::autograd::profiler::LegacyEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\function_schema.h(396): message : 参见“std::unordered_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::IValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(79,17): warning C4244: “初始化”: 从“double”转换到“int64_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(129,22): warning C4244: “=”: 从“double”转换到“int64_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(361,34): warning C4251: “torch::autograd::profiler::RecordProfile::file_”: class“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”需要有 dll 接口由 struct“torch::autograd::profiler::RecordProfile”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(361): message : 参见“std::unique_ptr<std::ofstream,std::default_delete<std::ofstream>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(400): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::function<void (const torch::autograd::profiler::thread_event_lists &)>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(400,65): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::cb_”: class“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(378): message : 参见“c10::optional<std::function<void (const torch::autograd::profiler::thread_event_lists &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(401,47): warning C4251: “torch::autograd::profiler::TLSLegacyProfilerGuard::profilerDisableOptions_”: class“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”需要有 dll 接口由 struct“torch::autograd::profiler::TLSLegacyProfilerGuard”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_legacy.h(340): message : 参见“c10::optional<torch::autograd::profiler::ProfilerDisableOptions>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>
          ]
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247,52): warning C4251: “torch::autograd::profiler::KinetoEvent::shapes_”: class“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(247): message : 参见“c10::optional<std::vector<std::vector<int64_t,std::allocator<int64_t>>,std::allocator<std::vector<int64_t,std::allocator<int64_t>>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(248,43): warning C4251: “torch::autograd::profiler::KinetoEvent::stack_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(249,43): warning C4251: “torch::autograd::profiler::KinetoEvent::module_hierarchy_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(250,43): warning C4251: “torch::autograd::profiler::KinetoEvent::dtypes_”: class“c10::optional<std::vector<std::string,std::allocator<std::string>>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(32): message : 参见“c10::optional<std::vector<std::string,std::allocator<std::string>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(253,15): warning C4251: “torch::autograd::profiler::KinetoEvent::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(264,15): warning C4251: “torch::autograd::profiler::KinetoEvent::backend_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(266,40): warning C4251: “torch::autograd::profiler::KinetoEvent::cuda_event_start_”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(267,40): warning C4251: “torch::autograd::profiler::KinetoEvent::cuda_event_end_”: class“std::shared_ptr<CUevent_st>”需要有 dll 接口由 struct“torch::autograd::profiler::KinetoEvent”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\api.h(121): message : 参见“std::shared_ptr<CUevent_st>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(293,28): warning C4251: “torch::autograd::profiler::ProfilerResult::events_”: class“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(277): message : 参见“std::vector<torch::autograd::profiler::KinetoEvent,std::allocator<torch::autograd::profiler::KinetoEvent>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(294,55): warning C4251: “torch::autograd::profiler::ProfilerResult::trace_”: struct“torch::profiler::impl::kineto::ActivityTraceWrapper”需要有 dll 接口由 struct“torch::autograd::profiler::ProfilerResult”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\profiler\kineto_shim.h(99): message : 参见“torch::profiler::impl::kineto::ActivityTraceWrapper”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\profiler_kineto.h(378,15): warning C4251: “torch::autograd::profiler::python_tracer::PyTraceEvent::name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::profiler::python_tracer::PyTraceEvent”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\batchnorm.h(24,3): warning C4251: “torch::nn::BatchNormOptions::momentum_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::BatchNormOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\batchnorm.h(81,3): warning C4251: “torch::nn::functional::BatchNormFuncOptions::momentum_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::BatchNormFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(29,3): warning C4251: “torch::nn::EmbeddingOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(31,3): warning C4251: “torch::nn::EmbeddingOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(52,3): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(54,3): warning C4251: “torch::nn::EmbeddingFromPretrainedOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(78,3): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(80,3): warning C4251: “torch::nn::functional::EmbeddingFuncOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(109,3): warning C4251: “torch::nn::EmbeddingBagOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(117,3): warning C4251: “torch::nn::EmbeddingBagOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(132,3): warning C4251: “torch::nn::EmbeddingBagOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(143,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(151,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(163,3): warning C4251: “torch::nn::EmbeddingBagFromPretrainedOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::EmbeddingBagFromPretrainedOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(182,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::max_norm_”: class“c10::optional<double>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\CPUGeneratorImpl.h(26): message : 参见“c10::optional<double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(190,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::mode_”: class“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(93): message : 参见“c10::variant<torch::enumtype::kSum,torch::enumtype::kMean,torch::enumtype::kMax>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\embedding.h(206,3): warning C4251: “torch::nn::functional::EmbeddingBagFuncOptions::padding_idx_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::nn::functional::EmbeddingBagFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(44,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(44,48): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(127,59): warning C4244: “参数”: 从“double”转换到“float”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\embedding.h(127,48): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(27,3): warning C4251: “torch::nn::FoldOptions::output_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(30,3): warning C4251: “torch::nn::FoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(34,3): warning C4251: “torch::nn::FoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(38,3): warning C4251: “torch::nn::FoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(41,3): warning C4251: “torch::nn::FoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::FoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(72,3): warning C4251: “torch::nn::UnfoldOptions::kernel_size_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(76,3): warning C4251: “torch::nn::UnfoldOptions::dilation_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(80,3): warning C4251: “torch::nn::UnfoldOptions::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\fold.h(83,3): warning C4251: “torch::nn::UnfoldOptions::stride_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::UnfoldOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(223,3): warning C4251: “torch::nn::functional::SoftmaxFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftmaxFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(263,3): warning C4251: “torch::nn::functional::SoftminFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::SoftminFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\activation.h(303,3): warning C4251: “torch::nn::functional::LogSoftmaxFuncOptions::dtype_”: class“c10::optional<c10::ScalarType>”需要有 dll 接口由 struct“torch::nn::functional::LogSoftmaxFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\ScalarTypeToTypeMeta.h(29): message : 参见“c10::optional<c10::ScalarType>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(65,3): warning C4251: “torch::nn::UnflattenOptions::dimname_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(67,3): warning C4251: “torch::nn::UnflattenOptions::sizes_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(69,3): warning C4251: “torch::nn::UnflattenOptions::namedshape_”: class“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”需要有 dll 接口由 struct“torch::nn::UnflattenOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\linear.h(56): message : 参见“std::vector<std::pair<std::string,int64_t>,std::allocator<std::pair<std::string,int64_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(654,18): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(676,16): warning C4244: “=”: 从“const T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\activation.h(686,26): warning C4244: “=”: 从“T”转换到“int”，可能丢失数据
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(23,3): warning C4251: “torch::nn::L1LossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::L1LossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(55,3): warning C4251: “torch::nn::KLDivLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”需要有 dll 接口由 struct“torch::nn::KLDivLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(49): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kBatchMean,torch::enumtype::kSum,torch::enumtype::kMean>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(90,3): warning C4251: “torch::nn::MSELossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MSELossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(122,3): warning C4251: “torch::nn::BCELossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCELossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(154,3): warning C4251: “torch::nn::HingeEmbeddingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HingeEmbeddingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(195,3): warning C4251: “torch::nn::MultiMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(228,3): warning C4251: “torch::nn::CosineEmbeddingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CosineEmbeddingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(262,3): warning C4251: “torch::nn::MultiLabelMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(296,3): warning C4251: “torch::nn::SoftMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SoftMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(333,3): warning C4251: “torch::nn::MultiLabelSoftMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MultiLabelSoftMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(372,3): warning C4251: “torch::nn::TripletMarginLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404,3): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::distance_function_”: class“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(404): message : 参见“c10::optional<torch::nn::TripletMarginWithDistanceLossOptions::distance_function_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(417,3): warning C4251: “torch::nn::TripletMarginWithDistanceLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::TripletMarginWithDistanceLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(448,3): warning C4251: “torch::nn::CTCLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CTCLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(486,3): warning C4251: “torch::nn::SmoothL1LossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::SmoothL1LossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(522,3): warning C4251: “torch::nn::HuberLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::HuberLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(562,3): warning C4251: “torch::nn::PoissonNLLLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::PoissonNLLLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(593,3): warning C4251: “torch::nn::MarginRankingLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::MarginRankingLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(629,3): warning C4251: “torch::nn::NLLLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::NLLLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(664,3): warning C4251: “torch::nn::CrossEntropyLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::CrossEntropyLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(697,3): warning C4251: “torch::nn::BCEWithLogitsLossOptions::reduction_”: class“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”需要有 dll 接口由 struct“torch::nn::BCEWithLogitsLossOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\loss.h(18): message : 参见“c10::variant<torch::enumtype::kNone,torch::enumtype::kMean,torch::enumtype::kSum>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(20,3): warning C4251: “torch::nn::LayerNormOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::LayerNormOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(43,3): warning C4251: “torch::nn::functional::LayerNormFuncOptions::normalized_shape_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::LayerNormFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\normalization.h(133,3): warning C4251: “torch::nn::functional::NormalizeFuncOptions::out_”: class“c10::optional<at::Tensor>”需要有 dll 接口由 struct“torch::nn::functional::NormalizeFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\_backward_ops.h(43): message : 参见“c10::optional<at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(25): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(65): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(105,3): warning C4251: “torch::nn::ZeroPad2dOptions::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ZeroPad2dOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<D>::padding_”: class“torch::ExpandingArray<D*2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<D>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(16): message : 参见“torch::ExpandingArray<D*2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(125): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<D>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(172,3): warning C4251: “torch::nn::functional::PadFuncOptions::pad_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(175,3): warning C4251: “torch::nn::functional::PadFuncOptions::mode_”: class“c10::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”需要有 dll 接口由 struct“torch::nn::functional::PadFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(163): message : 参见“c10::variant<torch::enumtype::kConstant,torch::enumtype::kReflect,torch::enumtype::kReplicate,torch::enumtype::kCircular>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\padding.h(14,36): warning C4267: “初始化”: 从“size_t”转换到“int”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\pooling.h(965,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\pooling.h(966,10): warning C4244: “初始化”: 从“_Ty”转换到“int”，可能丢失数据
          with
          [
              _Ty=int64_t
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(23,3): warning C4251: “torch::nn::UpsampleOptions::size_”: class“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(157): message : 参见“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<T,std::allocator<T>>>”的引用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<double,std::allocator<double>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26,3): warning C4251: “torch::nn::UpsampleOptions::scale_factor_”: class“c10::optional<std::vector<T,std::allocator<T>>>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 参见“c10::optional<std::vector<T,std::allocator<T>>>”的声明
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(36,3): warning C4251: “torch::nn::UpsampleOptions::mode_”: class“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(30): message : 参见“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(42,3): warning C4251: “torch::nn::UpsampleOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::UpsampleOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(65,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::size_”: class“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\TensorUtils.h(157): message : 参见“c10::optional<std::vector<int64_t,std::allocator<int64_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(68,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::scale_factor_”: class“c10::optional<std::vector<T,std::allocator<T>>>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(26): message : 参见“c10::optional<std::vector<T,std::allocator<T>>>”的声明
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(72,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::mode_”: class“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea,torch::enumtype::kNearestExact>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(55): message : 参见“c10::variant<torch::enumtype::kNearest,torch::enumtype::kLinear,torch::enumtype::kBilinear,torch::enumtype::kBicubic,torch::enumtype::kTrilinear,torch::enumtype::kArea,torch::enumtype::kNearestExact>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(83,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\upsampling.h(94,3): warning C4251: “torch::nn::functional::InterpolateFuncOptions::recompute_scale_factor_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::InterpolateFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(24,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::mode_”: class“c10::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(20): message : 参见“c10::variant<torch::enumtype::kBilinear,torch::enumtype::kNearest>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(26,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::padding_mode_”: class“c10::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(21): message : 参见“c10::variant<torch::enumtype::kZeros,torch::enumtype::kBorder,torch::enumtype::kReflection>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\vision.h(28,3): warning C4251: “torch::nn::functional::GridSampleFuncOptions::align_corners_”: class“c10::optional<bool>”需要有 dll 接口由 struct“torch::nn::functional::GridSampleFuncOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(44): message : 参见“c10::optional<bool>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\functional.h(96,12): warning C4251: “torch::nn::FunctionalImpl::function_”: class“std::function<at::Tensor (at::Tensor)>”需要有 dll 接口由 class“torch::nn::FunctionalImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\data\transforms\tensor.h(39): message : 参见“std::function<at::Tensor (at::Tensor)>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\adaptive.h(26,3): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossOptions::cutoffs_”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::nn::AdaptiveLogSoftmaxWithLossOptions”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(72,24): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::cutoffs”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(82,10): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::head”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\adaptive.h(84,14): warning C4251: “torch::nn::AdaptiveLogSoftmaxWithLossImpl::tail”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::AdaptiveLogSoftmaxWithLossImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(178,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(178,63): warning C4251: “torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,torch::nn::Conv1dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(211,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(211,63): warning C4251: “torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,torch::nn::Conv2dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(247,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(247,63): warning C4251: “torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,torch::nn::Conv3dImpl>”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(334,90): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<1>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(334,90): warning C4251: “torch::nn::ConvNdImpl<1,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<1,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose1dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(370,90): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<2>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(370,90): warning C4251: “torch::nn::ConvNdImpl<2,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<2,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose2dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(406,90): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::options”: struct“torch::nn::detail::ConvNdOptions<3>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(29): message : 参见“torch::nn::detail::ConvNdOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\conv.h(406,90): warning C4251: “torch::nn::ConvNdImpl<3,Derived>::_reversed_padding_repeated_twice”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 class“torch::nn::ConvNdImpl<3,Derived>”的客户端使用
          with
          [
              Derived=torch::nn::ConvTranspose3dImpl
          ]
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(46): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<1,torch::nn::ReflectionPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(72): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<2,torch::nn::ReflectionPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(24,3): warning C4251: “torch::nn::ReflectionPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReflectionPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(29): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(99): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReflectionPadImpl<3,torch::nn::ReflectionPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(147): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<1,torch::nn::ReplicationPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(173): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<2,torch::nn::ReplicationPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(64,3): warning C4251: “torch::nn::ReplicationPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ReplicationPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(130): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(199): message : 查看对正在编译的 类 模板 实例化“torch::nn::ReplicationPadImpl<3,torch::nn::ReplicationPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<1>::padding_”: class“torch::ExpandingArray<2,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<1>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\functional\conv.h(80): message : 参见“torch::ExpandingArray<2,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<1>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(285): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<1,torch::nn::ConstantPad1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<2>::padding_”: class“torch::ExpandingArray<4,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<2>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(100): message : 参见“torch::ExpandingArray<4,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<2>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(311): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<2,torch::nn::ConstantPad2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\padding.h(121,3): warning C4251: “torch::nn::ConstantPadOptions<3>::padding_”: class“torch::ExpandingArray<6,int64_t>”需要有 dll 接口由 struct“torch::nn::ConstantPadOptions<3>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(17): message : 参见“torch::ExpandingArray<6,int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(268): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadOptions<3>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\padding.h(337): message : 查看对正在编译的 类 模板 实例化“torch::nn::ConstantPadImpl<3,torch::nn::ConstantPad3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>::options”: struct“torch::nn::AvgPoolOptions<1>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(43): message : 参见“torch::nn::AvgPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(46): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<1,torch::nn::AvgPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>::options”: struct“torch::nn::AvgPoolOptions<2>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(51): message : 参见“torch::nn::AvgPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(73): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<2,torch::nn::AvgPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(29,21): warning C4251: “torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>::options”: struct“torch::nn::AvgPoolOptions<3>”需要有 dll 接口由 class“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(59): message : 参见“torch::nn::AvgPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(100): message : 查看对正在编译的 类 模板 实例化“torch::nn::AvgPoolImpl<3,torch::nn::AvgPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>::options”: struct“torch::nn::MaxPoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(133): message : 参见“torch::nn::MaxPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(147): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<1,torch::nn::MaxPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>::options”: struct“torch::nn::MaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(141): message : 参见“torch::nn::MaxPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(178): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<2,torch::nn::MaxPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(130,21): warning C4251: “torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>::options”: struct“torch::nn::MaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(149): message : 参见“torch::nn::MaxPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(209): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxPoolImpl<3,torch::nn::MaxPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(236): message : 参见“torch::nn::AdaptiveMaxPoolOptions<output_size_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(248): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<D,output_size_t,Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(202): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(265): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveMaxPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(210): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(298): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveMaxPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(247,41): warning C4251: “torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>::options”: struct“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(218): message : 参见“torch::nn::AdaptiveMaxPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(331): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveMaxPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveMaxPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(359): message : 参见“torch::nn::AdaptiveAvgPoolOptions<output_size_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(371): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<D,output_size_t,Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(271): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArray<1,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(388): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<1,torch::ExpandingArray<1,int64_t>,torch::nn::AdaptiveAvgPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(279): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<2,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(417): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<2,torch::ExpandingArrayWithOptionalElem<2,int64_t>,torch::nn::AdaptiveAvgPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(370,41): warning C4251: “torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>::options”: struct“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”需要有 dll 接口由 class“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(287): message : 参见“torch::nn::AdaptiveAvgPoolOptions<torch::ExpandingArrayWithOptionalElem<3,int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(446): message : 查看对正在编译的 类 模板 实例化“torch::nn::AdaptiveAvgPoolImpl<3,torch::ExpandingArrayWithOptionalElem<3,int64_t>,torch::nn::AdaptiveAvgPool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<1>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(355): message : 参见“torch::nn::MaxUnpoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(494): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<1,torch::nn::MaxUnpool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<2>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(363): message : 参见“torch::nn::MaxUnpoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(524): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<2,torch::nn::MaxUnpool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(477,23): warning C4251: “torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>::options”: struct“torch::nn::MaxUnpoolOptions<3>”需要有 dll 接口由 class“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(371): message : 参见“torch::nn::MaxUnpoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(554): message : 查看对正在编译的 类 模板 实例化“torch::nn::MaxUnpoolImpl<3,torch::nn::MaxUnpool3dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(602,30): warning C4251: “torch::nn::FractionalMaxPool2dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<2>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool2dImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(453): message : 参见“torch::nn::FractionalMaxPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(646,30): warning C4251: “torch::nn::FractionalMaxPool3dImpl::options”: struct“torch::nn::FractionalMaxPoolOptions<3>”需要有 dll 接口由 class“torch::nn::FractionalMaxPool3dImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(461): message : 参见“torch::nn::FractionalMaxPoolOptions<3>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(674,20): warning C4251: “torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>::options”: struct“torch::nn::LPPoolOptions<1>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(511): message : 参见“torch::nn::LPPoolOptions<1>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(691): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<1,torch::nn::LPPool1dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(674,20): warning C4251: “torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>::options”: struct“torch::nn::LPPoolOptions<2>”需要有 dll 接口由 class“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\pooling.h(519): message : 参见“torch::nn::LPPoolOptions<2>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\pooling.h(720): message : 查看对正在编译的 类 模板 实例化“torch::nn::LPPoolImpl<2,torch::nn::LPPool2dImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(23,3): warning C4251: “torch::nn::detail::RNNOptionsBase::mode_”: class“c10::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”需要有 dll 接口由 struct“torch::nn::detail::RNNOptionsBase”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(15): message : 参见“c10::variant<torch::enumtype::kLSTM,torch::enumtype::kGRU,torch::enumtype::kRNN_TANH,torch::enumtype::kRNN_RELU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(68,3): warning C4251: “torch::nn::RNNOptions::nonlinearity_”: class“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(54): message : 参见“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(183,3): warning C4251: “torch::nn::RNNCellOptions::nonlinearity_”: class“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”需要有 dll 接口由 struct“torch::nn::RNNCellOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\rnn.h(54): message : 参见“c10::variant<torch::enumtype::kTanh,torch::enumtype::kReLU>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(86): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<Derived>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<Derived>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<Derived>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(103): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::RNNImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(148): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::LSTMImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(155): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::tuple<at::Tensor,at::Tensor>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::tuple<at::Tensor,at::Tensor>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(81,28): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_names_”: class“std::vector<std::string,std::allocator<std::string>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-util\utility.h(286): message : 参见“std::vector<std::string,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(201): message : 查看对正在编译的 类 模板 实例化“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的引用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83,41): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::all_weights_”: class“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(83): message : 参见“std::vector<std::vector<std::string,std::allocator<std::string>>,std::allocator<std::vector<std::string,std::allocator<std::string>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\rnn.h(85,23): warning C4251: “torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>::flat_weights_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::nn::detail::RNNImplBase<torch::nn::GRUImpl>”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(870,10): warning C4251: “torch::nn::MultiheadAttentionImpl::out_proj”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::MultiheadAttentionImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\anomaly_mode.h(59,15): warning C4251: “torch::autograd::AnomalyMetadata::traceback_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\anomaly_mode.h(60,25): warning C4251: “torch::autograd::AnomalyMetadata::parent_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AnomalyMetadata”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(71,32): warning C4251: “torch::autograd::SavedVariable::fw_grad_”: class“std::shared_ptr<torch::autograd::ForwardGrad>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\forward_grad.h(95): message : 参见“std::shared_ptr<torch::autograd::ForwardGrad>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(79,23): warning C4251: “torch::autograd::SavedVariable::weak_grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(93,39): warning C4251: “torch::autograd::SavedVariable::hooks_”: class“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(41): message : 参见“std::unique_ptr<torch::autograd::SavedVariableHooks,std::default_delete<torch::autograd::SavedVariableHooks>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(96,25): warning C4251: “torch::autograd::SavedVariable::grad_fn_”: class“std::shared_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\ATen\core\TensorBase.h(696): message : 参见“std::shared_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\saved_variable.h(97,23): warning C4251: “torch::autograd::SavedVariable::grad_accumulator_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“torch::autograd::SavedVariable”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(105,60): warning C4251: “std::enable_shared_from_this<torch::autograd::Node>::_Wptr”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::autograd::Node>”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(530,14): warning C4251: “torch::autograd::Node::mutex_”: class“std::mutex”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(533,13): warning C4251: “torch::autograd::Node::next_edges_”: class“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(39): message : 参见“std::vector<torch::autograd::Edge,std::allocator<torch::autograd::Edge>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(537,36): warning C4251: “torch::autograd::Node::anomaly_metadata_”: class“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(537): message : 参见“std::unique_ptr<torch::autograd::AnomalyMetadata,std::default_delete<torch::autograd::AnomalyMetadata>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(539,49): warning C4251: “torch::autograd::Node::pre_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(427): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPreHook,std::default_delete<torch::autograd::FunctionPreHook>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(541,50): warning C4251: “torch::autograd::Node::post_hooks_”: class“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(403): message : 参见“std::vector<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>,std::allocator<std::unique_ptr<torch::autograd::FunctionPostHook,std::default_delete<torch::autograd::FunctionPostHook>>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(543,37): warning C4251: “torch::autograd::Node::input_metadata_”: class“c10::SmallVector<torch::autograd::InputMetadata,2>”需要有 dll 接口由 struct“torch::autograd::Node”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(543): message : 参见“c10::SmallVector<torch::autograd::InputMetadata,2>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(194,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(201,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(209,1): warning C4267: “初始化”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(215,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(289,1): warning C4267: “return”: 从“size_t”转换到“uint32_t”，可能丢失数据
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(105,47): warning C4251: “torch::autograd::AutogradContext::saved_data”: class“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(105): message : 参见“ska::flat_hash_map<std::string,c10::IValue,std::hash<std::string>,std::equal_to<std::string>,std::allocator<c10::EnumNameValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(129,39): warning C4251: “torch::autograd::AutogradContext::non_differentiable_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(17): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(130,39): warning C4251: “torch::autograd::AutogradContext::dirty_inputs_”: class“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(17): message : 参见“std::unordered_set<c10::TensorImpl *,std::hash<c10::TensorImpl *>,std::equal_to<c10::TensorImpl *>,std::allocator<c10::TensorImpl *>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(131,47): warning C4251: “torch::autograd::AutogradContext::saved_variables_”: class“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\function.h(40): message : 参见“std::vector<torch::autograd::SavedVariable,std::allocator<torch::autograd::SavedVariable>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(132,17): warning C4251: “torch::autograd::AutogradContext::to_save_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(138,23): warning C4251: “torch::autograd::AutogradContext::grad_fn_”: class“std::weak_ptr<torch::autograd::Node>”需要有 dll 接口由 struct“torch::autograd::AutogradContext”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\autograd\variable.h(122): message : 参见“std::weak_ptr<torch::autograd::Node>”的声明
C:\Program Files\libtorch\include\torch\csrc\autograd\custom_function.h(155,24): warning C4251: “torch::autograd::VariableInfo::size”: class“std::vector<int64_t,std::allocator<int64_t>>”需要有 dll 接口由 struct“torch::autograd::VariableInfo”的客户端使用
C:\Program Files\libtorch\include\c10\core\MemoryFormat.h(63): message : 参见“std::vector<int64_t,std::allocator<int64_t>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(36,3): warning C4251: “torch::nn::TransformerEncoderLayerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerEncoderLayerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(65,3): warning C4251: “torch::nn::TransformerDecoderLayerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerDecoderLayerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(60,24): warning C4251: “torch::nn::TransformerEncoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(63,12): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(66,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(69,12): warning C4251: “torch::nn::TransformerEncoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(72,15): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(74,15): warning C4251: “torch::nn::TransformerEncoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(77,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(79,13): warning C4251: “torch::nn::TransformerEncoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerEncoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(138,22): warning C4251: “torch::nn::TransformerDecoderLayerImpl::self_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(141,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout1”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(144,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm1”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(147,22): warning C4251: “torch::nn::TransformerDecoderLayerImpl::multihead_attn”: class“torch::nn::MultiheadAttention”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\activation.h(882): message : 参见“torch::nn::MultiheadAttention”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(150,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout2”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(153,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm2”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(156,10): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear1”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(159,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(162,10): warning C4251: “torch::nn::TransformerDecoderLayerImpl::linear2”: class“torch::nn::Linear”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\linear.h(85): message : 参见“torch::nn::Linear”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(165,11): warning C4251: “torch::nn::TransformerDecoderLayerImpl::dropout3”: class“torch::nn::Dropout”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\dropout.h(72): message : 参见“torch::nn::Dropout”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(168,13): warning C4251: “torch::nn::TransformerDecoderLayerImpl::norm3”: class“torch::nn::LayerNorm”需要有 dll 接口由 class“torch::nn::TransformerDecoderLayerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\normalization.h(71): message : 参见“torch::nn::LayerNorm”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(28,5): warning C4251: “torch::nn::TransformerEncoderOptions::encoder_layer_”: class“torch::nn::TransformerEncoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(88): message : 参见“torch::nn::TransformerEncoderLayer”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(34,5): warning C4251: “torch::nn::TransformerEncoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerEncoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(57,3): warning C4251: “torch::nn::TransformerDecoderOptions::decoder_layer_”: class“torch::nn::TransformerDecoderLayer”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformerlayer.h(187): message : 参见“torch::nn::TransformerDecoderLayer”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformercoder.h(63,3): warning C4251: “torch::nn::TransformerDecoderOptions::norm_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerDecoderOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(59,16): warning C4251: “torch::nn::TransformerEncoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(62,15): warning C4251: “torch::nn::TransformerEncoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerEncoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(122,16): warning C4251: “torch::nn::TransformerDecoderImpl::layers”: class“torch::nn::ModuleList”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\modulelist.h(254): message : 参见“torch::nn::ModuleList”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformercoder.h(125,15): warning C4251: “torch::nn::TransformerDecoderImpl::norm”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerDecoderImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(49,3): warning C4251: “torch::nn::TransformerOptions::activation_”: class“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformerlayer.h(11): message : 参见“c10::variant<torch::enumtype::kReLU,torch::enumtype::kGELU,std::function<torch::autograd::Variable (const torch::autograd::Variable &)>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(52,3): warning C4251: “torch::nn::TransformerOptions::custom_encoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\options\transformer.h(55,3): warning C4251: “torch::nn::TransformerOptions::custom_decoder_”: class“torch::nn::AnyModule”需要有 dll 接口由 struct“torch::nn::TransformerOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformer.h(126,15): warning C4251: “torch::nn::TransformerImpl::encoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\transformer.h(129,15): warning C4251: “torch::nn::TransformerImpl::decoder”: class“torch::nn::AnyModule”需要有 dll 接口由 class“torch::nn::TransformerImpl”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\nn\modules\container\any.h(110): message : 参见“torch::nn::AnyModule”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(85,23): warning C4251: “torch::optim::OptimizerParamGroup::params_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(87,37): warning C4251: “torch::optim::OptimizerParamGroup::options_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::OptimizerParamGroup”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(52): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(155,37): warning C4251: “torch::optim::Optimizer::param_groups_”: class“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(97): message : 参见“std::vector<torch::optim::OptimizerParamGroup,std::allocator<torch::optim::OptimizerParamGroup>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(157,74): warning C4251: “torch::optim::Optimizer::state_”: class“ska::flat_hash_map<std::string,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
          with
          [
              K=std::string,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(142): message : 参见“ska::flat_hash_map<std::string,std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<K,V>>>”的声明
          with
          [
              K=std::string,
              V=std::unique_ptr<torch::optim::OptimizerParamState,std::default_delete<torch::optim::OptimizerParamState>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(159,38): warning C4251: “torch::optim::Optimizer::defaults_”: class“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”需要有 dll 接口由 class“torch::optim::Optimizer”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\optimizer.h(52): message : 参见“std::unique_ptr<torch::optim::OptimizerOptions,std::default_delete<torch::optim::OptimizerOptions>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(24,3): warning C4251: “torch::optim::AdamOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(23): message : 参见“std::tuple<double,double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adamw.h(24,3): warning C4251: “torch::optim::AdamWOptions::betas_”: class“std::tuple<double,double>”需要有 dll 接口由 struct“torch::optim::AdamWOptions”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\adam.h(23): message : 参见“std::tuple<double,double>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(20,3): warning C4251: “torch::optim::LBFGSOptions::max_eval_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(24,3): warning C4251: “torch::optim::LBFGSOptions::line_search_fn_”: class“c10::optional<std::string>”需要有 dll 接口由 struct“torch::optim::LBFGSOptions”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(68): message : 参见“c10::optional<std::string>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43,3): warning C4251: “torch::optim::LBFGSParamState::old_dirs_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(44,3): warning C4251: “torch::optim::LBFGSParamState::old_stps_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(45,3): warning C4251: “torch::optim::LBFGSParamState::ro_”: class“std::deque<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(43): message : 参见“std::deque<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46): message : 查看对正在编译的 类 模板 实例化“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=std::vector<at::Tensor,std::allocator<at::Tensor>>
          ]
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46,3): warning C4251: “torch::optim::LBFGSParamState::al_”: class“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”需要有 dll 接口由 struct“torch::optim::LBFGSParamState”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(46): message : 参见“c10::optional<std::vector<at::Tensor,std::allocator<at::Tensor>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\optim\lbfgs.h(77,26): warning C4251: “torch::optim::LBFGS::_numel_cache”: class“c10::optional<int64_t>”需要有 dll 接口由 class“torch::optim::LBFGS”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\runtime\custom_operator.h(23): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::Operator>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::Operator
          ]
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121,35): warning C4251: “caffe2::serialize::PyTorchStreamReader::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(122,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(123,15): warning C4251: “caffe2::serialize::PyTorchStreamReader::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(124,41): warning C4251: “caffe2::serialize::PyTorchStreamReader::in_”: class“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(100): message : 参见“std::shared_ptr<caffe2::serialize::ReadAdapterInterface>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(126,14): warning C4251: “caffe2::serialize::PyTorchStreamReader::reader_lock_”: class“std::mutex”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamReader”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\mutex(86): message : 参见“std::mutex”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(160,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::files_written_”: class“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\torch\custom_class.h(491): message : 参见“std::unordered_set<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(161,35): warning C4251: “caffe2::serialize::PyTorchStreamWriter::ar_”: class“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(121): message : 参见“std::unique_ptr<mz_zip_archive,std::default_delete<mz_zip_archive>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(162,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(163,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::archive_name_plus_slash_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(164,15): warning C4251: “caffe2::serialize::PyTorchStreamWriter::padding_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(165,17): warning C4251: “caffe2::serialize::PyTorchStreamWriter::file_stream_”: class“std::basic_ofstream<char,std::char_traits<char>>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(244): message : 参见“std::basic_ofstream<char,std::char_traits<char>>”的声明
C:\Program Files\libtorch\include\caffe2\serialize\inline_container.h(166,46): warning C4251: “caffe2::serialize::PyTorchStreamWriter::writer_func_”: class“std::function<size_t (const void *,size_t)>”需要有 dll 接口由 class“caffe2::serialize::PyTorchStreamWriter”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize\output-archive.h(65): message : 参见“std::function<size_t (const void *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(380,16): warning C4251: “torch::jit::SharedParserData::head”: class“std::unique_ptr<torch::jit::TokenTrie,std::default_delete<torch::jit::TokenTrie>>”需要有 dll 接口由 struct“torch::jit::SharedParserData”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(145): message : 参见“std::unique_ptr<torch::jit::TokenTrie,std::default_delete<torch::jit::TokenTrie>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(406,1): warning C4267: “参数”: 从“size_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\lexer.h(491,34): warning C4244: “参数”: 从“const int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(14,54): warning C4275: 非 dll 接口 class“std::exception”用作 dll 接口 struct“torch::jit::ErrorReport”的基
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\vcruntime_exception.h(48): message : 参见“std::exception”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(14): message : 参见“torch::jit::ErrorReport”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(41,29): warning C4251: “torch::jit::ErrorReport::ss”: class“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\iosfwd(241): message : 参见“std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(42,20): warning C4251: “torch::jit::ErrorReport::context”: struct“torch::jit::OwnedSourceRange”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\source_range.h(241): message : 参见“torch::jit::OwnedSourceRange”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(43,23): warning C4251: “torch::jit::ErrorReport::the_message”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(44,21): warning C4251: “torch::jit::ErrorReport::error_stack”: class“std::vector<torch::jit::Call,std::allocator<torch::jit::Call>>”需要有 dll 接口由 struct“torch::jit::ErrorReport”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\error_report.h(44): message : 参见“std::vector<torch::jit::Call,std::allocator<torch::jit::Call>>”的声明
C:\Program Files\libtorch\include\c10\util\Optional.h(198,1): warning C4624: “c10::constexpr_storage_t<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(397): message : 查看对正在编译的 类 模板 实例化“c10::constexpr_storage_t<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 类 模板 实例化“c10::trivially_copyable_optimization_optional_base<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\c10\util\Optional.h(540): message : 查看对正在编译的 别名 模板 实例化“c10::OptionalBase<T>”的引用
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\schema_matching.h(29): message : 查看对正在编译的 类 模板 实例化“c10::optional<torch::jit::NamedValue>”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(432,1): warning C4624: “c10::trivially_copyable_optimization_optional_base<T>”: 已将析构函数隐式定义为“已删除”
          with
          [
              T=torch::jit::NamedValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(29,57): warning C4251: “std::enable_shared_from_this<torch::jit::SugaredValue>::_Wptr”: class“std::weak_ptr<_Ty>”需要有 dll 接口由 class“std::enable_shared_from_this<torch::jit::SugaredValue>”的客户端使用
          with
          [
              _Ty=torch::jit::SugaredValue
          ]
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\memory(3087): message : 参见“std::weak_ptr<_Ty>”的声明
          with
          [
              _Ty=torch::jit::SugaredValue
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(222,29): warning C4251: “torch::jit::BuiltinFunction::self”: class“c10::optional<torch::jit::NamedValue>”需要有 dll 接口由 struct“torch::jit::BuiltinFunction”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\schema_matching.h(29): message : 参见“c10::optional<torch::jit::NamedValue>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(301,46): warning C4251: “torch::jit::SugaredTupleValue::tup_”: class“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”需要有 dll 接口由 struct“torch::jit::SugaredTupleValue”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(66): message : 参见“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(335,15): warning C4251: “torch::jit::BuiltinModule::name”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::BuiltinModule”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(338,26): warning C4251: “torch::jit::BuiltinModule::version”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::BuiltinModule”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(364,16): warning C4251: “torch::jit::ClassValue::type_”: class“std::shared_ptr<c10::ClassType>”需要有 dll 接口由 struct“torch::jit::ClassValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\custom_class.h(16): message : 参见“std::shared_ptr<c10::ClassType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(381,16): warning C4251: “torch::jit::NamedTupleConstructor::type_”: class“std::shared_ptr<c10::TupleType>”需要有 dll 接口由 struct“torch::jit::NamedTupleConstructor”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type.h(1036): message : 参见“std::shared_ptr<c10::TupleType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(542,11): warning C4251: “torch::jit::CastValue::type_”: class“c10::Type::SingletonOrSharedTypePtr<c10::Type>”需要有 dll 接口由 struct“torch::jit::CastValue”的客户端使用
C:\Program Files\libtorch\include\ATen\core\jit_type_base.h(375): message : 参见“c10::Type::SingletonOrSharedTypePtr<c10::Type>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(572,14): warning C4251: “torch::jit::TensorCastValue::self_”: struct“torch::jit::NamedValue”需要有 dll 接口由 struct“torch::jit::TensorCastValue”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\ir\named_value.h(16): message : 参见“torch::jit::NamedValue”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(594,19): warning C4251: “torch::jit::MagicMethod::base_value_”: class“std::shared_ptr<torch::jit::SugaredValue>”需要有 dll 接口由 struct“torch::jit::MagicMethod”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\compilation_unit.h(38): message : 参见“std::shared_ptr<torch::jit::SugaredValue>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(595,15): warning C4251: “torch::jit::MagicMethod::desugared_name_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::MagicMethod”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(656,26): warning C4251: “torch::jit::RangeValue::static_len_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::RangeValue”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(719,26): warning C4251: “torch::jit::IterableTree::unroll_length_”: class“c10::optional<int64_t>”需要有 dll 接口由 struct“torch::jit::IterableTree”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\aminmax_ops.h(43): message : 参见“c10::optional<int64_t>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(720,32): warning C4251: “torch::jit::IterableTree::children_”: class“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”需要有 dll 接口由 struct“torch::jit::IterableTree”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(66): message : 参见“std::vector<std::shared_ptr<torch::jit::SugaredValue>,std::allocator<std::shared_ptr<torch::jit::SugaredValue>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(786,15): warning C4251: “torch::jit::ExceptionValue::message_”: class“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”需要有 dll 接口由 struct“torch::jit::ExceptionValue”的客户端使用
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.31.31103\include\xstring(4927): message : 参见“std::basic_string<char,std::char_traits<char>,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\sugared_value.h(805,15): warning C4251: “torch::jit::SugaredEnumClass::enum_type_”: class“std::shared_ptr<c10::EnumType>”需要有 dll 接口由 struct“torch::jit::SugaredEnumClass”的客户端使用
C:\Program Files\libtorch\include\ATen\core\ivalue_inl.h(1471): message : 参见“std::shared_ptr<c10::EnumType>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\frontend\script_type_parser.h(48,15): warning C4251: “torch::jit::ScriptTypeParser::resolver_”: class“std::shared_ptr<torch::jit::Resolver>”需要有 dll 接口由 class“torch::jit::ScriptTypeParser”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\api\object.h(12): message : 参见“std::shared_ptr<torch::jit::Resolver>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(233,44): warning C4251: “torch::jit::Pickler::writer_”: class“std::function<void (const char *,size_t)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(124): message : 参见“std::function<void (const char *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(240,21): warning C4251: “torch::jit::Pickler::stack_”: class“std::vector<char,std::allocator<char>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\api\include\torch\serialize.h(77): message : 参见“std::vector<char,std::allocator<char>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252,45): warning C4251: “torch::jit::Pickler::memoized_ivalue_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(258,23): warning C4251: “torch::jit::Pickler::memoized_ivalues_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(260,63): warning C4251: “torch::jit::Pickler::type_renamer_”: class“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(131): message : 参见“std::function<c10::QualifiedName (const c10::ClassTypePtr &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(267,49): warning C4251: “torch::jit::Pickler::get_tensor_id_”: class“std::function<std::string (const at::Tensor &)>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(133): message : 参见“std::function<std::string (const at::Tensor &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(271,27): warning C4251: “torch::jit::Pickler::tensor_data_”: class“std::vector<at::Tensor,std::allocator<at::Tensor>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\ATen\ops\chunk_ops.h(43): message : 参见“std::vector<at::Tensor,std::allocator<at::Tensor>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(272,45): warning C4251: “torch::jit::Pickler::memoized_storage_map_”: class“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(252): message : 参见“std::unordered_map<const void *,uint32_t,std::hash<const void *>,std::equal_to<const void *>,std::allocator<std::pair<const void *const ,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274,45): warning C4251: “torch::jit::Pickler::memoized_globals_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(275,45): warning C4251: “torch::jit::Pickler::memoized_strings_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(276,45): warning C4251: “torch::jit::Pickler::memoized_devices_map_”: class“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”需要有 dll 接口由 class“torch::jit::Pickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\pickler.h(274): message : 参见“std::unordered_map<std::string,uint32_t,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,uint32_t>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(138,40): warning C4251: “torch::jit::Unpickler::reader_”: class“std::function<size_t (char *,size_t)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(38): message : 参见“std::function<size_t (char *,size_t)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(144,23): warning C4251: “torch::jit::Unpickler::stack_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(148,42): warning C4251: “torch::jit::Unpickler::globals_”: class“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(148): message : 参见“std::vector<std::function<void (void)>,std::allocator<std::function<void (void)>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(149,23): warning C4251: “torch::jit::Unpickler::memo_table_”: class“std::vector<c10::IValue,std::allocator<c10::IValue>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(59): message : 参见“std::vector<c10::IValue,std::allocator<c10::IValue>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(150,23): warning C4251: “torch::jit::Unpickler::marks_”: class“std::vector<T,std::allocator<T>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              T=UINT64
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Include\mLib\include\core-math\point3d.h(231): message : 参见“std::vector<T,std::allocator<T>>”的声明
          with
          [
              T=UINT64
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(151,29): warning C4251: “torch::jit::Unpickler::tensor_table_”: class“c10::ArrayRef<at::Tensor>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\ATen\MethodOperators.h(34): message : 参见“c10::ArrayRef<at::Tensor>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(157,49): warning C4251: “torch::jit::Unpickler::type_cache_”: class“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\ATen\core\type_factory.h(50): message : 参见“std::unordered_map<std::string,c10::TypePtr,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<const std::string,c10::TypePtr>>>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(160,16): warning C4251: “torch::jit::Unpickler::type_resolver_”: class“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(14): message : 参见“std::function<c10::StrongTypePtr (const c10::QualifiedName &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(161,13): warning C4251: “torch::jit::Unpickler::obj_loader_”: class“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (c10::StrongTypePtr,c10::IValue)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(16): message : 参见“std::function<c10::intrusive_ptr<c10::ivalue::Object,c10::detail::intrusive_target_default_null_type<TTarget>> (c10::StrongTypePtr,c10::IValue)>”的声明
          with
          [
              TTarget=c10::ivalue::Object
          ]
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(164,50): warning C4251: “torch::jit::Unpickler::read_record_”: class“std::function<c10::DataPtr (const std::string &)>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(56): message : 参见“std::function<c10::DataPtr (const std::string &)>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(165,29): warning C4251: “torch::jit::Unpickler::device_”: class“c10::optional<c10::Device>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\c10\core\TensorOptions.h(25): message : 参见“c10::optional<c10::Device>”的声明
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(175,50): warning C4251: “torch::jit::Unpickler::storage_context_”: class“std::shared_ptr<torch::jit::DeserializationStorageContext>”需要有 dll 接口由 class“torch::jit::Unpickler”的客户端使用
C:\Program Files\libtorch\include\torch\csrc\jit\serialization\unpickler.h(60): message : 参见“std::shared_ptr<torch::jit::DeserializationStorageContext>”的声明
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
  device_functions.h is an internal header file and must not be used directly.  This file will be removed in a future CUDA release.  Please use cuda_runtime_api.h or cuda_runtime.h instead.
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(158,27): warning C4101: “e”: 未引用的局部变量
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(182,44): warning C4838: 从“int”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(182,44): warning C4244: “初始化”: 从“int”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(182,63): warning C4838: 从“int”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(182,63): warning C4244: “初始化”: 从“int”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(182,82): warning C4838: 从“int”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(182,82): warning C4244: “初始化”: 从“int”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(184,35): warning C4838: 从“float”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(184,35): warning C4244: “初始化”: 从“float”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(184,59): warning C4838: 从“float”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(184,59): warning C4244: “初始化”: 从“float”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(184,83): warning C4838: 从“float”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(184,83): warning C4244: “初始化”: 从“float”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(185,35): warning C4838: 从“float”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(185,35): warning C4244: “初始化”: 从“float”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(185,63): warning C4838: 从“float”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(185,63): warning C4244: “初始化”: 从“float”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(185,91): warning C4838: 从“float”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(185,91): warning C4244: “初始化”: 从“float”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(191,47): warning C4838: 从“_Ty”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(191,47): warning C4244: “初始化”: 从“_Ty”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(191,67): warning C4838: 从“_Ty”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(191,67): warning C4244: “初始化”: 从“_Ty”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(191,87): warning C4838: 从“_Ty”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(191,87): warning C4244: “初始化”: 从“_Ty”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(192,45): warning C4838: 从“_Ty”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(192,45): warning C4244: “初始化”: 从“_Ty”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(192,66): warning C4838: 从“_Ty”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(192,66): warning C4244: “初始化”: 从“_Ty”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(192,87): warning C4838: 从“_Ty”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(192,87): warning C4244: “初始化”: 从“_Ty”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
          and
          [
              _Ty=float
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(195,35): warning C4838: 从“double”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(195,35): warning C4244: “初始化”: 从“double”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(195,86): warning C4838: 从“double”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(195,86): warning C4244: “初始化”: 从“double”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(195,137): warning C4838: 从“double”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(195,137): warning C4244: “初始化”: 从“double”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(196,35): warning C4838: 从“double”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(196,35): warning C4244: “初始化”: 从“double”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(196,86): warning C4838: 从“double”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(196,86): warning C4244: “初始化”: 从“double”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(196,137): warning C4838: 从“double”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(196,137): warning C4244: “初始化”: 从“double”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(359,43): warning C4838: 从“int64_t”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(359,43): warning C4244: “初始化”: 从“int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(359,56): warning C4838: 从“int64_t”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(359,56): warning C4244: “初始化”: 从“int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(359,69): warning C4838: 从“int64_t”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(359,69): warning C4244: “初始化”: 从“int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(360,46): warning C4838: 从“int64_t”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(360,46): warning C4244: “初始化”: 从“int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(360,63): warning C4838: 从“int64_t”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(360,63): warning C4244: “初始化”: 从“int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(360,80): warning C4838: 从“int64_t”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(360,80): warning C4244: “初始化”: 从“int64_t”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(395,18): warning C4244: “=”: 从“double”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(396,18): warning C4244: “=”: 从“double”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(397,18): warning C4244: “=”: 从“double”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(402,43): warning C4838: 从“float”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(402,43): warning C4244: “初始化”: 从“float”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(402,112): warning C4838: 从“float”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(402,112): warning C4244: “初始化”: 从“float”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(402,181): warning C4838: 从“float”转换到“_Ty”需要收缩转换
          with
          [
              _Ty=int
          ]
D:\github\realtime-scan-to-cad\DepthSensingCUDA\Source\Scan2CAD\Scan2CAD.cpp(402,181): warning C4244: “初始化”: 从“float”转换到“_Ty”，可能丢失数据
          with
          [
              _Ty=int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(104,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(102): message : 在编译 类 模板 成员函数“void c10::SmallVectorBase<unsigned int>::set_size(size_t)”时
C:\Program Files\libtorch\include\c10\util\SmallVector.h(481): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorBase<unsigned int>::set_size(size_t)”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(125): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorBase<unsigned int>”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(528): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorTemplateCommon<T,void>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(636): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorTemplateBase<T,true>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1281): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorImpl<T>”的引用
          with
          [
              T=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\TensorImpl.h(1769): message : 查看对正在编译的 类 模板 实例化“c10::SmallVector<int64_t,5>”的引用
C:\Program Files\libtorch\include\c10\util\SmallVector.h(69,26): warning C4267: “初始化”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(68): message : 在编译 类 模板 成员函数“c10::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”时
C:\Program Files\libtorch\include\c10\util\SmallVector.h(139): message : 查看对正在编译的函数 模板 实例化“c10::SmallVectorBase<unsigned int>::SmallVectorBase(void *,size_t)”的引用
C:\Program Files\libtorch\include\c10\util\Optional.h(638,1): warning C4267: “参数”: 从“size_t”转换到“T”，可能丢失数据
          with
          [
              T=int32_t
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(349): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
C:\Program Files\libtorch\include\ATen\core\function_schema.h(349): message : 查看对正在编译的函数 模板 实例化“c10::optional<int32_t>::optional<size_t,false>(U &&)”的引用
          with
          [
              U=size_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“T”转换到“float”，可能丢失数据
          with
          [
              T=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“float”，可能丢失数据
          with
          [
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::BFloat16,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::BFloat16,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::BFloat16,double>(From,const char *)”的引用
          with
          [
              To=c10::BFloat16,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<double>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<double>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<double>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=int64_t
          ]
          and
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=int64_t,
              src_t=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,int64_t>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=int64_t
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48,62): warning C4244: “参数”: 从“src_t”转换到“const T”，可能丢失数据
          with
          [
              src_t=double
          ]
          and
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=double,
              src_t=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,double>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=double
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(520,1): warning C4267: “=”: 从“size_t”转换到“Size_T”，可能丢失数据
          with
          [
              Size_T=unsigned int
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(514): message : 在编译 类 模板 成员函数“void c10::SmallVectorTemplateBase<T,false>::takeAllocationForGrow(T *,size_t)”时
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(496): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorTemplateBase<T,false>::takeAllocationForGrow(T *,size_t)”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(492): message : 在编译 类 模板 成员函数“void c10::SmallVectorTemplateBase<T,false>::grow(size_t)”时
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1172): message : 查看对正在编译的函数 模板 实例化“void c10::SmallVectorTemplateBase<T,false>::grow(size_t)”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1127): message : 在编译 类 模板 成员函数“c10::SmallVectorImpl<T> &c10::SmallVectorImpl<T>::operator =(c10::SmallVectorImpl<T> &&)”时
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1341): message : 查看对正在编译的函数 模板 实例化“c10::SmallVectorImpl<T> &c10::SmallVectorImpl<T>::operator =(c10::SmallVectorImpl<T> &&)”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\c10\util\SmallVector.h(1281): message : 查看对正在编译的 类 模板 实例化“c10::SmallVectorImpl<T>”的引用
          with
          [
              T=at::OperandInfo
          ]
C:\Program Files\libtorch\include\ATen\TensorIterator.h(541): message : 查看对正在编译的 类 模板 实例化“c10::SmallVector<at::OperandInfo,4>”的引用
C:\Program Files\libtorch\include\c10\util\complex.h(173,14): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(48): message : 查看对正在编译的函数 模板 实例化“c10::complex<float>::complex<T>(const c10::complex<double> &)”的引用
          with
          [
              T=float
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(46): message : 在编译 类 模板 成员函数“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”时
          with
          [
              dest_t=c10::complex<float>,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的函数 模板 实例化“dest_t c10::static_cast_with_inter_type<dest_t,From>::apply(src_t)”的引用
          with
          [
              dest_t=c10::complex<float>,
              From=c10::complex<double>,
              src_t=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(181): message : 查看对正在编译的 类 模板 实例化“c10::static_cast_with_inter_type<To,From>”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\TypeCast.h(193): message : 查看对正在编译的函数 模板 实例化“To c10::convert<To,From>(From)”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\core\Scalar.h(70): message : 查看对正在编译的函数 模板 实例化“To c10::checked_convert<c10::complex<float>,c10::complex<double>>(From,const char *)”的引用
          with
          [
              To=c10::complex<float>,
              From=c10::complex<double>
          ]
C:\Program Files\libtorch\include\c10\util\complex.h(173,34): warning C4244: “初始化”: 从“const T”转换到“T”，可能丢失数据
          with
          [
              T=double
          ]
          and
          [
              T=float
          ]
  SensorDataReader.cpp
  StdOutputLogger.cpp
  StructureSensor.cpp
  TimingLog.cpp
